{"version":3,"file":"script.min.js","names":["document","addEventListener","event","stageCascadeScreen","getElementById","classList","contains","renderStageCascadeScreen","logoutButton","querySelector","handleLogout","e","sidePanel","hamburgerButton","target","toggleSidePanel","Set","ParticleSystem","particlePool","maxParticles","init","i","this","particle","createElement","className","push","createParticle","x","y","window","innerWidth","pop","style","left","top","setTimeout","currentArcadeSessionStructure","eventId","otp","wordPool","participants","teacherId","wordGoal","state","completedPlayers","startTime","endTime","podiumRanks","playerName","winnerScreenShown","updateUI","requestAnimationFrame","fragment","createDocumentFragment","body","appendChild","matches","handleButtonClick","handleLevelClick","CoinsManager","displayElements","initialize","clear","querySelectorAll","forEach","display","add","loadUserCoins","currentUser","parseInt","localStorage","getItem","data","error","supabaseClient","from","select","eq","id","single","coins","updateCoins","amount","oldTotal","gameState","newTotal","currentValue","performance","now","animate","currentTime","elapsed","progress","Math","min","textContent","round","color","update","setItem","toString","updatePerkButtons","updateDisplays","WordsManager","el","loadUserWords","then","wordCount","unique_words_practiced","err","updateWords","count","currentCount","newCount","value","updateValue","timestamp","perkButtons","timeFreeze","skip","clue","reveal","Object","entries","perkType","button","onclick","buyPerk","GameTimer","lastTick","updateTimer","bind","cleanupLevel","btn","clearTimeout","levelTimeout","async","transitionScreen","screenType","currentScreen","opacity","Promise","r","nextScreen","GameCache","words","Map","getWords","setId","has","get","loadWords","set","gameInit","checkExistingSession","ensureCorrectSchema","loadUserGameProgress","initializeGame","initializeParticles","loadCustomLists","setupAutoSave","createClient","supabase","persistSession","autoRefreshToken","detectSessionInUrl","showJoinModal","modal","teacherView","playerView","otpInput","usernameInput","readOnly","usernameDisplay","closest","remove","focus","username","user_metadata","email","split","inputGroup","insertBefore","handleSignup","password","authData","authError","auth","signUp","options","full_name","profileError","upsert","user","status","role","onConflict","existingProgress","progressCheckError","code","gameProgressData","user_id","stage","set_number","level","perks","unlocked_sets","unlocked_levels","perfect_levels","completed_levels","insertProgressError","insert","existingStats","statsCheckError","playerStatsData","total_levels_completed","insertStatsError","signInData","signInError","signInWithPassword","hideAuthModal","currentStage","currentSet","currentLevel","unlockedSets","unlockedLevels","perfectLevels","completedLevels","updateAuthUI","showScreen","message","includes","alert","safeUpsertRecord","table","keyField","existingData","checkError","insertError","updateError","updateUserCoins","previousCoins","updateAllCoinDisplays","progressData","JSON","parse","stringify","checkAndFixDatabaseSchema","missingCompletedLevels","missingPerfectLevels","updateData","initializeGameProgressForUser","userId","handleLogin","loginInput","loginMethod","userProfile","profile","updateUserStatusDisplay","all","updateGuestPlayButton","savedProgress","sets","Array","isArray","setKey","levels","savedContext","context","Date","setupDefaultUnlocks","localProgress","parsedProgress","initialProgress","keys","length","debugUnlockState","stageId","signOut","clearCustomPracticeUI","listNameInput","wordInput","translationResults","wordList","innerHTML","customPracticeLists","currentList","lists","saveProgress","extendedData","fromEntries","map","contextData","coreError","saveExtendedField","fieldName","fieldValue","field","initialData","needsUpdate","requiredFields","name","defaultValue","switchAuthTab","tab","loginTab","signupTab","loginForm","signupForm","authBox","userInfo","userEmailElement","catch","CustomListsManager","loadFromSupabase","loadFromLocalStorage","or","item","translations","isShared","is_shared","sharedBy","shared_by","createdAt","created_at","savedLists","save","list","saveToSupabase","saveToLocalStorage","listData","index","findIndex","l","tempId","newList","listId","filter","delete","share","recipientId","find","rpc","p_user_id","p_name","p_words","p_translations","p_is_shared","p_local_id","p_shared_with","p_shared_by","getListLimits","maxLists","maxWords","maxPlays","canShare","playDisplay","Infinity","canCreateMoreLists","limits","handleHashChange","location","hash","startsWith","replace","history","pushState","title","pathname","test","navigator","userAgent","onFirstTouch","removeEventListener","once","tagName","screen","orientation","lock","slice","setupUserStatusSubscription","initializeStatusCheck","updateNavigationContainer","gameStructure","stages","numSets","levelsPerSet","bossLevel","levelTypes","normal","boss","sessionStartTime","levelScores","PERK_CONFIG","description","cost","icon","duration","perkConfig","showNotification","isFrozen","handleAnswer","buttons","correctAnswer","currentGame","isHebrewToEnglish","currentIndex","wrongButtons","buttonToDisable","floor","random","disabled","correctAns","originalBackground","background","config","availablePurchases","canAfford","toggle","countElement","correctAnswers","firstAttempt","mixed","speedChallenge","levelStartTime","timeBonus","streakBonus","questionStartTime","wrongStreak","progressLost","timer","timeRemaining","resetProgressTimeout","isFirstResetAttempt","progressToSave","k","v","loadProgress","saved","savedCustomCoins","startTimer","questionCount","clearTimer","initialTimeRemaining","totalTime","updateTimerDisplay","updateTimerCircle","setInterval","max","handleTimeUp","minutes","seconds","timerElement","String","padStart","clearInterval","timerProgress","createParticles","particleConfig","matchMedia","size","distance","colors","container","backgroundColor","position","angle","PI","width","height","setProperty","cos","sin","animation","removeChild","animateCoinsChange","t","n","parseFloat","s","o","a","LEADERBOARD_UPDATE_INTERVAL","updatePlayerProgress","lastLeaderboardUpdate","currentArcadeSession","wordsCompleted","dataset","getBoundingClientRect","sort","join","outerHTML","updateArcadeProgress","updatePlayerRankDisplay","element","startValue","endValue","totalFrames","changePerFrame","currentFrame","showReviveOverlay","screenId","forceRefresh","showAuthModal","removeItem","cleanupLeaderboard","reload","particleContainer","screenElement","addAdminTestButton","restoreGameContext","startGame","showStageCascadeScreen","showLevelScreen","levelHeader","totalLevels","completedCount","levelKey","progressPercentage","setIcon","getSetIcon","setDescription","getSetDescription","levelGrid","testLevels","levelItem","isUnlocked","isPerfect","isCompleted","isBossLevel","isTestLevel","startLevel","legend","variations","calculateWordsForLevel","vocabulary","totalWords","wordSurplus","randomIndices","_","j","startIndex","startPos","baseCount","adjustedCount","getUnusedWords","usedWords","selectRandomWords","availableIndices","selected","randomIndex","generateAnswerChoices","choices","allChoices","randomChoice","gameContext","perksContainer","powerupsContainer","coinCount","coinsContainer","userStatus","showUnregisteredWarning","proceedWithLevel","showUpgradePrompt","applyBossLevelStyles","existingButton","adminButton","cssText","findFurthestProgression","forceFullIntro","restartsRemaining","vocabularySet","vocabularySets","startingCoins","startingPerks","showLevelIntro","setupGameState","initializeBossLevel","loadNextBossQuestion","updateProgressCircle","loadNextQuestion","levelId","coinDisplay","levelConfig","randomWords","randomTranslations","assign","handleLevelProgression","bossRewardApplied","updateNavigationIcons","navContainer","homeButton","backButton","showSetScreen","stopLevelAndGoBack","progressElement","circumference","strokeDasharray","strokeDashoffset","hue","stroke","questionWordElement","wordToDisplay","answerPool","answerSet","randomAnswer","buttonsContainer","answer","showBossVictoryScreen","showBossDefeatEffect","addAdminTestingButton","questionScreen","awardTimeBonus","timeSpent","bonusCoins","pulseCoins","times","coinIcon","pulseCount","doPulse","targetValue","animateNumber","Number","eliminateWrongAnswer","revealCorrectAnswer","isCustomPractice","handleCustomPracticeAnswer","animateNumberChange","increment","updateFrame","handleLevelCompletion","restoreFromBossLevel","wasAlreadyCompleted","coinReward","updateLevelProgress","stageData","isLastLevelInSet","isLastSetInStage","checkSetCompletion","unlockNextSet","handleProgression","currentStageConfig","unlockNextStage","createCompletionParticles","rect","viewportX","viewportY","activatePerk","powerupCooldown","powerupCooldowns","success","usePerk","HTMLElement","characterSet","createLetterParticle","startX","clientWidth","startY","clientHeight","moveX","moveY","rotate","particleInterval","intervalId","outro","justifyContent","alignItems","streak","animationDelay","announcement","showGameOverOverlay","overlay","startCustomLevel","practiceState","dashoffset","handleResetProgress","resetButton","toggleFullScreen","docElement","documentElement","fullscreenButton","fullscreenElement","exitFullscreen","requestFullscreen","handleRestartLevel","restartButton","showStagesFromMenu","preferredStage","furthestLevel","highestRank","isUnlockedNotCompleted","isNotCompleted","b","rank","calculateRank","hasExistingProgress","showGradeLevelSelector","completed","perfect","nextLevel","stageStructure","nextSet","nextSetKey","nextStage","callback","forceFull","transitionDiv","announcementDiv","progressBar","levelClass","announcementElement","offsetHeight","announcementEl","boxShadow","titleEl","textShadow","preventDefault","type","onload","addCustomWordList","saveCustomLists","translateWord","word","apiUrl","encodeURIComponent","fetch","response","json","responseData","translatedText","trackListPlay","playCountKey","plays","getUserListLimits","deleteCustomList","toggleAuthMode","updateLocalSharedLists","sharedList","local_id","supabaseId","debugShareList","tables","tablesError","shareListWithUser","shared_with","toISOString","closeShareModal","showSuccessToast","toast","showErrorToast","backdrop","loadSharedLists","showShareModal","existingModal","existingBackdrop","usersList","neq","getAttribute","originalText","handleProgressionAfterCompletion","isLevelCompleted","hideUpgradePrompt","prompt","hideUpgradePromptAndContinue","popup","upgradeScreen","handleUpgradeClick","showPaymentScreen","checkUserAccess","fullAccess","unlockedStages","defaultUnlockedLevels","payment_pending","stageWrapper","unregisteredWarningShown","fullscreenPrompt","styleElement","head","skipButton","signupButton","parentNode","authModal","toggleParentPhone","isAdult","checked","parentPhoneGroup","parentPhoneInput","required","showUpgradeScreen","MutationObserver","mutations","mutation","addedNodes","node","nodeType","crown","stopPropagation","observe","childList","subtree","RateLimiter","constructor","maxRequests","timeWindow","requests","checkLimit","recentRequests","time","sanitizeInput","input","trim","SessionManager","maxInactiveTime","lastActivity","updateActivity","checkSession","modalSystem","show","DataValidator","validateGameProgress","key","validateCustomList","escapeHTML","str","createListItem","ErrorHandler","logError","stack","handleError","toggleParentFields","parentSection","adultSection","parentInputs","adultInputs","continueAfterUpgrade","transform","upgradeForm","reset","checkPopupStatus","popups","skipUpgrade","userProfileSection","userTierText","updateUserStats","dispatchEvent","CustomEvent","detail","gameData","statsData","channel","on","schema","payload","new","showPremiumCelebration","subscribe","checkUpgradeStatus","hasRequestedUpgrade","isPremium","isPending","navigateHome","forceReload","href","showLeaderboard","entriesContainer","updateLeaderboard","currentEntries","children","positions","entry","player","player_rank","total_words_learned","newEntries","oldPos","newPos","yDiff","pollInterval","leaderboardScreen","detailedError","removeChannel","updatePlayerStats","levelTime","mistakes","currentStreak","currentStats","statsError","wordsToAdd","statsUpdate","last_updated","upsertError","returning","session","getSession","profileData","autoSaveInterval","celebrationOverlay","handlePremiumCelebrationComplete","completedStage","stageNum","isNaN","statusCheckInterval","previousStatus","debugUpgrade","playerRank","showArcadeModal","isInitialized","celebrationTriggered","arcadeChannel","unsubscribe","broadcast","self","p","leaderboard","offsetParent","updateAllPlayersProgress","origin","generateQRCode","checkbox","wordGoalInput","wordGoalSlider","wordGoalDisplay","initializeWordGoalSlider","endArcadeButton","slider","stops","stop","startPlayerCounting","updateCount","arcade_session","countInterval","joinArcade","toUpperCase","getRandomSimploName","handleGameEnd","startArcadeGame","send","joinedAt","joinEventSent","requestType","showWaitingScreen","showJoinButton","joinButton","getCurrentCoins","names","waitingScreen","joinGameButton","initializeWaitingGame","playerCountElement","parentElement","initializeArcade","initializeButton","initializeModeratorInactivityTimer","showModeratorScreen","otpDisplay","qrUrl","QRious","backgroundAlpha","foreground","sessionInfo","sessionDate","toLocaleDateString","toLocaleTimeString","sessionWordGoal","activeParticipantCount","initializeLeaderboard","readyPhrases","shineColors","currentProgressMap","usernameEl","wordsEl","participant","sortedParticipants","leaderboardHtml","leaderboardEl","countEl","dateEl","timeEl","goalEl","startArcade","selectedStages","warningElement","generateWordPool","wordGoalValue","playerIndex","currentProgress","undefined","checkGameEnd","lateJoin","participantCountElement","completionTime","endArcadeForAll","arcadeModal","idleDetection","initializeModeratorIdleDetection","pool","translation","cleanupModeratorScreen","moderatorScreen","channelSubscription","initialCoins","correctStreak","lastBroadcast","initialCoinsLoaded","playerUsername","initializePowerups","leaderboardChannel","participantData","existingPlayer","currentWords","newWords","respondingPlayer","requestingPlayer","existingIndex","existing","targetUser","powerup","fromUser","oldCoins","effect","coinMultiplier","boostedAnswersLeft","coinBlockedAnswers","updateModeratorLeaderboard","loadNextArcadeQuestion","arcadeTimeouts","arcadeIntervals","updateArcadeCoins","isNewPlayerJoining","some","getCurrentCoinsForArcade","questionWord","buttonsDiv","currentWord","randomWord","option","handleArcadeAnswer","splice","circle","showArcadeCompletionScreen","playerData","exitArcadeCompletion","exitArcade","isCorrect","skipMode","lastAnswerTime","bossOrb","randomColor","bossDefeated","progressCircle","updateBossHealthBar","coinsEarned","wordIndex","trackWordEncounter","isArcadeMode","allButtons","currentCorrectAnswer","handleCustomLevelCompletion","updateArcadePowerups","myIndex","handlePlayerCompletedGoal","forcedEnd","showFinalResultsForPlayer","podiumPlayers","showModeratorVictoryScreen","showPodiumPlayerResults","players","getOrdinal","showConsolationScreen","emojis","randomEmoji","playerPodiumInfo","showPersonalVictoryScreen","startPlayerConfetti","moderatorActivityTimer","countdownTimer","startLeaderboardCelebration","showPlayerFinalResults","currentPlayer","currentPlayerRank","top3","isCurrentPlayer","backgrounds","getPlayerBackground","removePlayer","modalOverlay","initVerticalNavigation","existingButtons","hamburger","home","fullscreen","settings","accessibility","hamburgerBtn","homeBtn","fullscreenBtn","resetBtn","settingsBtn","accessibilityModal","accessBtn","values","mainLoginButton","guestPlayButton","showPricesScreen","showRightsAndPolicies","showAboutPage","showContactUs","start","end","step","current","frameCount","updateNumber","notification","velocity","borderRadius","destinationX","destinationY","easing","onfinish","joinArcadeWithUsername","setupCelebrationHandler","authContent","arcadeContent","powerupPool","highFive","fistBump","energyBoost","freeze","coinStorm","screenShake","powerupDefinitions","updateAvailability","card","costElement","isAffordable","cursor","powerupKeys","selectedKeys","getRandomPowerups","powerupCard","otherPlayers","targetPlayer","powerupKey","characterData","updatePowerupAvailability","powerupCards","currentCoins","updateArcadeCoinDisplay","displayedValue","joinUrl","qrLanding","codeDisplay","proceedToGame","switchAuthForm","combineCustomLists","listIds","combinedList","isTeacherList","convertListToArcade","isCustomArcade","timerContainer","timerDisplay","createBossTimer","bossFirstHealthRestored","bossSecondHealthRestored","disabledOverlay","updateBossTimer","replaceCoinWithBossOrb","orbStyle","initializeBossHealthBar","healthStyle","addBossLevelStyles","existingStyle","bossStyle","remainingPercentage","minSize","maxSize","currentSize","restoredIndex","startBossLevel","createLightningEffect","createBossRainingLetters","removeAttribute","originalCoinsHTML","stopBossRainingLetters","initializeArcadeParticipation","lastActive","removeInactivePlayer","handleArcadeCompletion","completionRank","showPersonalizedCompletion","topThree","completionIndex","indexOf","endArcade","moderatorInactivity","isGameActive","resetArcadeSession","newOtp","timeout","interval","celebrationConfettiInterval","playerConfettiInterval","header","qrCode","url","game_state","finishCelebrationAndGoHome","cleanupModeratorInactivityMonitoring","hidePersonalVictoryScreen","rankInfo","showFinalResults","lastUpdateTimestamp","idleTimerActive","idleCountdown","overlayElement","updateTimestamp","clearIdleTimer","idleCheckInterval","secondsRemaining","timerContent","timerTitle","timerMessage","topPlayers","handleIdleTimeout","startIdleTimer","leaderboardObserver","attributes","setupActivityMonitoring","isCountingDown","createInactivityOverlay","startInactivityMonitoring","trackLeaderboardUpdates","existingOverlay","cancelCountdown","resetInactivityTimer","startCountdown","secondsLeft","handleCountdownComplete","activityTimer","isModeratorScreenActive","clearModeratorTimers","createModeratorInactivityOverlay","startModeratorInactivityMonitoring","trackModeratorLeaderboardUpdates","cancelModeratorCountdown","resetModeratorInactivityTimer","hidden","startModeratorCountdown","handleModeratorCountdownComplete","hasPodiumWinners","leaderboardEntries","entryPositions","winnerEntry","cloneNode","winnerLabel","addWinnerEmojis","zIndex","startConfettiShower","winners","safeUpdateWordsCompleted","newValue","emoji","emojiElement","baseSize","fontSize","createConfettiBatch","confettiInterval","confetti","delay","isSquare","animationDuration","w","showPersonalVictoryCelebration","content","createPlayerConfettiBatch","closePersonalVictory","bonus","customGameState","maxLevel","showCustomCompletionScreen","nextLevelData","getWordsForLevel","screenRect","startCoins","customLevel","countdownInterval","handleReviveTimeout","handleRevive","createResurrectionParticles","transition","centerX","centerY","endX","endY","updateSidePanelLink","levelMapLink","setAttribute","stagesContainer","unlockedSetCount","completedSets","setNum","isSetCompleted","stageIcon","getStageIcon","stageHebrewName","getStageHebrewName","stageDescription","getStageDescription","stageStatus","getStageStatus","populateSetsGrid","addStageToggleListeners","currentStageWrapper","updateGameStateFromProgress","totalSets","levelCount","stageName","stageDesc","cascadeScreen","c","crownIcon","handleCrownClick","forceShowUpgradeForm","ensureScreenExists","safeShowScreen","updateSidePanelLinks","initializeStageCascadeScreen","parsed","findFurthestLevelInStage","stageConfig","currentSetIndex","saveProgressToLocalStorage","hasPerfectLevels","debugGameProgress","optimizeMobileRendering","debounce","insertAdjacentHTML","func","wait","args","optimizeMobileEvents","passive","initAccessibilityMenu","toggleButton","closeButton","loadAccessibilitySettings","action","applyAccessibilitySetting","sibling","currentScale","getComputedStyle","getPropertyValue","removeProperty","resetAllAccessibilitySettings","saveAccessibilitySettings","classNames","fontScale","savedSettings","updateActiveButtons","grayscale","buttonData","hasClass","mode","isNewWord","practice_count","last_practiced_at","game_mode","coins_earned","newWordCount","createRainingParticles","letters","containerWidth","rainingLettersInterval","letter","newIndex","healBoss","newHealthPercentage","flashColor","originalColor","newOffset","showBossHitEffect","originalBg","randomColorChoice","styleElem","handleBossAnswer","correct","flickerColors","lightningContainer","flickerCount","screenWidth","particleCount","createBossStyleSheet","showModernBossVictoryScreen","victoryOverlay","victoryContent","continueBtn","bossDefeatedEffectShown","coinRewardNeeded","originalCoins","targetCoins","transitionOverlay","firstChild","incinerationEffect","stepDelay","currentStep","animateCoins","showBossVictoryNotification","styleEl","updateCoinsAfterBossVictory","newCoins","handleBossVictoryContinue","bgTransition","resetBossStyles","offsetWidth","handleBossVictoryHome","isAdminUser","addAdminSkipButton","handleAdminSkip10","skipCount","storedLists","targetUserId","listIdStr","validateListForPractice","valid","levelData","initializeFromList","maxLevels","isTest","isFinal","processCustomWords","inputField","resultsDiv","inputText","flat","wordItem","createWordItem","findTranslation","initializeDragAndDrop","makeWordListDraggable","toLowerCase","draggable","deleteBtn","right","addNewWord","newItem","deleteWord","clone","replaceChild","dataTransfer","setData","draggingElement","afterElement","getDragAfterElement","clientY","draggableElements","reduce","child","box","offset","NEGATIVE_INFINITY","setupWordListKeyNavigation","activeElement","nextElement","previousElementSibling","nextElementSibling","saveCurrentList","nameInput","listToSave","isEditing","updateListsDisplay","editCustomList","wordTranslationList","originalHTML","showCustomListsManager","resolve","hasSufficientWords","playsAvailableHtml","listItem","practiceButton","startCustomListPractice","editButton","deleteButton","shareButton","listHeader","toggleListCollapse","validation","listPlaysKey","playsUsed","customList","isFinalLevel","customPracticeScreen","shareCustomList","displayName","sharedListName","modalContainer","padding","maxWidth","maxHeight","overflowY","html","substring","innerText","exitCustomPractice","refreshCustomLists","generateAnswerOptions","isHebrewAnswer","isHebrewWord","additionalOptions","getRandomAnswerOptions","concat","shuffleArray","ensureUserInitialization","createStatsError","progressError","createProgressError","array","shuffled","gameContainer","playerElement","scoreElement","livesElement","livesDiv","wordPairs","hebrew","english","gameActive","score","speed","fallingWords","currentHebrewWord","playerPosition","gameLoopId","spawnIntervalId","lives","missedMatches","setRandomHebrewWord","randomPair","createFallingWord","matchingWord","pair","nonMatchingWords","isMatching","wordElement","matching","randomNonMatching","gameLoop","containerBottom","playerTop","missIndicator","livesDisplay","repeat","gameOver","pointAnimation","gameOverMsg","isDragging","handleStart","pageX","touches","containerRect","updatePlayerPosition","handleMove","handleEnd","styleId","arcadeCheckId","cancelAnimationFrame","foundSelf","prevWords","prevCoins","currentRank","suffix","num","getSuffix","rankDisplay","currentRankElement","animating","newRankElement","toggleInlineEdit","saveInlineEdit","enterInlineEditMode","originalName","editContainer","wordTable","addButton","addInlineWord","populateInlineWordList","initializeInlineDragAndDrop","makeInlineWordListDraggable","deleteInlineWord","getInlineDragAfterElement","newName","updatedList","savedList","wordPreview","warningText","canPractice","handleUpgradeButtonClick","handleUpgradeSubmit","fullName","phone","border","parentName","parentPhone","requestData","is_adult","parent_name","parent_phone","referral_source","showUpgradeConfirmation","validateForm","popupOverlay","popupContent","continueButton","handleUpgradeContinue","root","fullscreenIcon","existingMenu","optimizeQuestionScreenForMobile","form","originalShowScreen"],"sources":["script.js"],"mappings":"AAEIA,SAASC,iBAAiB,iBAAkBC,IAE9C,MAAMC,EAAqBH,SAASI,eAAe,wBAC/CD,GAAsBA,EAAmBE,UAAUC,SAAS,YAE9DC,IACF,IAGEP,SAASC,iBAAiB,oBAAoB,KAC9C,MAAMO,EAAeR,SAASS,cAAc,kBACxCD,GACAA,EAAaP,iBAAiB,QAASS,EAC3C,IAGJV,SAASC,iBAAiB,SAAUU,IAChC,MAAMC,EAAYZ,SAASS,cAAc,eACnCI,EAAkBb,SAASS,cAAc,sBAE3CG,EAAUP,UAAUC,SAAS,SAC5BM,EAAUN,SAASK,EAAEG,SACrBD,EAAgBP,SAASK,EAAEG,SAC5BC,IACJ,IAGAf,SAASC,iBAAiB,oBAAoB,KAI/B,IAAIe,GAClB,IAGL,MAAMC,EAAiB,CACnBC,aAAc,GACdC,aAAc,GAEd,IAAAC,GAEI,IAAI,IAAIC,EAAI,EAAGA,EAAIC,KAAKH,aAAcE,IAAK,CACvC,MAAME,EAAWvB,SAASwB,cAAc,OACxCD,EAASE,UAAY,2BACrBH,KAAKJ,aAAaQ,KAAKH,EAC3B,CACJ,EAEA,cAAAI,CAAeC,EAAGC,GAEd,GAAIC,OAAOC,YAAc,IACrB,OAGJ,MAAMR,EAAWD,KAAKJ,aAAac,MAC9BT,IAELA,EAASU,MAAMC,KAAO,GAAGN,MACzBL,EAASU,MAAME,IAAM,GAAGN,MAExBO,YAAW,KACPd,KAAKJ,aAAaQ,KAAKH,EAAS,GACjC,KACP,GAKEc,EAAgC,CAClCC,QAAS,KACTC,IAAK,KACLC,SAAU,GACVC,aAAc,GACdC,UAAW,KACXC,SAAU,GACVC,MAAO,YACPC,iBAAkB,GAClBC,UAAW,KACXC,QAAS,KAGTC,YAAa,CAEb,EAGAC,WAAY,KACZC,mBAAmB,GAcvB,SAASC,IAELC,uBAAsB,KAClB,MAAMC,EAAWrD,SAASsD,yBAE1BtD,SAASuD,KAAKC,YAAYH,EAAS,GAE3C,CAjBArD,SAASC,iBAAiB,SAAUU,IAChC,MAAMG,EAASH,EAAEG,OAEbA,EAAO2C,QAAQ,aACfC,kBAAkB5C,GACXA,EAAO2C,QAAQ,WACtBE,iBAAiB7C,EACrB,IAYJ,MAAM8C,EAAe,CACjBC,gBAAiB,IAAI7C,IAErB,UAAA8C,GACIxC,KAAKuC,gBAAgBE,QACrB/D,SAASgE,iBAAiB,eAAeC,SAAQC,IAC7C5C,KAAKuC,gBAAgBM,IAAID,EAAQ,GAEzC,EAEA,mBAAME,GACF,IAAKC,YACD,OAAOC,SAASC,aAAaC,QAAQ,uBAAyB,KAGlE,IACI,MAAMC,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,SACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAEL,GAAIN,EAAO,MAAMA,EACjB,OAAOD,EAAKQ,OAAS,CACzB,CAAE,MAAOP,GAEL,OAAO,CACX,CACJ,EAEA,iBAAMQ,CAAYC,GACd,IACI,MAAMC,EAAWC,EAAUJ,MACrBK,EAAWF,EAAWD,EAoC5B,GAnCAE,EAAUJ,MAAQK,EAGlBhE,KAAKuC,gBAAgBI,SAAQC,IACzB,IAAIqB,EAAeH,EACnB,MACMtC,EAAY0C,YAAYC,MAyB9BrC,uBAvBA,SAASsC,EAAQC,GACb,MAAMC,EAAUD,EAAc7C,EACxB+C,EAAWC,KAAKC,IAAIH,EALb,IAKiC,GAE9CL,EAAeH,GAAYE,EAAWF,GAAYS,EAClD3B,EAAQ8B,YAAcF,KAAKG,MAAMV,GAE7BJ,EAAS,EACTjB,EAAQjC,MAAMiE,MAAQ,iBACff,EAAS,IAChBjB,EAAQjC,MAAMiE,MAAQ,gBAGtBL,EAAW,EACXzC,sBAAsBsC,IAEtBxB,EAAQ8B,YAAcV,EACtBlD,YAAW,KACP8B,EAAQjC,MAAMiE,MAAQ,aAAa,GACpC,KAEX,GAE8B,IAI9B7B,YAAa,CACb,MAAMK,MAAEA,SAAgBC,EACnBC,KAAK,iBACLuB,OAAO,CAAElB,MAAOK,IAChBR,GAAG,UAAWT,YAAYU,IAE/B,GAAIL,EAAO,MAAMA,CACrB,MACIH,aAAa6B,QAAQ,qBAAsBd,EAASe,YAKxD,OADAC,KACO,CAEX,CAAE,MAAO5B,GAML,OAJApD,KAAKuC,gBAAgBI,SAAQC,IACzBA,EAAQ8B,YAAcX,EAAUJ,MAAQE,CAAM,IAElDmB,KACO,CACX,CACJ,EAEA,cAAAC,GACIjF,KAAKuC,gBAAgBI,SAAQC,IACzBA,EAAQ8B,YAAcX,EAAUJ,KAAK,IAEzCqB,GACJ,GAGEE,EAAe,CACnB3C,gBAAiB,IAAI7C,IAErB,UAAA8C,GACExC,KAAKuC,gBAAgBE,QACrB/D,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CnF,KAAKuC,gBAAgBM,IAAIsC,EAAG,IAI1BpC,aACF/C,KAAKoF,gBAAgBC,MAAKC,IACxBtF,KAAKiF,eAAeK,EAAU,GAGpC,EAEA,mBAAMF,GACJ,IAAKrC,YAAa,OAAO,EAEzB,IACE,MAAMI,KAAEA,EAAIC,MAAEA,SAAgBC,EAC3BC,KAAK,gBACLC,OAAO,0BACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAEH,GAAIN,EAAO,MAAMA,EACjB,OAAOD,GAAMoC,wBAA0B,CACzC,CAAE,MAAOC,GAEP,OAAO,CACT,CACF,EAEA,iBAAMC,CAAYC,GAChB,IACE,MAAMC,EAAe3C,SAAStE,SAASI,eAAe,cAAc4F,cAAgB,EAC9EkB,EAAWD,EAAeD,EAqBhC,GAnBA1F,KAAKuC,gBAAgBI,SAAQwC,IAC3B,IAAIU,EAAQF,EACZ,MAAMnE,EAAY0C,YAAYC,MAE9BrC,uBAAsB,SAASgE,EAAYC,GACzC,MAAMzB,EAAUyB,EAAYvE,EACtB+C,EAAWC,KAAKC,IAAIH,EAAU,IAAM,GAE1CuB,EAAQF,GAAgBC,EAAWD,GAAgBpB,EACnDY,EAAGT,YAAcF,KAAKG,MAAMkB,GAExBtB,EAAW,EACbzC,sBAAsBgE,GAEtBX,EAAGT,YAAckB,CAErB,GAAE,IAGA7C,YAAa,CACf,MAAMK,MAAEA,SAAgBC,EACrBC,KAAK,gBACLuB,OAAO,CAAEU,uBAAwBK,IACjCpC,GAAG,UAAWT,YAAYU,IAE7B,GAAIL,EAAO,MAAMA,CACnB,CAEA,OAAO,CACT,CAAE,MAAOoC,GAEP,OAAO,CACT,CACF,EAEA,cAAAP,CAAeS,GACb1F,KAAKuC,gBAAgBI,SAAQwC,IAC3BA,EAAGT,YAAcgB,CAAK,GAE1B,GAIIM,EAAc,CAChBC,WAAYvH,SAASI,eAAe,kBACpCoH,KAAMxH,SAASI,eAAe,YAC9BqH,KAAMzH,SAASI,eAAe,YAC9BsH,OAAQ1H,SAASI,eAAe,eAIpCuH,OAAOC,QAAQN,GAAarD,SAAQ,EAAE4D,EAAUC,MACxCA,IACAA,EAAOC,QAAU,IAAMC,EAAQH,GACnC,IAGJ,MAAMI,EAAY,CACdC,SAAU,EAEV,MAAA/B,CAAOkB,GACE/F,KAAK4G,WAAU5G,KAAK4G,SAAWb,GACtBA,EAAY/F,KAAK4G,UAElB,MACT5G,KAAK6G,cACL7G,KAAK4G,SAAWb,GAGpBjE,sBAAsB9B,KAAK6E,OAAOiC,KAAK9G,MAC3C,GAGJ,SAAS+G,IAELrI,SAASgE,iBAAiB,mBAAmBC,SAAQqE,IACjDA,EAAIP,QAAU,IAAI,IAItB9G,EAAe8C,QAGfwE,aAAaC,aACjB,CAGAC,eAAeC,EAAiBC,GAC5B,MAAMC,EAAgB5I,SAASS,cAAc,mBACzCmI,IACAA,EAAc3G,MAAM4G,QAAU,QACxB,IAAIC,SAAQC,GAAK3G,WAAW2G,EAAG,OACrCH,EAAc3G,MAAMiC,QAAU,QAGlC,MAAM8E,EAAahJ,SAASI,eAAe,GAAGuI,YAC9CK,EAAW/G,MAAMiC,QAAU,OAC3Bd,uBAAsB,KAClB4F,EAAW/G,MAAM4G,QAAU,CAAC,GAEpC,CAEA,MAAMI,EAAY,CACdC,MAAO,IAAIC,IAEX,cAAMC,CAASC,GACX,GAAI/H,KAAK4H,MAAMI,IAAID,GACf,OAAO/H,KAAK4H,MAAMK,IAAIF,GAG1B,MAAMH,QAAcM,UAAUH,GAE9B,OADA/H,KAAK4H,MAAMO,IAAIJ,EAAOH,GACfA,CACX,GAGEQ,EAAW,CACb,UAAMtI,GAMF,SAFMuI,KAEFtF,YAAa,OAGUuF,UAKbC,EAAqBxF,YAAYU,IAIvC+E,GAER,MAGIA,IAIJxD,IACAyD,GAAoB/J,SAASI,eAAe,yBAGtC4J,KAGNC,IAUJ,GAIJjK,SAASC,iBAAiB,oBAAoB,KAC1CyJ,EAAStI,MAAM,IAGnB,MAAM8I,aAAEA,GAAiBC,SACnBxF,EAAiBuF,EACnB,2CACA,mNACA,CACIE,gBAAgB,EAChBC,kBAAkB,EAClBC,oBAAoB,IAgV5B,SAASC,EAAchI,EAAM,IAE3B,MAAMiI,EAAQxK,SAASI,eAAe,gBAChCqK,EAAczK,SAASI,eAAe,gBACtCsK,EAAa1K,SAASI,eAAe,eACrCuK,EAAW3K,SAASI,eAAe,YAEzC,GAAIoK,EAAO,CACTA,EAAMvI,MAAMiC,QAAU,QAClBuG,IAAaA,EAAYxI,MAAMiC,QAAU,QACzCwG,IAAYA,EAAWzI,MAAMiC,QAAU,SAGvCyG,IAAUA,EAASxD,MAAQ,IAC/B,MAAMyD,EAAgB5K,SAASI,eAAe,kBAC9C,GAAIwK,EAAe,CACjBA,EAAczD,MAAQ,GACtByD,EAAcC,UAAW,EACzBD,EAAc3I,MAAMiC,QAAU,QAG9B,MAAM4G,EAAkBF,EAAcG,QAAQ,iBAAiBtK,cAAc,qBACzEqK,GACFA,EAAgBE,SAIdL,GAAYpI,IACdoI,EAASxD,MAAQ5E,EACjBH,YAAW,IAAMwI,EAAcK,SAAS,KAE5C,CAGA,GAA2B,oBAAhB5G,aAA+BA,YACxC,IACE,MAAM6G,EAAW7G,YAAY8G,eAAeD,UAAY7G,YAAY+G,MAAMC,MAAM,KAAK,GACrF,GAAIT,GAAiBM,EAAU,CAC7BN,EAAczD,MAAQ+D,EACtBN,EAAcC,UAAW,EACzBD,EAAc3I,MAAMiC,QAAU,OAE9B,MAAMoH,EAAaV,EAAcG,QAAQ,gBACzC,GAAIO,IAAeA,EAAW7K,cAAc,qBAAsB,CAChE,MAAMqK,EAAkB9K,SAASwB,cAAc,OAC/CsJ,EAAgBrJ,UAAY,mBAC5BqJ,EAAgB9E,YAAc,eAAekF,IAC7CI,EAAWC,aAAaT,EAAiBF,EAC3C,CACF,CACF,CAAE,MAAOjK,GAET,CAEJ,CACF,CAEA8H,eAAe+C,IACb,MAAMJ,EAAQpL,SAASI,eAAe,eAAe+G,MAC/C+D,EAAWlL,SAASI,eAAe,kBAAkB+G,MACrDsE,EAAWzL,SAASI,eAAe,kBAAkB+G,MAE3D,GAAIiE,GAASF,GAAYO,EACvB,IAEE,MAAQhH,KAAMiH,EAAUhH,MAAOiH,SAAoBhH,EAAeiH,KAAKC,OAAO,CAC5ET,MAAOA,EACPK,SAAUA,EACVK,QAAS,CACPrH,KAAM,CACJyG,SAAUA,EACVa,UAAWb,MAKjB,GAAIS,EAAW,MAAMA,EAGrB,MAAQjH,MAAOsH,SAAuBrH,EACnCC,KAAK,iBACLqH,OAAO,CACNlH,GAAI2G,EAASQ,KAAKnH,GAClBmG,SAAUA,EACVE,MAAOA,EACPe,OAAQ,OACRC,KAAM,WACL,CAAEC,WAAY,QAOX5H,KAAM6H,EAAkB5H,MAAO6H,SAA6B5H,EACjEC,KAAK,iBACLC,OAAO,WACPC,GAAG,UAAW4G,EAASQ,KAAKnH,IAC5BC,SAGH,GAAIuH,GAAkD,aAA5BA,EAAmBC,KAAqB,CAChE,MAAMC,EAAmB,CACvBC,QAAShB,EAASQ,KAAKnH,GACvB4H,MAAO,EACPC,WAAY,EACZC,MAAO,EACP5H,MAAO,EACP6H,MAAO,CAAC,EACRC,cAAe,CAAC,EAAG,CAAC,IACpBC,gBAAiB,CAAC,MAAO,CAAC,IAC1BC,eAAgB,GAChBC,iBAAkB,KAGZxI,MAAOyI,SAA8BxI,EAC1CC,KAAK,iBACLwI,OAAO,CAACX,IAEPU,GAAuBA,EAAoBX,IAIjD,CAGA,MAAQ/H,KAAM4I,EAAe3I,MAAO4I,SAA0B3I,EAC3DC,KAAK,gBACLC,OAAO,WACPC,GAAG,UAAW4G,EAASQ,KAAKnH,IAC5BC,SAGH,GAAIsI,GAA4C,aAAzBA,EAAgBd,KAAqB,CAC1D,MAAMe,EAAkB,CACtBb,QAAShB,EAASQ,KAAKnH,GACvByI,uBAAwB,EACxB3G,uBAAwB,IAGlBnC,MAAO+I,SAA2B9I,EACvCC,KAAK,gBACLwI,OAAO,CAACG,IAEPE,GAAoBA,EAAiBjB,IAI3C,CAGA,MAAQ/H,KAAMiJ,EAAYhJ,MAAOiJ,SAAsBhJ,EAAeiH,KAAKgC,mBAAmB,CAC5FxC,MAAOA,EACPK,SAAUA,IAGZ,GAAIkC,EAAa,MAAMA,EAGvBE,KACAxJ,YAAcqJ,EAAWxB,KACzB7G,EAAUyI,aAAe,EACzBzI,EAAU0I,WAAa,EACvB1I,EAAU2I,aAAe,EACzB3I,EAAUJ,MAAQ,EAClBI,EAAUyH,MAAQ,CAAC,EACnBzH,EAAU4I,aAAe,CAAC,EAAG,IAAIjN,IAAI,CAAC,KACtCqE,EAAU6I,eAAiB,CAAC,MAAO,IAAIlN,IAAI,CAAC,KAC5CqE,EAAU8I,cAAgB,IAAInN,IAC9BqE,EAAU+I,gBAAkB,IAAIpN,IAChCqN,IACAC,EAAW,iBAEb,CAAE,MAAO5J,GAEHA,EAAM6J,SAAW7J,EAAM6J,QAAQC,SAAS,iBAC1CC,MAAM,gEAENA,MAAM,iBAAmB/J,EAAM6J,QAEnC,MAEAE,MAAM,0BAEV,CAGAhG,eAAeiG,EAAiBC,EAAOlK,EAAMmK,EAAW,WACtD,IAEE,MAAQnK,KAAMoK,EAAcnK,MAAOoK,SAAqBnK,EACrDC,KAAK+J,GACL9J,OAAO+J,GACP9J,GAAG8J,EAAUnK,EAAKmK,IAClB5J,SAEH,GAAI8J,GAAkC,aAApBA,EAAWtC,KAAqB,CAEhD,MAAQ9H,MAAOqK,SAAsBpK,EAClCC,KAAK+J,GACLvB,OAAO,CAAC3I,IAEX,GAAIsK,EAAa,CAEf,GAAyB,UAArBA,EAAYvC,KAYd,OAAO,EAZyB,CAChC,MAAQ9H,MAAOsK,SAAsBrK,EAClCC,KAAK+J,GACLxI,OAAO1B,GACPK,GAAG8J,EAAUnK,EAAKmK,IAErB,GAAII,EAEF,OAAO,CAEX,CAIF,CACF,KAAO,IAAKF,EAaV,OAAO,EAbe,CAEtB,MAAQpK,MAAOsK,SAAsBrK,EAClCC,KAAK+J,GACLxI,OAAO1B,GACPK,GAAG8J,EAAUnK,EAAKmK,IAErB,GAAII,EAEF,OAAO,CAEX,CAGA,CAEA,OAAO,CACT,CAAE,MAAOtK,GAEP,OAAO,CACT,CACF,CAEA+D,eAAewG,EAAgB9J,GAE3B,MAAM+J,EAAgB7J,EAAUJ,MAQhC,GAPAI,EAAUJ,OAASE,EAGnBgK,KACA7I,IAGIjC,YACA,IACI,MAAMK,MAAEA,SAAgBC,EACnBC,KAAK,iBACLuB,OAAO,CAAElB,MAAOI,EAAUJ,QAC1BH,GAAG,UAAWT,YAAYU,IAE/B,GAAIL,EAMA,OAHAW,EAAUJ,MAAQiK,EAClBC,KACA7I,KACO,CAEf,CAAE,MAAOQ,GAML,OAHAzB,EAAUJ,MAAQiK,EAClBC,KACA7I,KACO,CACX,CAIJ,MAAM8I,EAAeC,KAAKC,MAAM/K,aAAaC,QAAQ,oBAAsB,MAI3E,OAHA4K,EAAanK,MAAQI,EAAUJ,MAC/BV,aAAa6B,QAAQ,kBAAmBiJ,KAAKE,UAAUH,KAEhD,CACX,CAGA3G,eAAe+G,IACX,IAAKnL,YAAa,OAAO,EAEzB,IAEI,MAAMI,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,KACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAEL,GAAIN,EAEA,OAAO,EAIX,MAAM+K,IAA2B,qBAAsBhL,GACjDiL,IAAyB,mBAAoBjL,GAEnD,IAAKgL,IAA2BC,EAE5B,OAAO,EAMX,MAAMC,EAAa,CACfjD,QAASrI,YAAYU,GACrB4H,MAAOlI,EAAKkI,OAAS,EACrBC,WAAYnI,EAAKmI,YAAc,EAC/BC,MAAOpI,EAAKoI,OAAS,GAIrB,UAAWpI,IAAMkL,EAAW1K,MAAQR,EAAKQ,OAAS,GAClD,kBAAmBR,IAAMkL,EAAW5C,cAAgBtI,EAAKsI,eAAiB,CAAC,GAC3E,oBAAqBtI,IAAMkL,EAAW3C,gBAAkBvI,EAAKuI,iBAAmB,CAAC,GAGjFyC,IAAwBE,EAAWzC,iBAAmB,IACtDwC,IAAsBC,EAAW1C,eAAiB,IAGtD,MAAQvI,MAAOsK,SAAsBrK,EAChCC,KAAK,iBACLuB,OAAOwJ,GACP7K,GAAG,UAAWT,YAAYU,IAE/B,OAAIiK,CAOR,CAAE,MAAOlI,GAEL,OAAO,CACX,CACJ,CAEA2B,eAAemH,EAA8BC,GACzC,MAAMnL,MAAEA,SAAgBC,EACnBC,KAAK,iBACLwI,OAAO,CACJV,QAASmD,EACTlD,MAAO,EACPC,WAAY,EACZC,MAAO,EACP5H,MAAO,EACP6H,MAAO,CAAC,EACRC,cAAe,CAAE,EAAK,CAAC,IACvBC,gBAAiB,CAAE,MAAO,CAAC,IAC3BC,eAAgB,GAChBC,iBAAkB,IAM9B,CAEAzE,eAAeqH,IACX,MAAMC,EAAa/P,SAASI,eAAe,iBAAiB+G,MACtDsE,EAAWzL,SAASI,eAAe,iBAAiB+G,MAE1D,GAAK4I,GAAetE,EAKpB,IAII,IAAIuE,EACJ,GAHgBD,EAAWvB,SAAS,KAKhCwB,EAAcrL,EAAeiH,KAAKgC,mBAAmB,CACjDxC,MAAO2E,EACPtE,SAAUA,QAEX,CAEH,MAAQhH,KAAMwL,EAAavL,MAAOsH,SAAuBrH,EACpDC,KAAK,iBACLC,OAAO,SACPC,GAAG,WAAYiL,GACf/K,SAEL,GAAIgH,IAAiBiE,EAEjB,YADAxB,MAAM,sBAIVuB,EAAcrL,EAAeiH,KAAKgC,mBAAmB,CACjDxC,MAAO6E,EAAY7E,MACnBK,SAAUA,GAElB,CAEA,MAAMhH,KAAEA,EAAIC,MAAEA,SAAgBsL,EAE9B,GAAItL,EAGA,YADA+J,MAAM/J,EAAM6J,SAIhB,GAAI9J,EAAKyH,KAAM,CACX7H,YAAcI,EAAKyH,KAGnB2B,KAGA,MAAQpJ,KAAMyL,SAAkBvL,EAC3BC,KAAK,iBACLC,OAAO,UACPC,GAAG,KAAMT,YAAYU,IACrBC,SAEDkL,IACA7L,YAAY8H,OAAS+D,EAAQ/D,OAC7BgE,GAAwBD,EAAQ/D,eAG9BrD,QAAQsH,IAAI,CACdpG,KACAH,EAAqBxF,YAAYU,MAGrCsJ,IACAgC,KACA/B,EAAW,iBACf,CAEJ,CAAE,MAAO5J,GAEL+J,MAAM,4CACV,MAzEIA,MAAM,gDA0Ed,CAEA,SAAS3E,IAILzE,EAAUyI,aAAe,EACzBzI,EAAU0I,WAAa,EACvB1I,EAAU2I,aAAe,EACzB3I,EAAUJ,MAAQ,EAClBI,EAAUyH,MAAQ,CAAC,EACnBzH,EAAU4I,aAAe,CAAC,EAC1B5I,EAAU6I,eAAiB,CAAC,EAC5B7I,EAAU8I,cAAgB,IAAInN,IAC9BqE,EAAU+I,gBAAkB,IAAIpN,IAGhC,MAAMsP,EAAgB/L,aAAaC,QAAQ,mBAC3C,GAAI8L,EACA,IAEI,MAAMzK,EAAWwJ,KAAKC,MAAMgB,GAGxBzK,EAAS8G,QAAOtH,EAAUyI,aAAejI,EAAS8G,OAClD9G,EAAS+G,aAAYvH,EAAU0I,WAAalI,EAAS+G,YACrD/G,EAASgH,QAAOxH,EAAU2I,aAAenI,EAASgH,OAClDhH,EAASZ,QAAOI,EAAUJ,MAAQY,EAASZ,OAC3CY,EAASiH,QAAOzH,EAAUyH,MAAQjH,EAASiH,OAG3CjH,EAASkH,eACTpF,OAAOC,QAAQ/B,EAASkH,eAAe9I,SAAQ,EAAE0I,EAAO4D,MACpDlL,EAAU4I,aAAatB,GAAS,IAAI3L,IAAIwP,MAAMC,QAAQF,GAAQA,EAAO,GAAG,IAK5E1K,EAASmH,iBACTrF,OAAOC,QAAQ/B,EAASmH,iBAAiB/I,SAAQ,EAAEyM,EAAQC,MACvDtL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAIwP,MAAMC,QAAQE,GAAUA,EAAS,GAAG,IAKnF9K,EAASoH,iBACT5H,EAAU8I,cAAgB,IAAInN,IAAI6E,EAASoH,iBAG3CpH,EAASqH,mBACT7H,EAAU+I,gBAAkB,IAAIpN,IAAI6E,EAASqH,kBAQrD,CAAE,MAAOvM,GAET,CAIJ,MAAMiQ,EAAerM,aAAaC,QAAQ,eAC1C,GAAIoM,EACA,IACI,MAAMC,EAAUxB,KAAKC,MAAMsB,GACFE,KAAKrL,OAASoL,EAAQxJ,WAAa,GAGrC,QAEfwJ,EAAQlE,QAAOtH,EAAUyI,aAAe+C,EAAQlE,OAChDkE,EAAQpH,MAAKpE,EAAU0I,WAAa8C,EAAQpH,KAC5CoH,EAAQhE,QAAOxH,EAAU2I,aAAe6C,EAAQhE,OAE5D,CAAE,MAAOlM,GAET,CAIJoQ,IAEA5B,KACA7I,GAOJ,CAEA,SAASyK,IAEA1L,EAAU4I,aAAa,KACxB5I,EAAU4I,aAAa,GAAK,IAAIjN,KAEpC,IAAK,IAAIK,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzBgE,EAAU4I,aAAa,GAAG9J,IAAI9C,GAC9B,MAAMqP,EAAS,KAAKrP,IACfgE,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI,CAAC,IAEpD,CAGA,IAAK,IAAI2L,EAAQ,EAAGA,GAAS,EAAGA,IAAS,CAChCtH,EAAU4I,aAAatB,KACxBtH,EAAU4I,aAAatB,GAAS,IAAI3L,IAAI,CAAC,KAE7C,MAAM0P,EAAS,GAAG/D,MACbtH,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI,CAAC,IAEpD,CACJ,CA8EAyH,eAAeoB,EAAqBgG,GAGhC,IAEIxK,EAAUyI,aAAe,EACzBzI,EAAU0I,WAAa,EACvB1I,EAAU2I,aAAe,EACzB3I,EAAUJ,MAAQ,EAClBI,EAAUyH,MAAQ,CAAC,EACnBzH,EAAU4I,aAAe,CAAE,EAAK,IAAIjN,IAAI,CAAC,KACzCqE,EAAU6I,eAAiB,CAAE,MAAO,IAAIlN,IAAI,CAAC,KAC7CqE,EAAU8I,cAAgB,IAAInN,IAC9BqE,EAAU+I,gBAAkB,IAAIpN,IAGhC,MAAMgQ,EAAgBzM,aAAaC,QAAQ,mBAC3C,GAAIwM,EACA,IACI,MAAMC,EAAiB5B,KAAKC,MAAM0B,GAI9BC,EAAetE,QAAOtH,EAAUyI,aAAemD,EAAetE,OAC9DsE,EAAerE,aAAYvH,EAAU0I,WAAakD,EAAerE,YACjEqE,EAAepE,QAAOxH,EAAU2I,aAAeiD,EAAepE,OAC9DoE,EAAehM,QAAOI,EAAUJ,MAAQgM,EAAehM,OACvDgM,EAAenE,QAAOzH,EAAUyH,MAAQmE,EAAenE,OAGvDmE,EAAelE,gBACf1H,EAAU4I,aAAe,CAAC,EAC1BtG,OAAOC,QAAQqJ,EAAelE,eAAe9I,SAAQ,EAAE0I,EAAO4D,MAC1DlL,EAAU4I,aAAatB,GAAS,IAAI3L,IAAIuP,EAAK,KAKjDU,EAAejE,kBACf3H,EAAU6I,eAAiB,CAAC,EAC5BvG,OAAOC,QAAQqJ,EAAejE,iBAAiB/I,SAAQ,EAAEyM,EAAQC,MAC7DtL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI2P,EAAO,KAKtDM,EAAehE,iBACf5H,EAAU8I,cAAgB,IAAInN,IAAIiQ,EAAehE,iBAGjDgE,EAAe/D,mBACf7H,EAAU+I,gBAAkB,IAAIpN,IAAIiQ,EAAe/D,kBAE3D,CAAE,MAAOvM,GAET,CAIJ,MAAM8D,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,KACPC,GAAG,UAAW+K,GACd7K,SAEL,GAAIN,GACA,GAAmB,aAAfA,EAAM8H,KAAqB,CAI3B,MAAM0E,EAAkB,CACpBxE,QAASmD,EACTlD,MAAOtH,EAAUyI,aACjBlB,WAAYvH,EAAU0I,WACtBlB,MAAOxH,EAAU2I,aACjB/I,MAAOI,EAAUJ,QAGbP,MAAOqK,SAAsBpK,EAChCC,KAAK,iBACLwI,OAAO,CAAC8D,GAKjB,OAGG,GAAIzM,EAAM,CAKbY,EAAUyI,aAAerJ,EAAKkI,OAAStH,EAAUyI,aACjDzI,EAAU0I,WAAatJ,EAAKmI,YAAcvH,EAAU0I,WACpD1I,EAAU2I,aAAevJ,EAAKoI,OAASxH,EAAU2I,aACjD3I,EAAUJ,MAAQR,EAAKQ,OAASI,EAAUJ,MAG1C,IAEQR,EAAKqI,OAASnF,OAAOwJ,KAAK1M,EAAKqI,OAAOsE,OAAS,IAC/C/L,EAAUyH,MAAQrI,EAAKqI,OAIvBrI,EAAKsI,eAAiBpF,OAAOwJ,KAAK1M,EAAKsI,eAAeqE,OAAS,IAC/D/L,EAAU4I,aAAe,CAAC,EAC1BtG,OAAOC,QAAQnD,EAAKsI,eAAe9I,SAAQ,EAAE0I,EAAO4D,MAChDlL,EAAU4I,aAAatB,GAAS,IAAI3L,IAAIuP,EAAK,KAKjD9L,EAAKuI,iBAAmBrF,OAAOwJ,KAAK1M,EAAKuI,iBAAiBoE,OAAS,IACnE/L,EAAU6I,eAAiB,CAAC,EAC5BvG,OAAOC,QAAQnD,EAAKuI,iBAAiB/I,SAAQ,EAAEyM,EAAQC,MACnDtL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI2P,EAAO,KAKtDlM,EAAKwI,gBAAkBxI,EAAKwI,eAAemE,OAAS,IACpD/L,EAAU8I,cAAgB,IAAInN,IAAIyD,EAAKwI,iBAIvCxI,EAAKyI,kBAAoBzI,EAAKyI,iBAAiBkE,OAAS,IACxD/L,EAAU+I,gBAAkB,IAAIpN,IAAIyD,EAAKyI,kBAEjD,CAAE,MAAOvM,GAET,CACJ,CAYA,OATAoQ,IAQA5B,MACO,CACX,CAAE,MAAOrI,GAEL,OAAO,CACX,CACJ,CAEA,SAASuK,IAQL1J,OAAOC,QAAQvC,EAAU4I,cAAchK,SAAQ,EAAEqN,EAASf,MACkB,IAM5E5I,OAAOC,QAAQvC,EAAU6I,gBAAgBjK,SAAQ,EAAEyM,EAAQC,MACgB,GAQ/E,CAEAlI,eAAe/H,IACX,IACI,MAAMgE,MAAEA,SAAgBC,EAAeiH,KAAK2F,UAO5ClM,EAAUJ,MAAQ,EAClBI,EAAU4I,aAAe,CAAC,EAC1B5I,EAAU6I,eAAiB,CAAC,EAC5B7I,EAAU8I,cAAgB,IAAInN,IAC9BqE,EAAU+I,gBAAkB,IAAIpN,IAIhCwQ,IAGAnN,YAAc,KACdgK,IACA8B,GAAwB,MACxBE,KAGA/B,EAAW,iBAEf,CAAE,MAAO5J,GAGLL,YAAc,KACdgK,IACA8B,GAAwB,MACxBE,KACA/B,EAAW,iBACf,CACJ,CAEA,SAASkD,IAEL,MAAMC,EAAgBzR,SAASI,eAAe,oBAC1CqR,IACAA,EAActK,MAAQ,IAI1B,MAAMuK,EAAY1R,SAASI,eAAe,qBACtCsR,IACAA,EAAUvK,MAAQ,IAItB,MAAMwK,EAAqB3R,SAASI,eAAe,uBAC/CuR,IACAA,EAAmB1P,MAAMiC,QAAU,QAIvC,MAAM0N,EAAW5R,SAASI,eAAe,yBACrCwR,IACAA,EAASC,UAAY,IAIzBC,GAAoBC,YAAc,KAClCD,GAAoBE,MAAQ,EAChC,CAEA,SAASC,IAGL,IAAK5M,EAAUyI,aAEX,OAIJ,MAAMsB,EAAe,CACjBzC,MAAOtH,EAAUyI,cAAgB,EACjClB,WAAYvH,EAAU0I,YAAc,EACpClB,MAAOxH,EAAU2I,cAAgB,EACjC/I,MAAOI,EAAUJ,OAAS,GAIxBiN,EAAe,CACjBpF,MAAOzH,EAAUyH,OAAS,CAAC,EAC3BC,cAAepF,OAAOwK,YAClBxK,OAAOC,QAAQvC,EAAU4I,cAAgB,CAAC,GAAGmE,KAAI,EAAEzF,EAAO4D,KACtD,CAAC5D,EAAO6D,MAAM5L,KAAK2L,GAAQ,QAGnCvD,gBAAiBrF,OAAOwK,YACpBxK,OAAOC,QAAQvC,EAAU6I,gBAAkB,CAAC,GAAGkE,KAAI,EAAE1B,EAAQC,KACzD,CAACD,EAAQF,MAAM5L,KAAK+L,GAAU,QAGtC1D,eAAgBuD,MAAM5L,KAAKS,EAAU8I,eAAiB,IACtDjB,iBAAkBsD,MAAM5L,KAAKS,EAAU+I,iBAAmB,KAI9D7J,aAAa6B,QAAQ,kBAAmBiJ,KAAKE,UAAU,IAChDH,KACA8C,KAIP,MAAMG,EAAc,CAChB1F,MAAOtH,EAAUyI,aACjBrE,IAAKpE,EAAU0I,WACflB,MAAOxH,EAAU2I,aACjB3G,UAAWyJ,KAAKrL,OAEpBlB,aAAa6B,QAAQ,cAAeiJ,KAAKE,UAAU8C,IAG/ChO,aAIAM,EACKC,KAAK,iBACLqH,OAAO,CACJS,QAASrI,YAAYU,MAClBqK,IAENzI,MAAK,EAAGjC,MAAO4N,MACZ,GAAIA,OAEG,CAKH,MAAMC,EAAoB,CAACC,EAAWC,KAClC,MAAM9C,EAAa,CAAE6C,CAACA,GAAYC,GAElC9N,EACKC,KAAK,iBACLuB,OAAOwJ,GACP7K,GAAG,UAAWT,YAAYU,IAC1B4B,MAAK,EAAGjC,YAKL,GACF,EAIViD,OAAOC,QAAQsK,GAAcjO,SAAQ,EAAEyO,EAAOvL,MAC1CoL,EAAkBG,EAAOvL,EAAM,GAEvC,IAGhB,CAEAsB,eAAemB,IACX,IAAKvF,YAAa,OAAO,EAIzB,IAEI,MAAMI,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,KACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAEL,GAAIN,EAAO,CACP,GAAmB,aAAfA,EAAM8H,KAAqB,CAI3B,MAAMmG,EAAc,CAChBjG,QAASrI,YAAYU,GACrB4H,MAAO,EACPC,WAAY,EACZC,MAAO,EACP5H,MAAO,EACP6H,MAAO,CAAC,EACRC,cAAe,CAAE,EAAK,CAAC,IACvBC,gBAAiB,CAAE,MAAO,CAAC,IAC3BC,eAAgB,GAChBC,iBAAkB,KAGdxI,MAAOqK,SAAsBpK,EAChCC,KAAK,iBACLwI,OAAO,CAACuF,IAEb,OAAI5D,CAMR,CAGA,OAAO,CACX,CAGA,IAAI6D,GAAc,EAClB,MAAMjD,EAAa,IAAKlL,GAGlBoO,EAAiB,CACnB,CAAEC,KAAM,gBAAiBC,aAAc,CAAE,EAAK,CAAC,KAC/C,CAAED,KAAM,kBAAmBC,aAAc,CAAE,MAAO,CAAC,KACnD,CAAED,KAAM,iBAAkBC,aAAc,IACxC,CAAED,KAAM,mBAAoBC,aAAc,KAG9C,IAAK,MAAML,KAASG,EACVH,EAAMI,QAAQrO,GAA8B,OAArBA,EAAKiO,EAAMI,QACpCnD,EAAW+C,EAAMI,MAAQJ,EAAMK,aAC/BH,GAAc,GAKtB,GAAIA,EAAa,CAEb,MAAQlO,MAAOsK,SAAsBrK,EAChCC,KAAK,iBACLuB,OAAOwJ,GACP7K,GAAG,UAAWT,YAAYU,IAE/B,GAAIiK,EAEA,OAAO,CAEf,CAEA,OAAO,CACX,CAAE,MAAOlI,GAEL,OAAO,CACX,CACJ,CAGA,SAASkM,EAAcC,GACnB,MAAMC,EAAWlT,SAASS,cAAc,iDAClC0S,EAAYnT,SAASS,cAAc,kDACnC2S,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cAE/B,UAAR6S,GACAC,EAAS7S,UAAU8D,IAAI,UACvBgP,EAAU9S,UAAU2K,OAAO,UAC3BoI,EAAU/S,UAAU2K,OAAO,UAC3BqI,EAAWhT,UAAU8D,IAAI,YAEzB+O,EAAS7S,UAAU2K,OAAO,UAC1BmI,EAAU9S,UAAU8D,IAAI,UACxBiP,EAAU/S,UAAU8D,IAAI,UACxBkP,EAAWhT,UAAU2K,OAAO,UAEpC,CAEA,SAASqD,IACL,MAAMiF,EAAUtT,SAASI,eAAe,WAClCmT,EAAWvT,SAASI,eAAe,YACnCoT,EAAmBxT,SAASI,eAAe,aAC3CI,EAAeR,SAASS,cAAc,kBAExC4D,aACAiP,EAAQjT,UAAU8D,IAAI,UACtBoP,EAASlT,UAAU2K,OAAO,UAC1BxK,EAAaH,UAAU2K,OAAO,UAG9BwI,EAAiBxN,YAAc3B,YAAY8G,eAAeD,UAAY7G,YAAY+G,MAGlFzG,EACKC,KAAK,iBACLC,OAAO,oBACPC,GAAG,KAAMT,YAAYU,IACrBC,SACA2B,MAAK,EAAGlC,WACDA,IAEIA,EAAKyG,WACLsI,EAAiBxN,YAAcvB,EAAKyG,UAExCiF,GAAwB1L,EAAK0H,QACjC,IAEHsH,OAAM/O,IAA4D,MAGvE4O,EAAQjT,UAAU2K,OAAO,UACzBuI,EAASlT,UAAU8D,IAAI,UACvB3D,EAAaH,UAAU8D,IAAI,UAC3BqP,EAAiBxN,YAAc,GAEvC,CAj7CAhG,SAASC,iBAAiB,oBAAoBwI,UAC3C,IAoQI,GAlQK3G,OAAO4R,qBACR5R,OAAO4R,mBAAqB,CACxB1B,MAAO,GAEP,gBAAMlO,GACEO,kBACM/C,KAAKqS,mBAEXrS,KAAKsS,sBAEb,EAEA,sBAAMD,GACF,IACI,MAAMlP,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,gBACLC,OAAO,KACPgP,GAAG,cAAcxP,YAAYU,sBAAsBV,YAAYU,OAEpE,GAAIL,EAAO,MAAMA,EAEjBpD,KAAK0Q,MAAQvN,EAAK2N,KAAI0B,IAAQ,CAC1B/O,GAAI+O,EAAK/O,GACT+N,KAAMgB,EAAKhB,KACX5J,MAAO4K,EAAK5K,OAAS,GACrB6K,aAAcD,EAAKC,cAAgB,GACnCC,SAAUF,EAAKG,UACfC,SAAUJ,EAAKK,UACftE,OAAQiE,EAAKpH,QACb0H,UAAWN,EAAKO,cAIxB,CAAE,MAAO3P,GAELpD,KAAK0Q,MAAQ,EACjB,CACJ,EAEA,oBAAA4B,GACI,IACI,MAAMU,EAAa/P,aAAaC,QAAQ,sBACxClD,KAAK0Q,MAAQsC,EAAajF,KAAKC,MAAMgF,GAAc,EAEvD,CAAE,MAAO5P,GAELpD,KAAK0Q,MAAQ,EACjB,CACJ,EAEA,UAAMuC,CAAKC,GACP,OAAKA,EAEDnQ,kBACa/C,KAAKmT,eAAeD,GAE1BlT,KAAKoT,mBAAmBF,GALjB,IAOtB,EAEA,oBAAMC,CAAeD,GACjB,IACI,MAAMG,EAAW,CACb7B,KAAM0B,EAAK1B,KACX5J,MAAOsL,EAAKtL,OAAS,GACrB6K,aAAcS,EAAKT,cAAgB,GACnCrH,QAASrI,YAAYU,IAGzB,GAAIyP,EAAKzP,IAAyB,iBAAZyP,EAAKzP,IAAsC,KAAnByP,EAAKzP,GAAGqM,OAAe,CACjE,MAAM3M,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,gBACLuB,OAAOwO,GACP7P,GAAG,KAAM0P,EAAKzP,IACdF,SACAG,SAEL,GAAIN,EAAO,MAAMA,EACjB,OAAOD,CACX,CAAO,CACH,MAAMA,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,gBACLwI,OAAOuH,GACP9P,SACAG,SAEL,GAAIN,EAAO,MAAMA,EAEjB,MAAMkQ,EAAQtT,KAAK0Q,MAAM6C,WAAUC,GAC/BA,EAAE/P,KAAOyP,EAAKzP,IACb+P,EAAEC,QAAUD,EAAEC,SAAWP,EAAKO,SAgBnC,OAde,IAAXH,EACAtT,KAAK0Q,MAAM4C,GAAS,IACbnQ,EACHyE,MAAOzE,EAAKyE,OAAS,GACrB6K,aAActP,EAAKsP,cAAgB,IAGvCzS,KAAK0Q,MAAMtQ,KAAK,IACT+C,EACHyE,MAAOzE,EAAKyE,OAAS,GACrB6K,aAActP,EAAKsP,cAAgB,KAIpCtP,CACX,CACJ,CAAE,MAAOC,GAEL,OAAO,IACX,CACJ,EAEA,kBAAAgQ,CAAmBF,GACf,IACI,MAAMQ,EAAU,IACTR,EACHzP,GAAIyP,EAAKzP,IAAM+L,KAAKrL,MACpBsP,OAAQP,EAAKO,QAAUjE,KAAKrL,OAG1BmP,EAAQtT,KAAK0Q,MAAM6C,WAAUC,GAC/BA,EAAE/P,KAAOyP,EAAKzP,IACb+P,EAAEC,QAAUD,EAAEC,SAAWP,EAAKO,SASnC,OAPe,IAAXH,EACAtT,KAAK0Q,MAAM4C,GAASI,EAEpB1T,KAAK0Q,MAAMtQ,KAAKsT,GAGpBzQ,aAAa6B,QAAQ,qBAAsBiJ,KAAKE,UAAUjO,KAAK0Q,QACxDgD,CACX,CAAE,MAAOtQ,GAEL,OAAO,IACX,CACJ,EAEA,YAAM,CAAOuQ,GACT,IAAI5Q,YAoBA,OAFA/C,KAAK0Q,MAAQ1Q,KAAK0Q,MAAMkD,QAAOV,GAAQA,EAAKzP,KAAOkQ,IACnD1Q,aAAa6B,QAAQ,qBAAsBiJ,KAAKE,UAAUjO,KAAK0Q,SACxD,EAnBP,IACI,GAAsB,iBAAXiD,GAAyC,KAAlBA,EAAO7D,OAAe,CACpD,MAAM1M,MAAEA,SAAgBC,EACnBC,KAAK,gBACLuQ,SACArQ,GAAG,KAAMmQ,GAEd,GAAIvQ,EAAO,MAAMA,CACrB,CAGA,OADApD,KAAK0Q,MAAQ1Q,KAAK0Q,MAAMkD,QAAOV,GAAQA,EAAKzP,KAAOkQ,KAC5C,CACX,CAAE,MAAOvQ,GAEL,OAAO,CACX,CAMR,EAEA,WAAM0Q,CAAMH,EAAQI,GAChB,IAAKhR,YAAa,OAAO,EAEzB,IACI,MAAMmQ,EAAOlT,KAAK0Q,MAAMsD,MAAKR,GAAKA,EAAE/P,KAAOkQ,IAC3C,IAAKT,EAAM,OAAO,EAalB,cAXqB7P,EAAe4Q,IAAI,qBAAsB,CAC1DC,UAAWH,EACXI,OAAQ,GAAGjB,EAAK1B,mBAAmBzO,YAAY8G,eAAeD,UAAY,UAC1EwK,QAASlB,EAAKtL,OAAS,GACvByM,eAAgBnB,EAAKT,cAAgB,GACrC6B,aAAa,EACbC,WAAY/E,KAAKrL,MACjBqQ,cAAe,CAACT,GAChBU,YAAa1R,YAAYU,MAGdL,KACnB,CAAE,MAAOA,GAEL,OAAO,CACX,CACJ,EAEA,aAAAsR,GACI,IAAK3R,YACD,MAAO,CACH4R,SAAU,EACVC,SAAU,GACVC,SAAU,EACVC,UAAU,EACVC,YAAa,KAMrB,OAFmBhS,YAAY8H,QAAU,QAGrC,IAAK,UACD,MAAO,CACH8J,SAAU,GACVC,SAAU,GACVC,SAAUG,IACVF,UAAU,EACVC,YAAa,KAErB,IAAK,UACD,MAAO,CACHJ,SAAU,GACVC,SAAU,GACVC,SAAUG,IACVF,UAAU,EACVC,YAAa,KAErB,IAAK,OACD,MAAO,CACHJ,SAAU,EACVC,SAAU,GACVC,SAAU,GACVC,UAAU,EACVC,YAAa,MAErB,QACI,MAAO,CACHJ,SAAU,EACVC,SAAU,GACVC,SAAU,EACVC,UAAU,EACVC,YAAa,KAG7B,EAEA,kBAAAE,GACI,MAAMC,EAASlV,KAAK0U,gBACpB,OAAO1U,KAAK0Q,MAAMZ,OAASoF,EAAOP,QACtC,UAKFtM,KACNG,IACAxD,IACA+J,KAGAzM,EAAaE,aACb0C,EAAa1C,mBACP4P,GAAmB5P,aAGrBO,YAAa,CACbgB,EAAUJ,YAAcrB,EAAaQ,gBACrCR,EAAa2C,iBAEb,MAAM2C,QAAc1C,EAAaE,gBACjCF,EAAaD,eAAe2C,EAChC,CAOA,GAJApH,OAAO7B,iBAAiB,aAAcwW,IACtC3U,OAAO7B,iBAAiB,OAAQwW,IAG5B3U,OAAO4U,SAASC,KAAKC,WAAW,UAAW,CAE3C,MAAMrU,EAAMT,OAAO4U,SAASC,KAAKE,QAAQ,SAAU,IACnDC,QAAQC,UAAU,GAAI/W,SAASgX,MAAOlV,OAAO4U,SAASO,UACtD1M,EAAchI,EAClB,CAIAwH,GADsB/J,SAASI,eAAe,mBAI1C,4BAA4B8W,KAAKC,UAAUC,aAE3CpX,SAASC,iBAAiB,cAAc,SAASoX,IAC7CrX,SAASsX,oBAAoB,aAAcD,EAC/C,GAAG,CAAEE,MAAM,IAGXvX,SAASC,iBAAiB,SAAS,SAASU,GACpCA,EAAEG,OAAO0W,OAEjB,IAGIC,OAAOC,aACPD,OAAOC,YAAYC,KAAK,YACnBlE,OAAM3M,IAAsD,KAKzE,MAAM6D,EAAW3K,SAASI,eAAe,YACrCuK,GACAA,EAAS1K,iBAAiB,SAAS,SAASU,GAExCW,KAAK6F,MAAQ7F,KAAK6F,MAAM0P,QAAQ,UAAW,IAGvCvV,KAAK6F,MAAMiK,OAAS,IACpB9P,KAAK6F,MAAQ7F,KAAK6F,MAAMyQ,MAAM,EAAG,GAEzC,IAIAvT,cACAwT,KACAC,KAER,CAAE,MAAOpT,GAET,KA4jBH1E,SAASC,iBAAiB,oBAAoB,WAC1CoE,YAAc,KACdsF,KAAuBhD,MAAK,KACxBmD,IACAxD,IACAyR,IAA2B,GAEnC,IAEA/X,SAASC,iBAAiB,oBAAoB,KAE1C,WAUI,SATM0J,KACNG,IACAxD,IACA+J,KAEAzM,EAAaE,aACb0C,EAAa1C,aAGTO,YAAa,CACb,MAAOY,EAAOiE,SAAeJ,QAAQsH,IAAI,CACrCxM,EAAaQ,gBACboC,EAAaE,kBAGjBrB,EAAUJ,MAAQA,EAClBrB,EAAa2C,iBACbC,EAAaD,eAAe2C,EAChC,CAGA,GAAIpH,OAAO4U,SAASC,KAAKC,WAAW,UAAW,CAE3C,MAAMrU,EAAMT,OAAO4U,SAASC,KAAKE,QAAQ,SAAU,IACnDC,QAAQC,UAAU,GAAI/W,SAASgX,MAAOlV,OAAO4U,SAASO,UACtD1M,EAAchI,EAClB,CAIAwH,GADsB/J,SAASI,eAAe,yBAGxC4J,KAGF,4BAA4BkN,KAAKC,UAAUC,aAE3CpX,SAASC,iBAAiB,cAAc,SAASoX,IAC7CrX,SAASsX,oBAAoB,aAAcD,EAC/C,GAAG,CAAEE,MAAM,IAGXvX,SAASC,iBAAiB,SAAS,SAASU,GACpCA,EAAEG,OAAO0W,OAEjB,IAGIC,OAAOC,aACPD,OAAOC,YAAYC,KAAK,YACnBlE,OAAM3M,IAAsD,KAKrEzC,cACAwT,KACAC,KAEP,EA5DD,GA4DKrE,OAAM/O,IACsC,GAC/C,IA2eN,MAAMsT,EAAgB,CAClBC,OAAQ,CACJ,CAAElT,GAAI,EAAGmT,QAAS,EAAGC,aAAc,GAAIC,UAAW,IAClD,CAAErT,GAAI,EAAGmT,QAAS,GAAIC,aAAc,GAAIC,UAAW,IACnD,CAAErT,GAAI,EAAGmT,QAAS,GAAIC,aAAc,GAAIC,UAAW,IACnD,CAAErT,GAAI,EAAGmT,QAAS,GAAIC,aAAc,GAAIC,UAAW,IACnD,CAAErT,GAAI,EAAGmT,QAAS,GAAIC,aAAc,GAAIC,UAAW,KAEvDC,WAAY,CACRC,OAAQ,SACRC,KAAM,SAIRlT,EAAY,CACdyI,aAAc,KACdC,WAAY,KACZyK,iBAAkB,KAClBxK,aAAc,KACdC,aAAc,CAAC,EACfC,eAAgB,CAAC,EACjBuK,YAAa,CAAC,EACdrK,gBAAiB,IAAIpN,IACrBmN,cAAe,IAAInN,IACnBiE,MAAO,GAKLyT,EAAc,CAChBnR,WAAY,CACRuL,KAAM,cACN6F,YAAa,gCACbC,KAAM,GACNC,KAAM,WACNC,SAAU,KAEdtR,KAAM,CACFsL,KAAM,gBACN6F,YAAa,wCACbC,KAAM,EACNC,KAAM,cAEVpR,KAAM,CACFqL,KAAM,yBACN6F,YAAa,8BACbC,KAAM,GACNC,KAAM,gBAEVnR,OAAQ,CACJoL,KAAM,wBACN6F,YAAa,+BACbC,KAAM,GACNC,KAAM,WAId,SAAS7Q,EAAQH,GACb,MAAMkR,EAAaL,EAAY7Q,GAC/B,GAAKkR,EAEL,GAAI1T,EAAUJ,MAAQ8T,EAAWH,KAC7BI,GAAiB,QAAQD,EAAWH,cAAe,aADvD,CAQA,OAHAvT,EAAUJ,OAAS8T,EAAWH,KAC9BzJ,KAEOtH,GACH,IAAK,aACDoR,GAAW,EACX7W,YAAW,KACP6W,GAAW,CAAK,GACjBF,EAAWD,UACd,MAEJ,IAAK,OACDI,IAAa,GAAM,GACnB,MAEJ,IAAK,OACD,MAAMC,EAAUnZ,SAASgE,iBAAiB,mBACpCoV,EAAgBC,EAAYC,kBAC9BD,EAAYnQ,MAAMmQ,EAAYE,cAC9BF,EAAYtF,aAAasF,EAAYE,cAEnCC,EAAehJ,MAAM5L,KAAKuU,GAASjE,QAAO5M,GAC5CA,EAAItC,cAAgBoT,IAExB,GAAII,EAAapI,OAAS,EAAG,CACzB,MAAMqI,EAAkBD,EAAa1T,KAAK4T,MAAM5T,KAAK6T,SAAWH,EAAapI,SAC7EqI,EAAgBG,UAAW,EAC3BH,EAAgBxX,MAAM4G,QAAU,KACpC,CACA,MAGZ,IAAK,SACD,MAAMgR,EAAaR,EAAYC,kBAC3BD,EAAYnQ,MAAMmQ,EAAYE,cAC9BF,EAAYtF,aAAasF,EAAYE,cAEzCvZ,SAASgE,iBAAiB,mBAAmBC,SAAQqE,IACjD,GAAIA,EAAItC,cAAgB6T,EAAY,CAChCvR,EAAIjI,UAAU8D,IAAI,WAElB,MAAM2V,EAAqBxR,EAAIrG,MAAM8X,WACrCzR,EAAIrG,MAAM8X,WAAa,iBAGvB3X,YAAW,KACPkG,EAAIjI,UAAU2K,OAAO,WACrB1C,EAAIrG,MAAM8X,WAAaD,CAAkB,GAC1C,IACP,KAKJ7H,GAxDA,CAyDJ,CAGA,SAAS3L,IACLqB,OAAOC,QAAQ8Q,GAAazU,SAAQ,EAAE4D,EAAUmS,MAC5C,MAAMlS,EAAS9H,SAASI,eAAe,GAAGyH,SAC1C,GAAIC,EAAQ,CAER,MAAMmS,EAAqBnU,KAAK4T,MAAMrU,EAAUJ,MAAQ+U,EAAOpB,MACzDsB,EAAYD,EAAqB,EAEvCnS,EAAO8R,UAAYM,EACnBpS,EAAOzH,UAAU8Z,OAAO,YAAaD,GAGrC,MAAME,EAAetS,EAAOrH,cAAc,eACtC2Z,IACAA,EAAapU,YAAckU,EAAYD,EAAmB5T,WAAa,IAE/E,IAER,CAEAC,IAEA,IAAI+S,EAAc,CACdnQ,MAAO,GACP6K,aAAc,GACdwF,aAAc,EACdc,eAAgB,EAChBC,cAAc,EACdhB,mBAAmB,EACnBiB,OAAO,EACPC,gBAAgB,EAChB1X,UAAW,EACX2X,eAAgB,EAChBC,UAAW,EACXC,aAAa,EACbC,kBAAmB,EACnBC,YAAa,EACbC,aAAc,GAGdC,EAAQ,KACRC,EAAgB,EAChB/B,GAAW,EAEXgC,EAAuB,KACvBC,GAAsB,EAI1B,SAASjJ,IACL,GAAI5N,YAAa,CAEb,MAAM8W,EAAiB,CACnBxO,MAAOtH,EAAUyI,aACjBlB,WAAYvH,EAAU0I,WACtBlB,MAAOxH,EAAU2I,aACjB/I,MAAOI,EAAUJ,MACjB6H,MAAOzH,EAAUyH,MACjBC,cAAepF,OAAOwK,YAClBxK,OAAOC,QAAQvC,EAAU4I,cAAcmE,KAAI,EAAEgJ,EAAGC,KAAO,CAACD,EAAG5K,MAAM5L,KAAKyW,OAE1ErO,gBAAiBrF,OAAOwK,YACpBxK,OAAOC,QAAQvC,EAAU6I,gBAAgBkE,KAAI,EAAEgJ,EAAGC,KAAO,CAACD,EAAG5K,MAAM5L,KAAKyW,OAE5EpO,eAAgBuD,MAAM5L,KAAKS,EAAU8I,eACrCjB,iBAAkBsD,MAAM5L,KAAKS,EAAU+I,kBAG3CzJ,EACKC,KAAK,iBACLuB,OAAOgV,GACPrW,GAAG,UAAWT,YAAYU,IAC1B4B,MAAK,EAAGjC,YACyD,GAE1E,MAEIH,aAAa6B,QAAQ,kBAAmBiJ,KAAKE,UAAU,CACnDtB,aAActG,OAAOwK,YACjBxK,OAAOC,QAAQvC,EAAU4I,cAAcmE,KAAI,EAAEgJ,EAAGC,KAAO,CAACD,EAAG5K,MAAM5L,KAAKyW,OAE1EnN,eAAgBvG,OAAOwK,YACnBxK,OAAOC,QAAQvC,EAAU6I,gBAAgBkE,KAAI,EAAEgJ,EAAGC,KAAO,CAACD,EAAG5K,MAAM5L,KAAKyW,OAE5ElN,cAAeqC,MAAM5L,KAAKS,EAAU8I,eACpCC,gBAAiBoC,MAAM5L,KAAKS,EAAU+I,iBACtCnJ,MAAOI,EAAUJ,MACjB6H,MAAOzH,EAAUyH,QAG7B,CAGA,SAASwO,IACL,MAAMC,EAAQhX,aAAaC,QAAQ,mBACnC,GAAI+W,EAAO,CACP,MAAM9W,EAAO4K,KAAKC,MAAMiM,GACxBlW,EAAU4I,aAAetG,OAAOwK,YAC5BxK,OAAOC,QAAQnD,EAAKwJ,cAAcmE,KAAI,EAAEgJ,EAAGC,KAAO,CAACD,EAAG,IAAIpa,IAAIqa,OAElEhW,EAAU6I,eAAiBvG,OAAOwK,YAC9BxK,OAAOC,QAAQnD,EAAKyJ,gBAAgBkE,KAAI,EAAEgJ,EAAGC,KAAO,CAACD,EAAG,IAAIpa,IAAIqa,OAEpEhW,EAAU8I,cAAgB,IAAInN,IAAIyD,EAAK0J,eACvC9I,EAAU+I,gBAAkB,IAAIpN,IAAIyD,EAAK2J,iBAAmB,IAC5D/I,EAAUJ,MAAQR,EAAKQ,MACvBI,EAAUyH,MAAQrI,EAAKqI,OAAS,CAACvF,WAAY,EAAGC,KAAM,EAAGC,KAAM,EAAGC,OAAQ,EAC9E,CACA,MAAM8T,EAAmBjX,aAAaC,QAAQ,sBAC1CgX,IACAnW,EAAUJ,MAAQX,SAASkX,GAEnC,CAEA/S,eAAe/H,IACX,IACI,MAAMgE,MAAEA,SAAgBC,EAAeiH,KAAK2F,UAM5ClN,YAAc,KACdgK,IACAC,EAAW,kBAGXxE,GAEJ,CAAE,MAAOpF,GAET,CACJ,CAMA,SAAS+W,EAAWC,GAChBC,IACItC,EAAYE,cAAgBF,EAAYnQ,MAAMkI,SAG7CiI,EAAYuC,qBAMbZ,EAAgB3B,EAAYuC,sBAL5BvC,EAAYuC,qBAAkD,GAA3BvC,EAAYnQ,MAAMkI,OACrD4J,EAAgB3B,EAAYuC,qBAC5BvC,EAAYwC,UAAYb,GAO5B3B,EAAYuB,kBAAoB9J,KAAKrL,MACrCqW,IACAC,GAAkBf,EAAe3B,EAAYwC,WAE7Cd,EAAQiB,aAAY,KACX/C,IACD+B,EAAgBlV,KAAKmW,IAAI,EAAGjB,EAAgB,GAC5Cc,IACAC,GAAkBf,EAAe3B,EAAYwC,WAG7CxC,EAAYuC,qBAAuBZ,EAE/BA,GAAiB,IACjBhb,SAASS,cAAc,gBAAgBJ,UAAU8D,IAAI,WAGrD6W,GAAiB,GACjBkB,IAER,GACD,KACP,CAEA,SAASJ,IACL,MAAMK,EAAUrW,KAAK4T,MAAMsB,EAAgB,IACrCoB,EAAUpB,EAAgB,GAC1BqB,EAAerc,SAASS,cAAc,gBAC5C4b,EAAarW,YAAc,GAAGsW,OAAOH,GAASI,SAAS,EAAG,QAAQD,OAAOF,GAASG,SAAS,EAAG,OAE1FvB,GAAiB,GACjBqB,EAAahc,UAAU8D,IAAI,WAE3BkY,EAAahc,UAAU2K,OAAO,UAEtC,CAEA,SAAS2Q,IACDZ,IACAyB,cAAczB,GACdA,EAAQ,MAEZC,EAAgB,EAChB/B,GAAW,EAEX,MAAMwD,EAAgBzc,SAASS,cAAc,mBACzCgc,GACAA,EAAcpc,UAAU2K,OAAO,WAGnC+Q,GAAkB,EAAG,EACzB,CAEA,SAASW,EAAgB9a,EAAGC,GAExB,MAGM8a,EAHW7a,OAAO8a,WAAW,sBAAsBnZ,QAInD,CACEuD,MAAO,GACP6V,KAAM,EACNC,SAAU,GACVjU,QAAS,GACTiQ,SAAU,KAEZ,CACE9R,MAAO,GACP6V,KAAM,GACNC,SAAU,IACVjU,QAAS,EACTiQ,SAAU,MAGZiE,EAAS,CAAC,UAAW,UAAW,UAAW,WAC3CC,EAAYhd,SAASuD,KAE3B,IAAK,IAAIlC,EAAI,EAAGA,EAAIsb,EAAe3V,MAAO3F,IAAK,CAC3C,MAAME,EAAWvB,SAASwB,cAAc,OACxCD,EAASE,UAAY,WACrBF,EAASU,MAAMgb,gBAAkBF,EAAOjX,KAAK4T,MAAM5T,KAAK6T,SAAWoD,EAAO3L,SAG1E7P,EAASU,MAAMib,SAAW,QAC1B3b,EAASU,MAAMC,KAAO,GAAGN,MACzBL,EAASU,MAAME,IAAM,GAAGN,MAGxB,MAAMsb,EAASrX,KAAK6T,SAAW7T,KAAKsX,GAAK,EACnCN,EAAWH,EAAeG,SAA4B,GAAhBhX,KAAK6T,SAEjDpY,EAASU,MAAMob,MAAQ,GAAGV,EAAeE,SACzCtb,EAASU,MAAMqb,OAAS,GAAGX,EAAeE,SAC1Ctb,EAASU,MAAM4G,QAAU,GAAG8T,EAAe9T,UAE3CtH,EAASU,MAAMsb,YAAY,MAAUzX,KAAK0X,IAAIL,GAASL,EAArB,MAClCvb,EAASU,MAAMsb,YAAY,MAAUzX,KAAK2X,IAAIN,GAASL,EAArB,MAGlCvb,EAASU,MAAMyb,UAAY,iBAAiBf,EAAe7D,SAAW,qDAEtEkE,EAAUxZ,YAAYjC,GAGtBa,YAAW,KACP4a,EAAUW,YAAYpc,EAAS,GAChCob,EAAe7D,SACtB,CACJ,CAEA,SAAS8E,EAAmBjd,EAAGkd,EAAGC,GAChC,IAAKnd,EAAG,OAOR,IAJAkd,EAAIE,WAAWF,IAAM,MACrBC,EAAIC,WAAWD,IAAM,GAKnB,YADAnd,EAAEqF,YAAc8X,GAKlB,MAAM/U,EAAI,KAAQ,IAAK,IACjBiV,GAAKF,EAAID,GAAK9U,EAEpB,IAAIkV,EAAI,EACJC,EAAIL,EAERld,EAAEN,UAAU8D,IAAI,aAEhB,MAAMuB,EAAU,WACduY,IACAC,GAAKF,EAGDC,GAAKlV,IAAOiV,EAAI,GAAKE,EAAIJ,GAAOE,EAAI,GAAKE,EAAIJ,IAC/Cnd,EAAEqF,YAAcF,KAAKG,MAAMiY,GAGvBF,EAAI,EACNrd,EAAEsB,MAAMiE,MAAQ,iBACP8X,EAAI,IACbrd,EAAEsB,MAAMiE,MAAQ,gBAGlB9C,sBAAsBsC,KAGtB/E,EAAEqF,YAAc8X,EAChB1b,YAAW,KACTzB,EAAEsB,MAAMiE,MAAQ,cAChBvF,EAAEN,UAAU2K,OAAO,YAAY,GAC9B,KAEP,EAEA5H,sBAAsBsC,EACxB,CAEA,MAAMyY,EAA8B,IAGpC,SAASC,EAAqBzd,GAC1B,MAAMkd,EAAI/M,KAAKrL,MAEf,GAAIoY,EAAIQ,GAAwB,IAAK,CACjC,MAAMR,EAAIS,GAAqB7b,aAAaoS,WAAWgJ,GAAKA,EAAE3S,WAAavK,EAAEuK,WAa7E,aAZW,IAAP2S,EACAS,GAAqB7b,aAAaob,GAAK,IAChCS,GAAqB7b,aAAaob,MAClCld,GAGP2d,GAAqB7b,aAAaf,KAAK,CACnCwJ,SAAUvK,EAAEuK,SACZqT,eAAgB5d,EAAE4d,gBAAkB,EACpCtZ,MAAOtE,EAAEsE,OAAS,IAI9B,CAEAoZ,GAAwBR,EAExB,MAAMC,EAAI,CAAC,EAAG/U,EAAI,CAAC,EACnB/I,SAASgE,iBAAiB,sBAAsBC,SAAStD,IACrD,MAAMkd,EAAIld,EAAEF,cAAc,oBAAoB+d,QAAQtT,SACtD,GAAI2S,EAAG,CACHC,EAAED,GAAKld,EAAE8d,wBACT,MAAMT,EAAIrd,EAAEF,cAAc,gBACpBwd,EAAItd,EAAEF,cAAc,gBAC1BsI,EAAE8U,GAAK,CACH3U,MAAO8U,EAAI1Z,SAAS0Z,EAAEhY,aAAe,EACrCf,MAAOgZ,EAAI3Z,SAAS2Z,EAAEjY,aAAe,EAE7C,CACH,IAED,MAAMgY,EAAIM,GAAqB7b,aAAaoS,WAAWgJ,GAAKA,EAAE3S,WAAavK,EAAEuK,YAElE,IAAP8S,EACAM,GAAqB7b,aAAaub,GAAK,IAChCM,GAAqB7b,aAAaub,MAClCrd,GAGP2d,GAAqB7b,aAAaf,KAAK,CACnCwJ,SAAUvK,EAAEuK,SACZqT,eAAgB5d,EAAE4d,gBAAkB,EACpCtZ,MAAOtE,EAAEsE,OAAS,IAI1B,MAAMgZ,EAAI,IAAIK,GAAqB7b,cAC9Bic,MAAK,CAAE/d,EAAGkd,IACPA,EAAEU,iBAAmB5d,EAAE4d,eACvBV,EAAEU,eAAiB5d,EAAE4d,eACrBV,EAAE5Y,MAAQtE,EAAEsE,QAEfmN,KAAI,CAAEzR,EAAGkd,IAAM,uCACYA,EAAI,EAAI,QAAQA,EAAI,IAAM,4BACxCA,EAAI,mBACbA,EAAI,sCACWld,EAAEuK,aAAavK,EAAEuK,0CACpBvK,EAAE4d,gBAAkB,MAAM5d,EAAE4d,gBAAkB,mCAC9C5d,EAAEsE,OAAS,MAAMtE,EAAEsE,OAAS,4BAE/C0Z,KAAK,IAEDT,EAAIle,SAASI,eAAe,sBAElC,GAAI8d,EAAG,CACH,MAAMvd,EAAIud,EAAEzd,cAAc,uBAC1Byd,EAAErM,UAAYlR,EAAIA,EAAEie,UAAYX,EAAIA,EAEpCC,EAAEla,iBAAiB,sBAAsBC,SAAStD,IAC9C,MAAMkd,EAAIld,EAAEF,cAAc,oBAAoB+d,QAAQtT,SAEtD,GAAI2S,GAAKC,EAAED,GAAI,CACX,MAAMG,EAAIF,EAAED,GACNI,EAAItd,EAAE8d,wBACNP,EAAIF,EAAE7b,IAAM8b,EAAE9b,IAQpB,GANI+b,EAAI,EACJvd,EAAEN,UAAU8D,IAAI,aACT+Z,EAAI,GACXvd,EAAEN,UAAU8D,IAAI,eAGhB4E,EAAE8U,GAAI,CACN,MAAMC,EAAInd,EAAEF,cAAc,gBACpBud,EAAIrd,EAAEF,cAAc,gBAEtBqd,GAAK/U,EAAE8U,GAAG3U,QAAU5E,SAASwZ,EAAE9X,cAC/B4X,EAAmBE,EAAG/U,EAAE8U,GAAG3U,MAAO5E,SAASwZ,EAAE9X,cAG7CgY,GAAKjV,EAAE8U,GAAG5Y,QAAUX,SAAS0Z,EAAEhY,cAC/B4X,EAAmBI,EAAGjV,EAAE8U,GAAG5Y,MAAOX,SAAS0Z,EAAEhY,aAErD,CAEArF,EAAEV,iBAAiB,gBAAgB,KAC/BU,EAAEN,UAAU2K,OAAO,YAAa,cACnC,GAAG,CACAuM,MAAM,GAEd,CACH,GACL,CAEAsH,KACIC,IACR,CAGA,SAASlB,EAAmBmB,EAASC,EAAYC,GAC7C,IAAKF,EAAS,OAKd,IAHAC,EAAajB,WAAWiB,IAAe,MACvCC,EAAWlB,WAAWkB,IAAa,GAI/B,YADAF,EAAQ/Y,YAAciZ,GAK1B,MAEMC,EAFW,KACC,IAAO,IAEnBC,GAAkBF,EAAWD,GAAcE,EAEjD,IAAIE,EAAe,EACf7Z,EAAeyZ,EAEnBD,EAAQ1e,UAAU8D,IAAI,aAEtB,MAAMuB,EAAU,WACZ0Z,IACA7Z,GAAgB4Z,EAEZC,GAAgBF,IACdC,EAAiB,GAAK5Z,EAAe0Z,GACrCE,EAAiB,GAAK5Z,EAAe0Z,IAEvCF,EAAQ/Y,YAAcF,KAAKG,MAAMV,GAE7B4Z,EAAiB,EACjBJ,EAAQ9c,MAAMiE,MAAQ,iBACfiZ,EAAiB,IACxBJ,EAAQ9c,MAAMiE,MAAQ,gBAG1B9C,sBAAsBsC,KAEtBqZ,EAAQ/Y,YAAciZ,EAEtB7c,YAAW,KACP2c,EAAQ9c,MAAMiE,MAAQ,cACtB6Y,EAAQ1e,UAAU2K,OAAO,YAAY,GACtC,KAEX,EAEA5H,sBAAsBsC,EAC1B,CAEA,SAASwW,IACD7C,EAAYE,cAAgBF,EAAYnQ,MAAMkI,SAElDuK,IACA0D,KACJ,CAoBA,SAAS/Q,EAAWgR,EAAUC,GAAe,GAE1B,mBAAbD,GAAkCjb,cAEpCib,EAAW,iBAGXld,YAAW,KACTod,KAEApd,YAAW,KACT,MAAMgR,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cACvCgT,GAAaC,IACfD,EAAU/S,UAAU8D,IAAI,UACxBkP,EAAWhT,UAAU2K,OAAO,UAC9B,GACC,IAAI,GACN,MAIY,mBAAbsU,GAEF/a,aAAakb,WAAW,eAU4B,uBAAlDzf,SAASS,cAAc,oBAAoBsE,IAC7C2a,KAIF,MAAM9W,EAAgB5I,SAASS,cAAc,mBAS7C,GANImI,GAAsC,oBAArBA,EAAc7D,KACjC4W,IACA1C,GAAW,GAITsG,GAA6B,mBAAbD,EAIlB,OAFArN,SACAnQ,OAAO4U,SAASiJ,QAAO,GAIrB,CAAC,kBAAmB,yBAA0B,mBAAoB,sBAAsBnR,SAAS8Q,IACnGvH,KAIF/X,SAASgE,iBAAiB,WAAWC,SAAQwT,IAC3CA,EAAOpX,UAAU2K,OAAO,WAGxB,MAAM4U,EAAoBnI,EAAOhX,cAAc,uBAC3Cmf,GACFA,EAAkB5U,QACpB,IAIF,MAAM6U,EAAgB7f,SAASI,eAAekf,GAC9C,GAAIO,EAWF,OATAA,EAAcxf,UAAU8D,IAAI,WAG5B4F,GAAoB8V,GAGpB1Q,KAGQmQ,GACN,IAAK,kBACHhZ,IAIAlE,YAAW,KACT0d,IAAoB,GACnB,KACH,MAEF,IAAK,iBACCC,MACFC,KAEF,MAEF,IAAK,uBAEH,OAAOC,KAOf,CAoBA,SAASC,EAAgB7W,GACrBhE,EAAU0I,WAAa1E,EACvBgI,IAGA,MAAM2L,EAAYhd,SAASI,eAAe,mBAC1C,IAAK4c,EAAW,OAChBA,EAAUnL,UAAY,GAEtB,MAAMlF,EAAQqL,EAAcC,OAAO5S,EAAUyI,aAAe,GAC5D,IAAKnB,EAAO,OAGZ,MAAMwT,EAAcngB,SAASwB,cAAc,OAC3C2e,EAAY1e,UAAY,eAGxB,MAAM2e,EAAczT,EAAMwL,aAC1B,IAAIkI,EAAiB,EAGrB,IAAK,IAAIhf,EAAI,EAAGA,GAAK+e,EAAa/e,IAAK,CACnC,MAAMif,EAAW,GAAGjb,EAAUyI,gBAAgBzE,KAAShI,IACnDgE,EAAU8I,cAAc7E,IAAIgX,GAE5BD,IACOhb,EAAU+I,gBAAgB9E,IAAIgX,IACrCD,GAER,CAEA,MAAME,EAAqBza,KAAKG,MAAOoa,EAAiBD,EAAe,KACjEI,EAAUC,EAAWpb,EAAUyI,aAAczE,GAC7CqX,EAAiBC,GAAkBtb,EAAUyI,aAAczE,GAGjE8W,EAAYtO,UAAY,2GAGA2O,mHAGkBnb,EAAUyI,sBAAsBzE,kDACtCqX,qLAKmBH,0EAElBF,KAAkBD,uCAIvDpD,EAAUxZ,YAAY2c,GAGtB,MAAMS,EAAY5gB,SAASwB,cAAc,OACzCof,EAAUnf,UAAY,aAEtB,MAAMof,EAAa,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IACvCnQ,EAAS,GAAGrL,EAAUyI,gBAAgBzE,IAGvChE,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI,CAAC,KAMhD,IAAK,IAAIK,EAAI,EAAGA,GAAKsL,EAAMwL,aAAc9W,IAAK,CAC1C,MAAMyf,EAAY9gB,SAASwB,cAAc,OACnC8e,EAAW,GAAGjb,EAAUyI,gBAAgBzE,KAAShI,IAGjD0f,EAAa1b,EAAU6I,eAAewC,IAASpH,IAAIjI,GAGnD2f,EAAY3b,EAAU8I,cAAc7E,IAAIgX,GACxCW,EAAc5b,EAAU+I,gBAAgB9E,IAAIgX,GAC5CY,EAAc7f,IAAMsL,EAAMyL,UAC1B+I,EAAcN,EAAWrS,SAASnN,GAGxCyf,EAAUrf,UAAY,aAClBsf,GAAYD,EAAUzgB,UAAU8D,IAAI,YACpC6c,EAAWF,EAAUzgB,UAAU8D,IAAI,WAC9B8c,GAAaH,EAAUzgB,UAAU8D,IAAI,aAC1C+c,GAAaJ,EAAUzgB,UAAU8D,IAAI,QACrCgd,GAAaL,EAAUzgB,UAAU8D,IAAI,QACpC4c,GAAYD,EAAUzgB,UAAU8D,IAAI,UAEzC2c,EAAU9a,YAAc3E,EAEpB0f,IACAD,EAAU/Y,QAAU,IAAMqZ,GAAW/f,IAGzCuf,EAAUpd,YAAYsd,EAC1B,CAEA9D,EAAUxZ,YAAYod,GAGtB,MAAMS,EAASrhB,SAASwB,cAAc,OACtC6f,EAAO5f,UAAY,oBACnB4f,EAAOxP,UAAY,0zBAmBnBmL,EAAUxZ,YAAY6d,GAGtB/S,EAAW,eACf,CAGA,SAASmS,EAAWnP,EAASjI,GACzB,MASMiY,EAAa,CACf,mBACA,qBACA,kBACA,oBACA,cAIJ,OAAiB,IAAVjY,EAlBW,CACd,EAAG,cACH,EAAG,wBACH,EAAG,gBACH,EAAG,oBACH,EAAG,gBAawBiI,IAAY,cACvCgQ,GAAYjY,EAAQ,GAAKiY,EAAWlQ,SAAW,aACvD,CAEA,SAASuP,GAAkBrP,EAASjI,GAUhC,MAAO,GATY,CACf,EAAG,WACH,EAAG,aACH,EAAG,eACH,EAAG,WACH,EAAG,UAIciI,IAAY,iCAAiCjI,GACtE,CAEA,SAASkY,GAAuB1U,EAAO2U,GACnC,MAAMC,EAAaD,EAAWtY,MAAMkI,OAC9BsQ,EAAcD,EAAa,GAIjC,IAAKD,EAAWG,cAAe,CAE3BH,EAAWG,cAAgBnR,MAAM5L,KAAK,CAAEwM,OAAQqQ,IAAc,CAACG,EAAGvgB,IAAMA,IAExE,IAAK,IAAIA,EAAImgB,EAAWG,cAAcvQ,OAAS,EAAG/P,EAAI,EAAGA,IAAK,CAC1D,MAAMwgB,EAAI/b,KAAK4T,MAAM5T,KAAK6T,UAAYtY,EAAI,KACzCmgB,EAAWG,cAActgB,GAAImgB,EAAWG,cAAcE,IACvD,CAACL,EAAWG,cAAcE,GAAIL,EAAWG,cAActgB,GAC3D,CAEJ,CAGA,GAAc,KAAVwL,EACA,MAAO,CACHiV,WAAY,EACZ9a,MAAOya,EACPP,aAAa,EACb1G,gBAAgB,EAChBD,OAAO,EACP4G,aAAa,EACb7H,kBAAmBxT,KAAK6T,SAAW,GACnCkH,WAAY,GACZc,cAAeH,EAAWG,eAKlC,GAAc,IAAV9U,GAAyB,IAAVA,EAAa,CAE5B,MAAMkV,EAAyB,GAAblV,EAAQ,GAC1B,MAAO,CACHiV,WAAYC,EACZ/a,MAAO,EACP6Z,WAAY,CAAC,EAAG,GAAI,IACpBc,cAAeH,EAAWG,cAAc/J,MAAMmK,EAAUA,EAAW,GAE3E,CAGA,GAAc,IAAVlV,EAEA,MAAO,CACHiV,WAAY,EACZ9a,MAAO,EACPma,aAAa,EACb5G,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,EAAG,IAKzD,GAAc,IAAV/K,GAAyB,IAAVA,EAAa,CAC5B,MAAMkV,EAAW,EAAkB,GAAblV,EAAQ,GAC9B,MAAO,CACHiV,WAAYC,EACZ/a,MAAO,EACP6Z,WAAY,CAAC,EAAG,GAAI,IACpBc,cAAeH,EAAWG,cAAc/J,MAAMmK,EAAUA,EAAW,GAE3E,CAGA,GAAc,IAAVlV,EACA,MAAO,CACHiV,WAAY,EACZ9a,MAAO,EACPma,aAAa,EACb5G,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,EAAG,KAKzD,GAAc,IAAV/K,GAAyB,IAAVA,EAAa,CAC5B,MAAMkV,EAAW,GAAmB,GAAblV,EAAQ,GAC/B,MAAO,CACHiV,WAAYC,EACZ/a,MAAO,EACP6Z,WAAY,CAAC,EAAG,GAAI,IACpBc,cAAeH,EAAWG,cAAc/J,MAAMmK,EAAUA,EAAW,GAE3E,CAGA,GAAc,IAAVlV,EACA,MAAO,CACHiV,WAAY,GACZ9a,MAAO,EACPma,aAAa,EACb5G,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,GAAI,KAK1D,GAAc,KAAV/K,EACA,MAAO,CACHiV,WAAY,EACZ9a,MAAO,GACPma,aAAa,EACb3G,gBAAgB,EAChBD,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,EAAG,KAKzD,GAAc,KAAV/K,GAA0B,KAAVA,EAAc,CAC9B,MAAMkV,EAAW,GAAoB,GAAdlV,EAAQ,IAC/B,MAAO,CACHiV,WAAYC,EACZ/a,MAAO,EACP6Z,WAAY,CAAC,GAAI,GAAI,IACrBc,cAAeH,EAAWG,cAAc/J,MAAMmK,EAAUA,EAAW,GAE3E,CAGA,GAAc,KAAVlV,EACA,MAAO,CACHiV,WAAY,GACZ9a,MAAO,EACPma,aAAa,EACb5G,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,GAAI,KAK1D,GAAc,KAAV/K,GAA0B,KAAVA,EAAc,CAC9B,MAAM7F,EAAkB,KAAV6F,EAAe,EAAI,EAC3BkV,EAAW,IAAgB,KAAVlV,EAAe,EAAI,GAC1C,MAAO,CACHiV,WAAYC,EACZ/a,MAAOA,EACP6Z,WAAY,CAAC,GAAI,GAAI,IACrBc,cAAeH,EAAWG,cAAc/J,MAAMmK,EAAUA,EAAW/a,GAE3E,CAGA,GAAc,KAAV6F,EACA,MAAO,CACHiV,WAAY,GACZ9a,MAAO,GACPma,aAAa,EACb5G,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,GAAI,KAK1D,GAAc,KAAV/K,GAA0B,KAAVA,EAAc,CAC9B,MAAMmV,EAAsB,KAAVnV,EAAe,EAAI,EAC/BoV,EAAgBD,GAAaN,EAAc,EAAIA,EAAc,GAC7DK,EAAW,IAAgB,KAAVlV,EAAe,EAAImV,GAC1C,MAAO,CACHF,WAAYC,EACZ/a,MAAOib,EACPpB,WAAY,CAAC,GAAI,GAAI,IACrBc,cAAeH,EAAWG,cAAc/J,MAAMmK,EAAUA,EAAWE,GAE3E,CAGA,OAAc,KAAVpV,EACO,CACHiV,WAAY,GACZ9a,MAAO,GACPma,aAAa,EACb5G,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,GAAI,KAK5C,KAAV/K,EACO,CACHiV,WAAY,GACZ9a,MAAO,GACPma,aAAa,EACb3G,gBAAgB,EAChBD,OAAO,EACPjB,kBAAmBxT,KAAK6T,SAAW,GACnCgI,cAAeH,EAAWG,cAAc/J,MAAM,GAAI,UAR1D,CAWJ,CAEA,SAASsK,GAAeV,GAIpB,OAFKnc,EAAU8c,YAAW9c,EAAU8c,UAAY,IAAInhB,KAE7CwgB,EAAWtY,MAAMkJ,KAAI,CAACwP,EAAGhN,IAAUA,IACrCM,QAAO7T,IAAMgE,EAAU8c,UAAU7Y,IAAIjI,IAC9C,CAEA,SAAS+gB,GAAkBC,EAAkBrb,GACzC,MAAMsb,EAAW,IAAIthB,IAErB,KAAOshB,EAASzF,KAAO7V,GAASqb,EAAiBjR,OAASkR,EAASzF,MAAM,CACrE,MAAM0F,EAAczc,KAAK4T,MAAM5T,KAAK6T,SAAW0I,EAAiBjR,QAChEkR,EAASne,IAAIke,EAAiBE,IAC9Bld,EAAU8c,UAAUhe,IAAIke,EAAiBE,GAC7C,CAEA,OAAO/R,MAAM5L,KAAK0d,EACtB,CAEA,SAASE,GAAsBpJ,EAAeoI,GAC1C,MAAMiB,EAAU,IAAIzhB,IAAI,CAACoY,IACnBsJ,EAAalB,EAAWzN,aAE9B,KAAO0O,EAAQ5F,KAAO,GAAG,CACrB,MAAM8F,EAAeD,EAAW5c,KAAK4T,MAAM5T,KAAK6T,SAAW+I,EAAWtR,SACtEqR,EAAQte,IAAIwe,EAChB,CAEA,OAAOnS,MAAM5L,KAAK6d,GAAS/D,MAAK,IAAM5Y,KAAK6T,SAAW,IAC1D,CAEA,SAASyH,GAAWvU,GAClBxH,EAAU2I,aAAenB,EAGzB,MAAM+V,EAAc,CAClBjW,MAAOtH,EAAUyI,aACjBrE,IAAKpE,EAAU0I,WACflB,MAAOA,EACPxF,UAAWyJ,KAAKrL,OAIlBlB,aAAa6B,QAAQ,cAAeiJ,KAAKE,UAAUqT,IAGnDvJ,EAAYwB,YAAc,EAC1BxB,EAAYgB,eAAiB,EAC7BhB,EAAYoB,eAAiB3J,KAAKrL,MAClC4T,EAAYiB,cAAe,EAC3BjB,EAAYsB,aAAc,EAC1BrU,IAIkBjB,EAAUyI,aAAgBzI,EAAU0I,WAAtD,MAKM8U,EAAiB7iB,SAASS,cAAc,oBACxCqiB,EAAoB9iB,SAASS,cAAc,uBAE7CoiB,IAAgBA,EAAe5gB,MAAMiC,QAAU,QAC/C4e,IAAmBA,EAAkB7gB,MAAMiC,QAAU,QAEzD,MAAM6e,EAAY/iB,SAASS,cAAc,eACrCsiB,IAAWA,EAAU/c,YAAcX,EAAUJ,OAAS,GAE1D,MAAM+d,EAAiBhjB,SAASS,cAAc,oBAC1CuiB,IAAgBA,EAAe/gB,MAAMiC,QAAU,QAEnDmB,EAAUyI,aAAezI,EAAUyI,cAAgB,EACnDzI,EAAU0I,WAAa1I,EAAU0I,YAAc,EAC/C1I,EAAU2I,aAAenB,EAGzBiT,KAGA,MAAMmD,EAAa5e,YAAcA,YAAY8H,OAAS,eACtD,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,IAAIqC,SAAS3B,IAAyB,YAAfoW,EAA0B,CAClE,MAAMjV,EAAenB,EAErB,IAAKxI,YACH,OAAO6e,IAAwB,KAC7BC,GAAiBnV,EAAa,IAIlC,IAAKzJ,aAAaC,QAAQ,oBAAoBH,YAAYU,MACxD,OAAOqe,IAAkB,KACvBD,GAAiBnV,EAAa,GAGpC,CAGc,KAAVnB,GACFwM,EAAY6H,aAAc,EAE1B9e,WAAWihB,GAAsB,KACjCjhB,WAAWihB,GAAsB,MAEjChK,EAAY6H,aAAc,EAO5BiC,GAAiBtW,EAFgB,KAAVA,GAA0B,IAAVA,EAGzC,CAEA,SAASiT,KAIP,MAAMwD,EAAiBtjB,SAASI,eAAe,qBAS/C,GARIkjB,GACFA,EAAetY,UAOZ3G,aACsB,uBAAtBA,YAAY+G,QACX/G,YAAY+G,OAAOoD,SAAS,YAEhC,OAMF,MAAM+U,EAAcvjB,SAASwB,cAAc,UAC3C+hB,EAAYxe,GAAK,oBACjBwe,EAAYvd,YAAc,mBAC1Bud,EAAYthB,MAAMuhB,QAAU,+RAgB5BD,EAAYxb,QAAU,WAGpB1C,EAAU2I,aAAe,GACzBoT,GAAW,GACb,EAGAphB,SAASuD,KAAKC,YAAY+f,EAG5B,CAEA,SAASE,KAIL,MAAM7S,EAAerM,aAAaC,QAAQ,eAC1C,GAAIoM,EACA,IACI,MAAMC,EAAUxB,KAAKC,MAAMsB,GAC3B,GAAIC,EAAQlE,OAASkE,EAAQpH,KAAOoH,EAAQhE,MAExC,MAAO,CACHF,MAAOkE,EAAQlE,MACflD,IAAKoH,EAAQpH,IACboD,MAAOgE,EAAQhE,MAG3B,CAAE,MAAOlM,GAET,CAcJ,OAAI0E,EAAUyI,cAAgBzI,EAAU0I,YAAc1I,EAAU2I,aAErD,CACHrB,MAAOtH,EAAUyI,aACjBrE,IAAKpE,EAAU0I,WACflB,MAAOxH,EAAU2I,cAMlB,CACHrB,MAAO,EACPlD,IAAK,EACLoD,MAAO,EAEf,CAEA,SAASsW,GAAiBtW,EAAO6W,GAAiB,GAChDrK,EAAYsK,kBAAoBtK,EAAYsK,mBAAqB,EACjEte,EAAU2I,aAAenB,EAEzB,MAAM6D,EAAS,GAAGrL,EAAUyI,gBAAgBzI,EAAU0I,aAChD6V,EAAgBC,eAAenT,GAE/BqS,EAAY/iB,SAASS,cAAc,eACrCsiB,IACFA,EAAU/c,YAAcX,EAAUJ,OAAS,EAC3C8d,EAAU9gB,MAAMiC,QAAU,SAG5BmV,EAAYyK,cAAgBze,EAAUJ,MACtCoU,EAAY0K,cAAgB,IAAK1e,EAAUyH,OAC3CuM,EAAYqB,UAAY,EACxBrB,EAAYuC,qBAAuB,KACnCvC,EAAYsB,aAAc,EAC1BtB,EAAYoB,eAAiB3J,KAAKrL,MAElCue,GAAenX,GAAO,KACpBoX,GAAe1C,GAAuB1U,EAAO+W,GAAgBA,GAC7DtV,EAAW,mBACXwR,KAEc,KAAVjT,GAEFqX,KACA9hB,WAAWihB,GAAsB,KACjCc,OAEAC,KACAC,MAGFjiB,YAAW,KACTqZ,EAAWpC,EAAYnQ,MAAMkI,OAAO,GACnC,IAAI,GACNsS,EACL,CAWA,SAASP,GAAiBmB,GACjBjL,EAAYsK,oBACbtK,EAAYsK,kBAAoB,GAGpCte,EAAU2I,aAAesW,EACzB,MAAM5T,EAAS,GAAGrL,EAAUyI,gBAAgBzI,EAAU0I,aAChDyT,EAAaqC,eAAenT,GAG5B6T,EAAcvkB,SAASS,cAAc,eACvC8jB,IACAA,EAAYve,YAAcX,EAAUJ,OAAS,EAC7Csf,EAAYtiB,MAAMiC,QAAU,SAIhCmV,EAAYyK,cAAgBze,EAAUJ,MACtCoU,EAAY0K,cAAgB,IAAK1e,EAAUyH,OAC3CuM,EAAYqB,UAAY,EACxBrB,EAAYuC,qBAAuB,KACnCvC,EAAYsB,aAAc,EAC1BtB,EAAYoB,eAAiB3J,KAAKrL,MAGlCue,GAAeM,GAAS,KAGpBL,GADoB1C,GAAuB+C,EAAS9C,GACxBA,GAG5BlT,EAAW,mBACX8V,KACAC,KAGAjiB,YAAW,KACPqZ,EAAWpC,EAAYnQ,MAAMkI,OAAO,GACrC,IAAI,GAEf,CAEA,SAAS6S,GAAeO,EAAahD,GACjC,GAA2B,iBAAhBgD,EAEP,GAAIA,EAAY7C,cAAe,CAE3B,MAAM8C,EAAcD,EAAY7C,cAAcvP,KAAIwC,GAAS4M,EAAWtY,MAAM0L,KACtE8P,EAAqBF,EAAY7C,cAAcvP,KAAIwC,GAAS4M,EAAWzN,aAAaa,KAE1FjN,OAAOgd,OAAOtL,EAAa,CACvBnQ,MAAOub,EACP1Q,aAAc2Q,EACdnL,aAAc,EACdc,eAAgB,EAChBC,cAAc,EACdhB,kBAAmBkL,EAAYlL,oBAAqB,EACpDiB,MAAOiK,EAAYjK,QAAS,EAC5BC,eAAgBgK,EAAYhK,iBAAkB,EAC9C0G,YAAasD,EAAYtD,cAAe,GAEhD,KAAO,CAEH,MAAMY,WAAEA,EAAU9a,MAAEA,EAAKsS,kBAAEA,EAAiBiB,MAAEA,EAAKC,eAAEA,EAAc0G,YAAEA,GAAgBsD,EACrF7c,OAAOgd,OAAOtL,EAAa,CACvBnQ,MAAOsY,EAAWtY,MAAM0O,MAAMkK,EAAYA,EAAa9a,GACvD+M,aAAcyN,EAAWzN,aAAa6D,MAAMkK,EAAYA,EAAa9a,GACrEuS,aAAc,EACdc,eAAgB,EAChBC,cAAc,EACdhB,kBAAmBA,IAAqB,EACxCiB,MAAOA,IAAS,EAChBC,eAAgBA,IAAkB,EAClC0G,YAAaA,IAAe,GAEpC,MAGAvZ,OAAOgd,OAAOtL,EAAa,CACvBnQ,MAAOsY,EAAWtY,MAAM0O,MAAM,EAAG4M,GACjCzQ,aAAcyN,EAAWzN,aAAa6D,MAAM,EAAG4M,GAC/CjL,aAAc,EACdc,eAAgB,EAChBC,cAAc,EACdhB,mBAAmB,EACnBiB,OAAO,EACPC,gBAAgB,EAChB0G,aAAa,GAGzB,CAEA,SAAS0D,KACPvL,EAAY6H,cAAgB7H,EAAYwL,oBAAsBxL,EAAYwL,mBAAoB,GAE9F,MAAMlkB,EAAIqX,EAAcC,OAAO5S,EAAUyI,aAAe,GAClD+P,EAAIxY,EAAU2I,eAAiBrN,EAAEwX,aACjC2F,EAAIzY,EAAU0I,aAAepN,EAAEuX,QAC/BnP,EAAI1E,YAAcA,YAAY8H,OAAS,eAE7C,GAAI0R,EAAG,CACL,GAAIxY,EAAUyI,cAAgB,GAAK,IAAMzI,EAAU0I,YAAc,YAAchF,EAG7E,OADAxE,aAAa6B,QAAQ,sBAAuBf,EAAUyI,cAC/CQ,EAAW,uBAAwBlM,YAAW,KACnDghB,IACD,GAAG,KAGNtF,EAAIzY,EAAUyI,aAAe,GAAKzI,EAAUyI,eAAgBzI,EAAU0I,WAAa,EAAGqT,GAAW,IAAM9S,EAAW,iBAAmBjJ,EAAU0I,aAAcqT,GAAW,GAC1K,MAAOA,GAAW/b,EAAU2I,aAAe,EAC7C,CAEA,SAAS8W,GAAsBxF,GAM3B,GAFuB,CAAC,eAAgB,aAAc,eAAgB,mBAEnD9Q,SAAS8Q,GAAW,CACnC,MAAMyF,EAAe/kB,SAASwB,cAAc,OAC5CujB,EAAatjB,UAAY,aAGzB,MAAMujB,EAAahlB,SAASwB,cAAc,UAO1C,GANAwjB,EAAWvjB,UAAY,cACvBujB,EAAWnT,UAAY,8BACvBmT,EAAWjd,QAAU,IAAMuG,EAAW,kBACtCyW,EAAavhB,YAAYwhB,GAGR,iBAAb1F,EAA6B,CAC7B,MAAM2F,EAAajlB,SAASwB,cAAc,UAK1C,OAJAyjB,EAAWxjB,UAAY,cACvBwjB,EAAWpT,UAAY,oCAGhByN,GACH,IAAK,aACD2F,EAAWld,QAAU,IAAMuG,EAAW,gBACtC,MACJ,IAAK,eACD2W,EAAWld,QAAU,IAAMmd,GAAc7f,EAAUyI,cACnD,MACJ,IAAK,kBACDmX,EAAWld,QAAU,IAAMod,KAInCJ,EAAavhB,YAAYyhB,EAC7B,CAGsBjlB,SAASI,eAAekf,GAChC9b,YAAYuhB,EAC9B,CACJ,CAEA,SAASX,KACP,MAAMgB,EAAkBplB,SAASS,cAAc,8BACzC4kB,EAAgB,EAAIvf,KAAKsX,GAAK,GAC9BvX,EAAWwT,EAAYE,aAAeF,EAAYnQ,MAAMkI,OAM9D,GAJAgU,EAAgBnjB,MAAMqjB,gBAAkB,GAAGD,KAAiBA,IAC5DD,EAAgBnjB,MAAMsjB,iBAAmBF,GAAiB,EAAIxf,GAG1DA,GAAY,IAAM,CAEpB,MAAM2f,EAAM1f,KAAK4T,MAAiB,EAAX7T,EAAe,IACtCuf,EAAgBnjB,MAAMwjB,OAAS,OAAOD,eACxC,MAAO,GAAI3f,GAAY,GAAK,CAE1B,MAAM2f,EAAM,GAAK1f,KAAK4T,MAA0B,GAAnB7T,EAAW,KAAY,IACpDuf,EAAgBnjB,MAAMwjB,OAAS,OAAOD,eACxC,MAAO,GAAI3f,GAAY,IAAM,CAE3B,MAAM2f,EAAM,GAAK1f,KAAK4T,MAAyB,GAAlB7T,EAAW,IAAW,IACnDuf,EAAgBnjB,MAAMwjB,OAAS,OAAOD,eACxC,KAAO,CAEL,MAAMA,EAAM,IAAM1f,KAAK4T,MAA0B,GAAnB7T,EAAW,KAAY,IACrDuf,EAAgBnjB,MAAMwjB,OAAS,OAAOD,eACxC,CACF,CAEA,SAASnB,KAOP,GALArkB,SAASgE,iBAAiB,mBAAmBC,SAAQ6D,IACnDA,EAAOzH,UAAU2K,OAAO,UAAW,QAAQ,IAIzCqO,EAAYE,cAAgBF,EAAYnQ,MAAMkI,OAAQ,OAE1D,MAAMsU,EAAsB1lB,SAASI,eAAe,iBAI9CkZ,EADiB,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAAI9K,SAASnJ,EAAU2I,eAChClI,KAAK6T,SAAW,GAEtD/E,EAAQyE,EAAYE,aACpBoM,EAAgBrM,EAAoBD,EAAYtF,aAAaa,GAASyE,EAAYnQ,MAAM0L,GACxFwE,EAAgBE,EAAoBD,EAAYnQ,MAAM0L,GAASyE,EAAYtF,aAAaa,GAGxFgR,EAAatM,EAAoBD,EAAYnQ,MAAQmQ,EAAYtF,aAGjE8R,EAAY,IAAI7kB,IAAI,CAACoY,IAG3B,KAAOyM,EAAUhJ,KAAO,GAAG,CACzB,MAAMiJ,EAAeF,EAAW9f,KAAK4T,MAAM5T,KAAK6T,SAAWiM,EAAWxU,SAClE0U,IAAiB1M,GACnByM,EAAU1hB,IAAI2hB,EAElB,CAGA,MAAMC,EAAmB/lB,SAASI,eAAe,WACjD2lB,EAAiBlU,UAAY,GAGLrB,MAAM5L,KAAKihB,GAAWnH,MAAK,IAAM5Y,KAAK6T,SAAW,KAGzD1V,SAAQ+hB,IACtB,MAAMle,EAAS9H,SAASwB,cAAc,UACtCsG,EAAO9B,YAAcggB,EACrBle,EAAOC,QAAU,IAAMmR,GAAa8M,IAAW5M,GAC/C2M,EAAiBviB,YAAYsE,EAAO,IAIlCuR,EAAYE,aAAe,GAC7BmM,EAAoBrlB,UAAU8D,IAAI,WAClC/B,YAAW,KACTsjB,EAAoB1f,YAAc2f,EAClCD,EAAoBrlB,UAAU2K,OAAO,WACrC0a,EAAoBrlB,UAAU8D,IAAI,YAClC/B,YAAW,KACTsjB,EAAoBrlB,UAAU2K,OAAO,WAAW,GAC/C,IAAI,GACN,OAGH0a,EAAoB1f,YAAc2f,EAClCD,EAAoBrlB,UAAU8D,IAAI,YAClC/B,YAAW,KACTsjB,EAAoBrlB,UAAU2K,OAAO,WAAW,GAC/C,KAEP,CAEA,SAASib,KAEPC,IACF,CAEA,SAASC,KAEP,IAAK9hB,aAAqC,uBAAtBA,YAAY+G,MAAgC,OAEhE,MAAMgb,EAAiBpmB,SAASI,eAAe,mBAG/C,GAAIJ,SAASI,eAAe,qBAAsB,OAElD,MAAMmjB,EAAcvjB,SAASwB,cAAc,UAC3C+hB,EAAYxe,GAAK,oBACjBwe,EAAY1R,UAAY,mBACxB0R,EAAYthB,MAAMuhB,QAAU,0QAc5BD,EAAYxb,QAAU,WAEpB1C,EAAU2I,aAAe,GACzBoT,GAAW,GACb,EAEAgF,EAAe5iB,YAAY+f,EAC7B,CAEA,SAAS8C,KACN,MAAMC,GAAaxV,KAAKrL,MAAQ4T,EAAYuB,mBAAqB,IAEjE,GAAI0L,EADY,GACS,CACrB,MAAMC,EAAazgB,KAAK4T,MAFZ,GAE4B4M,GAExC,OADAjN,EAAYqB,WAAa6L,EAClBA,CACX,CACA,OAAO,CACV,CAEA,SAASC,GAAWC,EAAQ,GAENzmB,SAASgE,iBAAiB,cAElCC,SAAQyiB,IACd,IAAIC,EAAa,EACjB,MAAMC,EAAU,KACZF,EAASrmB,UAAU8D,IAAI,cACvB/B,YAAW,KACPskB,EAASrmB,UAAU2K,OAAO,cAC1B2b,IACIA,EAAaF,GACbrkB,WAAWwkB,EAAS,IACxB,GACD,IAAI,EAGXA,GAAS,GAEjB,CAGA,SAASzX,KACYnP,SAASgE,iBAAiB,eAClCC,SAAQC,IACb,MAAMqB,EAAejB,SAASJ,EAAQ8B,cAAgB,EACtD,IAAI6gB,EAIAA,EADA/kB,OAAO4U,SAASO,SAASzI,SAAS,UACpB6K,EAAYpU,OAAS,EAErBI,EAAUJ,OAAS,EAOrC6hB,GAAc5iB,EAHG6iB,OAAOxhB,GACTwhB,OAAOF,GAEkB,GAEhD,CAKA,SAASG,KACN,MAAM7N,EAAUnZ,SAASgE,iBAAiB,mBACpCoV,EAAgBC,EAAYC,kBAC9BD,EAAYnQ,MAAMmQ,EAAYE,cAC9BF,EAAYtF,aAAasF,EAAYE,cAEnCC,EAAehJ,MAAM5L,KAAKuU,GAASjE,QAAO5M,GAC5CA,EAAItC,cAAgBoT,IAGxB,GAAII,EAAapI,OAAS,EAAG,CACzB,MAAMqI,EAAkBD,EAAa1T,KAAK4T,MAAM5T,KAAK6T,SAAWH,EAAapI,SAC7EqI,EAAgBG,UAAW,EAC3BH,EAAgBxX,MAAM4G,QAAU,KACpC,CACH,CAGA,SAASoe,KACL,MAAM7N,EAAgBC,EAAYC,kBAC9BD,EAAYnQ,MAAMmQ,EAAYE,cAC9BF,EAAYtF,aAAasF,EAAYE,cAEzCvZ,SAASgE,iBAAiB,mBAAmBC,SAAQ6D,IAC7CA,EAAO9B,cAAgBoT,GACvBtR,EAAOzH,UAAU8D,IAAI,WAErB/B,YAAW,KACHiX,EAAY6N,iBACZC,IAA2B,GAE3BjO,IAAa,EACjB,GACD,OAEHpR,EAAO8R,UAAW,EAClB9R,EAAO7F,MAAM4G,QAAU,MAC3B,GAER,CAGA,SAASb,EAAQrH,GACb,MAAMkd,EAAInF,EAAY/X,GAEtB,GAAIkd,EACA,GAAIxY,EAAUJ,MAAQ4Y,EAAEjF,KACpBI,GAAiB,QAAQ6E,EAAEjF,cAAe,aACvC,CAIH,OAHAvT,EAAUJ,OAAS4Y,EAAEjF,KACrBzJ,KAEQxO,GACJ,IAAK,aACDsY,GAAW,EACX7W,YAAW,KACP6W,GAAW,CAAK,GACjB4E,EAAE/E,UACL,MACJ,IAAK,OAEGO,EAAY6N,iBACZC,IAA2B,GAAM,GAEjCjO,IAAa,GAAM,GAEvB,MACJ,IAAK,OACD,MAAMvY,EAAIX,SAASgE,iBAAiB,mBAC9B8Z,EAAIzE,EAAYC,kBAClBD,EAAYnQ,MAAMmQ,EAAYE,cAC9BF,EAAYtF,aAAasF,EAAYE,cACnCxQ,EAAIyH,MAAM5L,KAAKjE,GAAGuU,QAAQvU,GAAKA,EAAEqF,cAAgB8X,IAEvD,GAAI/U,EAAEqI,OAAS,EAAG,CACd,MAAMzQ,EAAIoI,EAAEjD,KAAK4T,MAAM5T,KAAK6T,SAAW5Q,EAAEqI,SACzCzQ,EAAEiZ,UAAW,EACbjZ,EAAEsB,MAAM4G,QAAU,KACtB,CACA,MACJ,IAAK,SACDoe,KAIRhV,GACJ,CAER,CAGA,SAASmV,GAAoBrI,EAASC,EAAYC,GAC9C,IAAKF,EAAS,OAEd,MAEMsI,GAAapI,EAAWD,GADf,GAGf,IAAII,EAAe,EACf7Z,EAAeyZ,EAgBnB5b,uBAdA,SAASkkB,IACLlI,IACA7Z,GAAgB8hB,EAEZjI,GAVO,IAYPL,EAAQ/Y,YAAcF,KAAKG,MAAMV,GACjCnC,sBAAsBkkB,IAGtBvI,EAAQ/Y,YAAciZ,CAE9B,GAGJ,CAGA,SAASsI,KAGL,GAFA5L,IAEItC,EAAY6H,YAcZ,YAbI7H,EAAYwL,mBAGZ2C,KACAtB,OAIAsB,KAEAnO,EAAYwL,mBAAoB,EAChCqB,OAMR,MAAM5F,EAAW,GAAGjb,EAAUyI,gBAAgBzI,EAAU0I,cAAc1I,EAAU2I,eAG1EyZ,EAAsBpiB,EAAU8I,cAAc7E,IAAIgX,IAAajb,EAAU+I,gBAAgB9E,IAAIgX,GAG7FU,EAAY3H,EAAYsB,aAAetB,EAAYgB,iBAAmBhB,EAAYnQ,MAAMkI,OAE9F,IAAKqW,GAAuBzG,EAAW,CAEnC,MAAM0G,EAAa,EACnB9jB,EAAasB,YAAYwiB,GAAY/gB,MAAK,KACtCghB,GAAoBtiB,EAAUyI,aAAczI,EAAU0I,WAAY1I,EAAU2I,cAAc,GAAM,GAChG,MAAMoY,EAAiBpmB,SAASI,eAAe,mBAAmBqe,wBAClE/B,EAAgB0J,EAAelkB,KAAOkkB,EAAe/I,MAAM,EAAG+I,EAAejkB,IAAMikB,EAAe9I,OAAO,EAAE,GAEnH,MAAYmK,GAERE,GAAoBtiB,EAAUyI,aAAczI,EAAU0I,WAAY1I,EAAU2I,cAAc,GAAM,GAGpGwY,GAAW,GACXlgB,IAGF,MAAMshB,EAAY5P,EAAcC,OAAO5S,EAAUyI,aAAe,GAC1D+Z,EAAmBxiB,EAAU2I,eAAiB4Z,EAAUzP,aACxD2P,EAAmBziB,EAAU0I,aAAe6Z,EAAU1P,QACtD+K,EAAa5e,YAAcA,YAAY8H,OAAS,eAGlD0b,GAEFE,GAAmB1iB,EAAUyI,aAAczI,EAAU0I,YAEjD+Z,EAEiB,YAAf7E,GAA4B5d,EAAUyI,aAAe,EAEvD1L,YAAW,KACTiD,EAAUyI,eACVzI,EAAU0I,WAAa,EACvB1I,EAAU2I,aAAe,EACzBoT,GAAW,EAAE,GACZ,MAGHhf,YAAW,IAAMkM,EAAW,yBAAyB,MAIvDlM,YAAW,KACTiD,EAAU0I,aACV1I,EAAU2I,aAAe,EACzBoT,GAAW,EAAE,GACZ,OAILhf,YAAW,KACTiD,EAAU2I,eACVoT,GAAW/b,EAAU2I,aAAa,GACjC,KAEP,CAEA,SAAS+Z,GAAmBpb,EAAOlD,GAEjC,MAAM2W,EAAcpI,EAAcC,OAAOtL,EAAM,GAAGwL,aAGlD,IAAIkI,EAAiB,EACrB,IAAK,IAAIhf,EAAI,EAAGA,GAAK+e,EAAa/e,IAAK,CACrC,MAAMif,EAAW,GAAG3T,KAASlD,KAAOpI,KAChCgE,EAAU+I,gBAAgB9E,IAAIgX,IAAajb,EAAU8I,cAAc7E,IAAIgX,KACzED,GAEJ,CAKIA,IAAmBD,GAErB4H,IAEJ,CAEA,SAASC,GAAkB3H,GACvB,MAAM5P,EAAS,GAAGrL,EAAUyI,gBAAgBzI,EAAU0I,aACjD1I,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,KAE3CqE,EAAU6I,eAAewC,GAAQvM,IAAIkB,EAAU2I,cAE/C,MAAMka,EAAqBlQ,EAAcC,OAAO5S,EAAUyI,aAAe,GACnE+Z,EAAmBxiB,EAAU2I,eAAiBka,EAAmB/P,aACjE2P,EAAmBziB,EAAU0I,aAAema,EAAmBhQ,QAGhE2P,EAEOC,EAEDziB,EAAUyI,aAAe,GAChCqa,KAFAH,KAFA3iB,EAAU6I,eAAewC,GAAQvM,IAAIkB,EAAU2I,aAAe,GAOlEiE,IACA9C,KAGA/M,YAAW,KACHylB,EACKC,EAGMziB,EAAUyI,aAAe,GAChCzI,EAAUyI,eACVzI,EAAU0I,WAAa,EACvBqT,GAAW,IAEX9S,EAAW,iBAPXjJ,EAAU0I,aACVqT,GAAW,IASfA,GAAW/b,EAAU2I,aAAe,EACxC,GACD,KACP,CAEA,SAASoa,KACL,MACMC,EADiBroB,SAASI,eAAe,mBACnBqe,wBACtB6J,EAAYD,EAAKnmB,KAAQmmB,EAAKhL,MAAQ,EACtCkL,EAAYF,EAAKlmB,IAAOkmB,EAAK/K,OAAS,EAE5C,IAAK,IAAIjc,EAAI,EAAGA,EAAI,EAAGA,IACnBe,YAAW,IAAMsa,EAAgB4L,EAAWC,IAAgB,IAAJlnB,EAEhE,CAGA,SAASmnB,GAAa3gB,EAAU+Q,GAC5B,MAAM6P,EAAkBC,iBAAiBnf,IAAI1B,IAAa,EACpDpC,EAAMqL,KAAKrL,MAEbA,EAAMgjB,EAAkB,IACxBzP,GAAiB,sBAAuB,WAI5CpV,EAAasB,aAAa0T,GAAMjS,MAAKgiB,IAC7BA,GACAtjB,EAAUyH,MAAMjF,KAChBoK,IACA3L,IAGAsiB,QAAQ/gB,GAGR6gB,iBAAiBjf,IAAI5B,EAAUpC,GAG/BuT,GAAiB,GAAGnR,eAAuB,YAE3CmR,GAAiB,mBAAoB,QACzC,IACDvF,OAAM/O,IAELsU,GAAiB,0BAA2B,QAAQ,GAE5D,CAIA,SAASjP,GAAoBiT,EAAYhd,SAASuD,MAExCyZ,aAAqB6L,cACvB7L,EAAYhd,SAASuD,MAIzB,IAAIqc,EAAoB5C,EAAUvc,cAAc,uBAC3Cmf,IACDA,EAAoB5f,SAASwB,cAAc,OAC3Coe,EAAkBvf,UAAU8D,IAAI,sBAChC6Y,EAAUxZ,YAAYoc,IAG1B,MAAMkJ,EAAe,IACd,0DACA,sDACA,0BAGP,SAASC,IACL,MAAMxnB,EAAWvB,SAASwB,cAAc,OACxCD,EAASlB,UAAU8D,IAAI,mBAEvB5C,EAASyE,YAAc8iB,EAAahjB,KAAK4T,MAAM5T,KAAK6T,SAAWmP,EAAa1X,SAE5E,MAAM4X,EAASljB,KAAK6T,SAAWqD,EAAUiM,YACnCC,EAASpjB,KAAK6T,SAAWqD,EAAUmM,aAEnCC,EAA+B,IAAhBtjB,KAAK6T,SAAX,IACT0P,EAA+B,IAAhBvjB,KAAK6T,SAAX,IAETkD,EAAO,GAAqB,GAAhB/W,KAAK6T,SACjB9Q,EAAU,GAAsB,GAAhB/C,KAAK6T,SACrB2P,EAAyB,IAAhBxjB,KAAK6T,SACdb,EAAW,EAAoB,GAAhBhT,KAAK6T,SAE1BpY,EAASU,MAAMuhB,QAAU,wDAEbwF,0BACDE,gCACMrM,4CACY/D,kDACdsQ,8BACAC,gCACExgB,6BACDygB,qDAIhB1J,EAAkBpc,YAAYjC,GAE9Ba,YAAW,KACPwd,EAAkBjC,YAAYpc,EAAS,GAC7B,IAAXuX,EACP,CAGA,IAAK,IAAIzX,EAAI,EAAGA,EAAI,GAAIA,IACpB0nB,IAIJ,MAAMQ,EAAmBvN,YAAY+M,EAAsB,KAG3DnJ,EAAkBpB,QAAQgL,WAAaD,CAC3C,CAeA,SAASpE,KACPxJ,IACA1C,GAAW,EAGX,MAAMwQ,EAAQzpB,SAASwB,cAAc,OACrCioB,EAAMhoB,UAAY,0BAClBgoB,EAAMxnB,MAAMiC,QAAU,OACtBulB,EAAMxnB,MAAMynB,eAAiB,SAC7BD,EAAMxnB,MAAM0nB,WAAa,SAGzB,IAAK,IAAItoB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMuoB,EAAS5pB,SAASwB,cAAc,OACtCooB,EAAOnoB,UAAY,eACnBmoB,EAAO3nB,MAAME,IAAS,GAAU,GAAJd,EAAT,IACnBuoB,EAAO3nB,MAAM4nB,eAAwB,GAAJxoB,EAAH,IAC9BooB,EAAMjmB,YAAYomB,EACpB,CAEA,MAAME,EAAe9pB,SAASwB,cAAc,OAC5CsoB,EAAaroB,UAAY,4BACzBqoB,EAAa7nB,MAAMib,SAAW,WAE9B4M,EAAajY,UAAY,+LAOzB4X,EAAMjmB,YAAYsmB,GAClB9pB,SAASuD,KAAKC,YAAYimB,GAG1BpkB,EAAUmT,iBAAmB,KAE7Ba,EAAc,CACZnQ,MAAO,GACP6K,aAAc,GACdwF,aAAc,EACdc,eAAgB,EAChBC,cAAc,EACdhB,mBAAmB,EACnBiB,OAAO,EACPC,gBAAgB,EAChBE,UAAW,EACXkB,qBAAsB,KACtBjB,aAAa,EACbgJ,kBAAmB,MAGrBvhB,YAAW,KACTqnB,EAAMppB,UAAU8D,IAAI,YACpB/B,YAAW,KACTpC,SAASuD,KAAKoa,YAAY8L,GAC1Bnb,EAAW,iBAAiB,GAC3B,IAAI,GACN,KACL,CAEA,SAASyb,KACLpO,IACA,MAAMqO,EAAUhqB,SAASS,cAAc,oBACzBupB,EAAQvpB,cAAc,kBAC9BuF,YAAc,aAEpBgkB,EAAQ/nB,MAAMiC,QAAU,OACxB9B,YAAW,KACP4nB,EAAQ3pB,UAAU8D,IAAI,OAAO,GAC9B,KAGHnE,SAASS,cAAc,mBAAmBsH,QAAU,KAChDiiB,EAAQ3pB,UAAU2K,OAAO,QACzB5I,YAAW,KACP4nB,EAAQ/nB,MAAMiC,QAAU,OACpBmV,EAAY6N,iBACZ+C,GAAiB5Q,EAAY6Q,cAAclc,aAAcqL,EAAY6Q,eAErE9I,GAAW/b,EAAU2I,aACzB,GACD,IAAK,EAIZhO,SAASS,cAAc,gBAAgBsH,QAAU,KAC7CiiB,EAAQ3pB,UAAU2K,OAAO,QACzB5I,YAAW,KACP4nB,EAAQ/nB,MAAMiC,QAAU,OACxBoK,EAAW,iBAAiB,GAC7B,IAAK,CAEhB,CAEA,SAASyN,GAAkBf,EAAea,GACtC,MAAMY,EAAgBzc,SAASS,cAAc,mBAC7C,IAAKgc,EAAe,OAEpB,MACM4I,EAAgB,EAAIvf,KAAKsX,GADhB,GAGfX,EAAcxa,MAAMqjB,gBAAkB,GAAGD,KAAiBA,IAE1D,MACM8E,EAAa9E,GAAiB,EADjBrK,EAAgBa,GAEnCY,EAAcxa,MAAMsjB,iBAAmB4E,EAGnCnP,GAAiB,GACjByB,EAAcpc,UAAU8D,IAAI,WAE5BsY,EAAcpc,UAAU2K,OAAO,UAEvC,CAEA,SAASof,KACL,IAAKlP,EAsBD,OApBA7V,EAAUyI,aAAe,EACzBzI,EAAU0I,WAAa,EACvB1I,EAAU2I,aAAe,EACzB3I,EAAUJ,MAAQ,EAClBI,EAAU4I,aAAe,CAAE,EAAK,IAAIjN,IAAI,CAAC,KACzCqE,EAAU6I,eAAiB,CAAE,MAAO,IAAIlN,IAAI,CAAC,KAC7CqE,EAAU8I,cAAgB,IAAInN,IAC9BqE,EAAU+I,gBAAkB,IAAIpN,IAGhCuD,aAAakb,WAAW,mBACxBlb,aAAakb,WAAW,sBAGxBnZ,IACA6I,KACAb,EAAW,uBAGX4M,GAAsB,GAK1B,MAAMmP,EAAcrqB,SAASS,cAAc,iBAC3C4pB,EAAYhqB,UAAU8D,IAAI,WAC1B+W,GAAsB,EAGtB9Y,YAAW,KACPioB,EAAYhqB,UAAU2K,OAAO,UAAU,GACxC,KAGCiQ,GACA1S,aAAa0S,GAGjBA,EAAuB7Y,YAAW,KAC9B8Y,GAAsB,CAAI,GAC3B,IACP,CAEA,SAASoP,KACL,MAAMC,EAAavqB,SAASwqB,gBACtBC,EAAmBzqB,SAASS,cAAc,gDAE5CT,SAAS0qB,kBACL1qB,SAAS2qB,gBACT3qB,SAAS2qB,iBAAiBhkB,MAAK,KACvB8jB,IACAA,EAAiBpqB,UAAU2K,OAAO,eAClCyf,EAAiBpqB,UAAU8D,IAAI,aACnC,IACDsP,OAAM3M,IAC6D,IAGnEyjB,EAAWK,mBAClBL,EAAWK,oBAAoBjkB,MAAK,KAC5B8jB,IACAA,EAAiBpqB,UAAU2K,OAAO,aAClCyf,EAAiBpqB,UAAU8D,IAAI,eACnC,IACDsP,OAAM3M,IAC+D,GAGhF,CAEA2B,eAAe/H,IACX,IACI,MAAMgE,MAAEA,SAAgBC,EAAeiH,KAAK2F,UAM5ClN,YAAc,KACdgK,IACAC,EAAW,kBAGXxE,GAEJ,CAAE,MAAOpF,GAET,CACJ,CAGA,SAASmmB,KAEL,GAAIxR,EAAYsK,mBAAqB,EACjC,OAGJ,MAAMmH,EAAgB9qB,SAASS,cAAc,oCAG7C4Y,EAAYsK,oBAG0B,IAAlCtK,EAAYsK,kBACZmH,EAAc7oB,MAAM4G,QAAU,MACW,IAAlCwQ,EAAYsK,oBACnBmH,EAAczqB,UAAU8D,IAAI,YAG5B2mB,EAAc/iB,QAAU,KAExB+iB,EAAclR,UAAW,GAI7BvU,EAAUJ,MAAQoU,EAAYyK,cAC9Bze,EAAUyH,MAAQ,IAAKuM,EAAY0K,eAGnCzd,IACA6I,KAGA8C,IAGAmP,GAAW/b,EAAU2I,aACzB,CAEA,SAAS+c,KACLzc,EAAW,eACf,CAEA,SAASmV,KAEL,MAAM7S,EAAerM,aAAaC,QAAQ,eAC1C,GAAIoM,EACA,IACI,MAAMC,EAAUxB,KAAKC,MAAMsB,GAC3B,GAAIC,EAAQlE,OAASkE,EAAQpH,KAAOoH,EAAQhE,MAExC,MAAO,CACHF,MAAOkE,EAAQlE,MACflD,IAAKoH,EAAQpH,IACboD,MAAOgE,EAAQhE,MAG3B,CAAE,MAAOlM,GAET,CAIJ,MAAMqqB,EAAiB1mB,SAASC,aAAaC,QAAQ,mBAUrD,IAAIymB,EAAgB,KAChBC,GAAe,EAGnB,MAAMC,EAAyB,CAACxe,EAAOlD,EAAKoD,KACxC,MAAMyT,EAAW,GAAG3T,KAASlD,KAAOoD,IAC9B6D,EAAS,GAAG/D,KAASlD,IAGrBsX,EAAa1b,EAAU6I,eAAewC,IAASpH,IAAIuD,GAGnDue,GAAkB/lB,EAAU+I,gBAAgB9E,IAAIgX,KAC/Bjb,EAAU8I,cAAc7E,IAAIgX,GAEnD,OAAOS,GAAcqK,CAAc,EAKvC,GAAIJ,GAAkBA,GAAkB,GAAKA,GAAkB,EAI3D,IAAK,IAAIvhB,EAAM,EAAGA,GAAOuO,EAAcC,OAAO+S,EAAe,GAAG9S,QAASzO,IAAO,CAC5E,MAAMiH,EAAS,GAAGsa,KAAkBvhB,IAGpC,IAAKpE,EAAU6I,eAAewC,GAAS,SAGvC,MAAMC,EAASH,MAAM5L,KAAKS,EAAU6I,eAAewC,IAASgO,MAAK,CAACR,EAAGmN,IAAMA,EAAInN,IAK/E,IAAK,IAAIrR,KAAS8D,EACd,GAAIwa,EAAuBH,EAAgBvhB,EAAKoD,GAAQ,CACpD,MAAMye,EAAOC,cAAcP,EAAgBvhB,EAAKoD,GAC5Cye,EAAOJ,IACPA,EAAcI,EACdL,EAAgB,CACZte,MAAOqe,EACPvhB,IAAKA,EACLoD,MAAOA,GAInB,CAER,CAIJ,IAAKoe,EAED,IAAK,IAAIte,EAAQ,EAAGA,GAAS,EAAGA,IAAS,CAErC,IAAKtH,EAAU4I,aAAatB,GAAQ,SAGpC,MAAM4D,EAAOC,MAAM5L,KAAKS,EAAU4I,aAAatB,IAAQ+R,MAAK,CAACR,EAAGmN,IAAMA,EAAInN,IAE1E,IAAK,IAAIzU,KAAO8G,EAAM,CAClB,MAAMG,EAAS,GAAG/D,KAASlD,IAG3B,IAAKpE,EAAU6I,eAAewC,GAAS,SAGvC,MAAMC,EAASH,MAAM5L,KAAKS,EAAU6I,eAAewC,IAASgO,MAAK,CAACR,EAAGmN,IAAMA,EAAInN,IAE/E,IAAK,IAAIrR,KAAS8D,EACd,GAAIwa,EAAuBxe,EAAOlD,EAAKoD,GAAQ,CAC3C,MAAMye,EAAOC,cAAc5e,EAAOlD,EAAKoD,GACnCye,EAAOJ,IACPA,EAAcI,EACdL,EAAgB,CACZte,MAAOA,EACPlD,IAAKA,EACLoD,MAAOA,GAInB,CAER,CACJ,CAIJ,OAAIoe,IAMAD,GAAkBA,GAAkB,GAAKA,GAAkB,EACpD,CACHre,MAAOqe,EACPvhB,IAAK,EACLoD,MAAO,GAKR,CACHF,MAAO,EACPlD,IAAK,EACLoD,MAAO,GAEf,CAEA,SAASmT,KAGL,IAAKwL,KAGD,YADAC,KAKJ,MAAM7a,EAAerM,aAAaC,QAAQ,eAC1C,GAAIoM,EACA,IACI,MAAMC,EAAUxB,KAAKC,MAAMsB,GAC3B,GAAIC,EAAQlE,OAASkE,EAAQpH,KAAOoH,EAAQhE,MASxC,OALAxH,EAAUyI,aAAe+C,EAAQlE,MACjCtH,EAAU0I,WAAa8C,EAAQpH,IAC/BpE,EAAU2I,aAAe6C,EAAQhE,WAEjCuU,GAAW/b,EAAU2I,aAG7B,CAAE,MAAOrN,GAET,CAUJygB,GAAW/b,EAAU2I,aACzB,CAEA,SAAS2Z,GAAoBhb,EAAOlD,EAAKoD,EAAO6e,EAAWC,GAEvD,MAAMrL,EAAW,GAAG3T,KAASlD,KAAOoD,IAGhC8e,GACAtmB,EAAU8I,cAAchK,IAAImc,GAC5Bjb,EAAU+I,gBAAgBjK,IAAImc,IACvBoL,GACPrmB,EAAU+I,gBAAgBjK,IAAImc,GAIlC,MAAM5P,EAAS,GAAG/D,KAASlD,IACtBpE,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,KAE3CqE,EAAU6I,eAAewC,GAAQvM,IAAI0I,GAGrC,MAAM+e,EAAY/e,EAAQ,EACpBgb,EAAmBhb,IAAUmL,EAAcC,OAAOtL,EAAM,GAAGwL,aAE5D0P,GACDxiB,EAAU6I,eAAewC,GAAQvM,IAAIynB,GAKrC/D,GAAoB6D,GACpB3D,GAAmBpb,EAAOlD,GAI9BwI,GACJ,CAEA,SAAS8V,GAAmBpb,EAAOlD,GAE/B,MAAM2W,EAAcpI,EAAcC,OAAOtL,EAAM,GAAGwL,aAGlD,IAAIkI,EAAiB,EACrB,IAAK,IAAIhf,EAAI,EAAGA,GAAK+e,EAAa/e,IAAK,CACnC,MAAMif,EAAW,GAAG3T,KAASlD,KAAOpI,KAChCgE,EAAU+I,gBAAgB9E,IAAIgX,IAAajb,EAAU8I,cAAc7E,IAAIgX,KACvED,GAER,CAKIA,IAAmBD,GAEnB4H,IAER,CAEA,SAASA,KACP,MAAMla,EAAezI,EAAUyI,aACzBC,EAAa1I,EAAU0I,WAGvB8d,EAAiB7T,EAAcC,OAAOnK,EAAa,GACzD,GAAK+d,EAML,GAAI9d,EAAa8d,EAAe3T,QAAS,CACvC,MAAM4T,EAAU/d,EAAa,EAGxB1I,EAAU4I,aAAaH,KAC1BzI,EAAU4I,aAAaH,GAAgB,IAAI9M,KAI7CqE,EAAU4I,aAAaH,GAAc3J,IAAI2nB,GAGzC,MAAMC,EAAa,GAAGje,KAAgBge,IACjCzmB,EAAU6I,eAAe6d,KAC5B1mB,EAAU6I,eAAe6d,GAAc,IAAI/qB,KAE7CqE,EAAU6I,eAAe6d,GAAY5nB,IAAI,GAKzC8N,GACF,MAAWnE,EAAe,GAExBqa,IAEJ,CAEA,SAASA,KACP,MAAMra,EAAezI,EAAUyI,aAG/B,GAAIA,EAAe,EAAG,CACpB,MAAMke,EAAYle,EAAe,EAG5BzI,EAAU4I,aAAa+d,KAC1B3mB,EAAU4I,aAAa+d,GAAa,IAAIhrB,KAI1CqE,EAAU4I,aAAa+d,GAAW7nB,IAAI,GAGtC,MAAM4nB,EAAa,GAAGC,MACjB3mB,EAAU6I,eAAe6d,KAC5B1mB,EAAU6I,eAAe6d,GAAc,IAAI/qB,KAE7CqE,EAAU6I,eAAe6d,GAAY5nB,IAAI,GAKzC8N,GACF,CACF,CAEA,SAAS+R,GAAenX,EAAOof,EAAUC,GAAY,GAEnD,MAAO7mB,EAAUmT,kBAAqB1H,KAAKrL,MAAQJ,EAAUmT,iBAAmB,MAAY0T,GAAY,CAEtG,MAAMC,EAAgBnsB,SAASwB,cAAc,OAC7C2qB,EAAc1qB,UAAY,0BAC1B0qB,EAAclqB,MAAMiC,QAAU,OAC9BioB,EAAclqB,MAAMynB,eAAiB,SACrCyC,EAAclqB,MAAM0nB,WAAa,SAGjC,IAAK,IAAItoB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMuoB,EAAS5pB,SAASwB,cAAc,OACtCooB,EAAOnoB,UAAY,eACnBmoB,EAAO3nB,MAAME,IAAO,GAAK,GAAKd,EAAK,IACnCuoB,EAAO3nB,MAAM4nB,eAAkB,GAAMxoB,EAAK,IAC1C8qB,EAAc3oB,YAAYomB,EAC5B,CAEA,MAAMwC,EAAkBpsB,SAASwB,cAAc,OAC/C4qB,EAAgB3qB,UAAY,4BAC5B2qB,EAAgBnqB,MAAMib,SAAW,WAGjC,MAAMmP,EAAcrsB,SAASwB,cAAc,OA2C3C,OA1CA6qB,EAAY5qB,UAAY,sBAGpB4X,GAAeA,EAAY6N,iBACzB7N,EAAYkB,MAEd6R,EAAgBva,UAAY,uHAM5Bua,EAAgBva,UAAY,+CACQhF,6EAMtCuf,EAAgBva,UAAY,uCACEhF,kDACIxH,EAAUyI,sBAAsBzI,EAAU0I,2BAI9Eqe,EAAgB5oB,YAAY6oB,GAC5BF,EAAc3oB,YAAY4oB,GAC1BpsB,SAASuD,KAAKC,YAAY2oB,GAG1B/pB,YAAW,KACTiqB,EAAYpqB,MAAMob,MAAQ,MAAM,GAC/B,SAGHjb,YAAW,KACT+pB,EAAc9rB,UAAU8D,IAAI,YAC5B/B,YAAW,KACT6pB,IACAjsB,SAASuD,KAAKoa,YAAYwO,EAAc,GACvC,IAAI,GACN,IAEL,CAGA,MAAMhL,EAAc,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAAI3S,SAAS3B,GACrDqU,EAAwB,KAAVrU,EAEpB,IAAIyf,EAAa,eACbnL,IAAamL,EAAa,cAC1BpL,IAAaoL,EAAa,cAE9B,MAAMH,EAAgBnsB,SAASwB,cAAc,OAC7C2qB,EAAc1qB,UAAY,mBAGtB4X,GAAeA,EAAY6N,iBACzB7N,EAAYkB,MAEd4R,EAActa,UAAY,4CACSya,qKAQnCH,EAActa,UAAY,4CACSya,4BACnBzf,yDAEVsU,EAAc,iDAAmD,6BAMzEgL,EAActa,UAAY,0CACSya,oBACzBpL,EAAc,cAAgB,SAAS7b,EAAUyI,oCACjDoT,EAAc,kBAAoB,SAAS7b,EAAU0I,cAAclB,qBACvEsU,EAAc,iDAAmD,eACjED,EAAc,4CAA8C,yBAKpElhB,SAASuD,KAAKC,YAAY2oB,GAC1B,MAAMI,EAAsBJ,EAAc1rB,cAAc,uBAUxD,GAPA0rB,EAAcK,aAGdL,EAAc9rB,UAAU8D,IAAI,QAC5BooB,EAAoBlsB,UAAU8D,IAAI,QAG9B+c,EAAa,CACf,MAAMuL,EAAiBN,EAAc1rB,cAAc,uBACnD,GAAIgsB,EAAgB,CAClBA,EAAexqB,MAAM8X,WAAa,oDAClC0S,EAAexqB,MAAMyqB,UAAY,gCAEjC,MAAMC,EAAUF,EAAehsB,cAAc,MACzCksB,IACFA,EAAQ1qB,MAAMiE,MAAQ,UACtBymB,EAAQ1qB,MAAM2qB,WAAa,gCAE/B,CACF,CAGAxqB,YAAW,KACT6pB,IACAE,EAAc9rB,UAAU2K,OAAO,QAC/BuhB,EAAoBlsB,UAAU2K,OAAO,QACrC5I,YAAW,KACTpC,SAASuD,KAAKoa,YAAYwO,EAAc,GACvC,IAAI,GACN,KACL,CA1sEAnsB,SAASC,iBAAiB,oBAAoB,WAIxCD,SAASI,eAAe,mBAAmBC,UAAUC,SAAS,YAEhEwf,KAIF1d,YAAW,KACLiC,aAAqC,uBAAtBA,YAAY+G,OAE7B0U,IACF,GACC,IACL,IAiHA9f,SAASC,iBAAiB,oBAAoB,KAC1CD,SAASgE,iBAAiB,gBAAgBC,SAAQ6D,IAC9CA,EAAO7H,iBAAiB,SAAUC,IAC9BA,EAAM2sB,iBACNve,EAAW,kBAAkB,EAAK,GACpC,GACJ,IAKNtO,SAASC,iBAAiB,oBAAoB,WACrCD,SAAS0qB,iBAGlB,IA4nBA1qB,SAASS,cAAc,oBAAoBoR,UAAY,SACjDlK,OAAOC,QAAQ8Q,GAAatG,KAAI,EAAE0a,EAAM9S,KAAY,6CAChB8S,4BAA+BA,oCAC7C9S,EAAOnB,iGAG5B8F,KAAK,QAquBZ7c,OAAOirB,OAAStkB,gBACNkB,KACNG,IACAxD,IAIAyD,GADsB/J,SAASI,eAAe,yBAGxC4J,IAAiB,EA4sB3B,MAAM8H,GAAsB,CACxBE,MAAO,GACPD,YAAa,KACbkE,SAAU,GAKd,SAAS+W,GAAkBla,EAAO,MAE9B,GAAIhB,GAAoBE,MAAMZ,QAAUU,GAAoBmE,SAExD,OADAxH,MAAM,6BAA6BqD,GAAoBmE,0BAChD,KAINnD,IACDA,EAAO,QAAQhB,GAAoBE,MAAMZ,OAAS,KAGtD,MAAM4D,EAAU,CACZjQ,GAAI+L,KAAKrL,MACTqN,KAAMA,EACN5J,MAAO,GACP6K,aAAc,IAKlB,OAFAjC,GAAoBE,MAAMtQ,KAAKsT,GAC/BiY,kBACOjY,CACX,CAIA,SAASkY,GAAcC,GACnB,MAAMC,EAAS,6CAA6CC,mBAAmBF,oBAE/E,OAAOG,MAAMF,GACRzmB,MAAK4mB,GAAYA,EAASC,SAC1B7mB,MAAKlC,GAEKA,EAAKgpB,aAAaC,gBAAkBP,IAE9C1Z,OAAM,IAAM0Z,GACrB,CAEA,SAASQ,GAAc1Y,GACnB,MAAM2Y,EAAe,aAAa3Y,IAClC,IAAI4Y,EAAQvpB,SAASC,aAAaC,QAAQopB,IAAiB,KAC3DC,IAEA,MAAMrX,EAASsX,oBAGf,OAFAvpB,aAAa6B,QAAQwnB,EAAcC,GAE/BA,GAASrX,EAAOL,UAEhB4X,GAAiB9Y,IACV,GAGJuB,EAAOL,SAAW0X,CAC7B,CAMA,SAASG,KACL,MAAM5a,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cAE3CgT,EAAU/S,UAAU8Z,OAAO,UAC3B9G,EAAWhT,UAAU8Z,OAAO,SAChC,CAGA,SAAS8T,GAAuBC,GAExB7pB,cACAyN,GAAoBE,MAAMtQ,KAAK,CAC3BqD,GAAImpB,EAAWC,SACfC,WAAYF,EAAWnpB,GACvB+N,KAAMob,EAAWpb,KACjB5J,MAAOglB,EAAWhlB,MAClB6K,aAAcma,EAAWna,aACzBE,WAAW,EACXE,UAAW+Z,EAAW/Z,YAI1B8Y,kBAER,CAGAxkB,eAAe4lB,GAAepZ,EAAQI,GAClC,IAKI,IADa3B,GAAmB1B,MAAMsD,MAAKR,GAAKwH,OAAOxH,EAAE/P,MAAQuX,OAAOrH,KAGpE,OAAO,EAIX,MAAMxQ,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,gBACLwI,OAAO,CACJV,QAAS2I,EACTvC,KAAM,cACN5J,MAAO,CAAC,QACR6K,aAAc,CAAC,QACfE,WAAW,IAGnB,GAAIvP,EAAO,CAIP,MAAQD,KAAM6pB,EAAQ5pB,MAAO6pB,SAAsB5pB,EAC9CC,KAAK,6BACLC,OAAO,cACPC,GAAG,eAAgB,UAQxB,OAAO,CACX,CAGA,OAAO,CACX,CAAE,MAAOJ,GAEL,OAAO,CACX,CACJ,CAEA+D,eAAe+lB,GAAkBvZ,EAAQI,GACrC,IAGI,IAAKhR,YAED,OAAO,EAIX,MAAMmQ,EAAOd,GAAmB1B,MAAMsD,MAAKR,GAAKwH,OAAOxH,EAAE/P,MAAQuX,OAAOrH,KAExE,IAAKT,EAED,OAAO,EAMX,MAAM/P,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,gBACLwI,OAAO,CACJV,QAAS2I,EACTvC,KAAM,GAAG0B,EAAK1B,mBAAmBzO,YAAY8G,eAAeD,UAAY,UACxEhC,MAAOsL,EAAKtL,OAAS,GACrB6K,aAAcS,EAAKT,cAAgB,GACnCE,WAAW,EACXwa,YAAa,CAACpZ,GACdlB,UAAW9P,YAAYU,GACvBsP,YAAY,IAAIvD,MAAO4d,cACvBviB,OAAQ,WAGhB,OAAIzH,IAMJsU,GAAiB,4BAA6B,WAC9C2V,MACO,EACX,CAAE,MAAOjqB,GAGL,OADAsU,GAAiB,qBAAsB,UAChC,CACX,CACJ,CAEA,SAAS4V,GAAiBrgB,GACtB,MAAMsgB,EAAQ7uB,SAASwB,cAAc,OACrCqtB,EAAMptB,UAAY,gBAClBotB,EAAM7oB,YAAcuI,EACpBvO,SAASuD,KAAKC,YAAYqrB,GAE1BzsB,YAAW,KACPysB,EAAMxuB,UAAU8D,IAAI,QACpB/B,YAAW,IAAMpC,SAASuD,KAAKoa,YAAYkR,IAAQ,IAAI,GACxD,IACP,CAEA,SAASC,GAAevgB,GACpB,MAAMsgB,EAAQ7uB,SAASwB,cAAc,OACrCqtB,EAAMptB,UAAY,cAClBotB,EAAM7oB,YAAcuI,EACpBvO,SAASuD,KAAKC,YAAYqrB,GAE1BzsB,YAAW,KACPysB,EAAMxuB,UAAU8D,IAAI,QACpB/B,YAAW,IAAMpC,SAASuD,KAAKoa,YAAYkR,IAAQ,IAAI,GACxD,IACP,CAEA,SAASF,KACL,MAAMnkB,EAAQxK,SAASS,cAAc,gBAC/BsuB,EAAW/uB,SAASS,cAAc,mBAEpC+J,GAAOA,EAAMQ,SACb+jB,GAAUA,EAAS/jB,QAC3B,CAEAvC,eAAeumB,KACX,IAAK3qB,YAAa,MAAO,GAEzB,MAAMI,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,gBACLC,OAAO,KACPgP,GAAG,mBAAmBxP,YAAYU,yBAEvC,OAAIL,EAEO,GAGJD,EAAK2N,KAAIoC,IAAQ,IACjBA,EACHR,UAAU,KAElB,CAGA,SAASib,GAAeha,GAIpB,MAAMia,EAAgBlvB,SAASS,cAAc,gBACvC0uB,EAAmBnvB,SAASS,cAAc,mBAC5CyuB,GAAeA,EAAclkB,SAC7BmkB,GAAkBA,EAAiBnkB,SAGvC,MAAM+jB,EAAW/uB,SAASwB,cAAc,OACxCutB,EAASttB,UAAY,iBACrBstB,EAAShnB,QAAU4mB,GACnB3uB,SAASuD,KAAKC,YAAYurB,GAG1B,MAAMvkB,EAAQxK,SAASwB,cAAc,OACrCgJ,EAAM/I,UAAY,cAClB+I,EAAMqH,UAAY,uNAKlB7R,SAASuD,KAAKC,YAAYgH,GAG1B,MAAM4kB,EAAY5kB,EAAM/J,cAAc,eAGtCkE,EAAeC,KAAK,iBACfC,OAAO,gBACPwqB,IAAI,KAAMhrB,YAAYU,IACtB4B,MAAK,EAAGlC,OAAMC,YACPA,EAEA0qB,EAAUvd,UAAY,gEAIrBpN,GAAwB,IAAhBA,EAAK2M,QAKlBge,EAAUvd,UAAYpN,EAAK2N,KAAIlG,GAAQ,wEAEvBA,EAAKhB,UAAY,yHACoDgB,EAAKnH,sGAIvF4Z,KAAK,IAGRnU,EAAMxG,iBAAiB,wBAAwBC,SAAQqE,IACnDA,EAAIP,QAAUU,UACV,MAAMoH,EAASvH,EAAIgnB,aAAa,gBAChChnB,EAAIsR,UAAW,EACf,MAAM2V,EAAejnB,EAAIuJ,UACzBvJ,EAAIuJ,UAAY,0DAEM2c,GAAkBvZ,EAAQpF,KAG5CvH,EAAIsR,UAAW,EACftR,EAAIuJ,UAAY0d,EACpB,CACH,KA3BDH,EAAUvd,UAAY,oEA4BxB,GAEd,CAGA,SAAS8c,KACL,MAAMnkB,EAAQxK,SAASS,cAAc,gBAC/BsuB,EAAW/uB,SAASS,cAAc,mBAEpC+J,GAAOA,EAAMQ,SACb+jB,GAAUA,EAAS/jB,QAC3B,CAGA,SAASwkB,GAAiCC,GACtC,IAAKA,GAAoBpW,EAAYsB,YAAa,CAE9CtV,EAAUJ,OAAS,EACnBuhB,GAAW,GAGX,MAAM9V,EAAS,GAAGrL,EAAUyI,gBAAgBzI,EAAU0I,aACjD1I,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,KAE3CqE,EAAU6I,eAAewC,GAAQvM,IAAIkB,EAAU2I,cAE/C,MAAMka,EAAqBlQ,EAAcC,OAAO5S,EAAUyI,aAAe,GACnE+Z,EAAmBxiB,EAAU2I,eAAiBka,EAAmB/P,aACjE2P,EAAmBziB,EAAU0I,aAAema,EAAmBhQ,QAEhE2P,EAEOC,EAIRxZ,EAAW,iBAHXjJ,EAAU0I,aACVqT,GAAW,IAHXA,GAAW/b,EAAU2I,aAAe,GAQxCiE,GACJ,MACImP,GAAW/b,EAAU2I,aAE7B,CAIA,SAAS0hB,KACL,MAAMC,EAAS3vB,SAASS,cAAc,mBAClCkvB,IACAA,EAAOtvB,UAAU2K,OAAO,QACxB5I,YAAW,IAAMutB,EAAO3kB,UAAU,KAE1C,CAEA,SAASoY,GAAkB6I,GAEzB,IAAK5nB,YAYH,OAVAmb,UAEApd,YAAW,KACT,MAAMgR,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cACvCgT,GAAaC,IACfD,EAAU/S,UAAU8D,IAAI,UACxBkP,EAAWhT,UAAU2K,OAAO,UAC9B,GACC,KAKL,MAAM6S,EAAI,CACRpG,OAAQzX,SAASS,cAAc,oBAAoBsE,GACnD4H,MAAOtH,EAAUyI,aACjBrE,IAAKpE,EAAU0I,WACflB,MAAOxH,EAAU2I,cAGnB6P,EAAEpG,QAAUlT,aAAa6B,QAAQ,cAAeiJ,KAAKE,UAAUsO,IAC/DxZ,aAAeE,aAAakb,WAAW,oBAAoBpb,YAAYU,MACvEuJ,EAAW,iBACb,CAGA,SAASohB,KACL,MAAMC,EAAS3vB,SAASS,cAAc,mBAChCupB,EAAUhqB,SAASS,cAAc,mBAEnCkvB,IACAA,EAAOtvB,UAAU2K,OAAO,QACxB5I,YAAW,IAAMutB,EAAO3kB,UAAU,MAGlCgf,GACAA,EAAQhf,QAEhB,CAEA,SAAS4kB,KACP3W,GAAW,EACX0C,IAGA3b,SAASgE,iBAAiB,uBAAuBC,SAAQ4rB,IACnDA,GAAOA,EAAM7kB,QAAQ,IAG3B,MAAM8kB,EAAgB9vB,SAASI,eAAe,kBAC1C0vB,GAAiBA,EAAczvB,UAAUC,SAAS,YACpDwvB,EAAczvB,UAAU2K,OAAO,WAIjCsD,EAAW,iBACb,CA2BA,SAASyhB,KACLL,KACAM,mBACJ,CAGAvnB,eAAewnB,KACX,IAAK5rB,YACD,MAAO,CACH6rB,YAAY,EACZC,eAAgB,CACZ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,IAERC,sBAAuB,CACnB,GAAG,IAMf,MAAM3rB,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,2BACPC,GAAG,KAAMT,YAAYU,IACrBC,SAEL,OAAIN,EAAc,KAGdD,EAAK4rB,iBAAmC,SAAhB5rB,EAAK0H,QAAqC,YAAhB1H,EAAK0H,OAChD,CACH+jB,YAAY,EACZC,eAAgB,CACZ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,IAERC,sBAAuB,CACnB,GAAG,IAMK,YAAhB3rB,EAAK0H,OACE,CACH+jB,YAAY,EACZC,eAAgB,CACZ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,GACJ,EAAG,CAAC,IAERC,sBAAuB,CACnB,GAAG,SAXf,CAeJ,CAEA,SAASpC,KACL,MAAM5a,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cAE3CgT,EAAU/S,UAAU8Z,OAAO,UAC3B9G,EAAWhT,UAAU8Z,OAAO,SAChC,CAGA,SAAS+K,GAAc5T,GAEnBjM,EAAUyI,aAAewD,EACzB2O,KAGA7d,YAAW,KACP,MAAMkuB,EAAetwB,SAASS,cAAc,8BAA8B6Q,OACtEgf,IAAiBA,EAAajwB,UAAUC,SAAS,SACjDgwB,EAAajwB,UAAU8D,IAAI,OAC/B,GACD,IACP,CAEA,SAAS+e,GAAwB+I,GAE7B,GAAInqB,OAAOyuB,yBAEP,YADItE,GAAUA,KAKlBnqB,OAAOyuB,0BAA2B,EAGlC,MAAMC,EAAmBxwB,SAASwB,cAAc,OAChDgvB,EAAiB/uB,UAAY,yBAC7B+uB,EAAiBvuB,MAAMuhB,QAAU,sXAiBjCgN,EAAiB3e,UAAY,8iHAkG7B7R,SAASuD,KAAKC,YAAYgtB,GAG1B,MAAMC,EAAezwB,SAASwB,cAAc,SAC5CivB,EAAazqB,YAAc,0gBAgB3BhG,SAAS0wB,KAAKltB,YAAYitB,GAG1B,MAAME,EAAaH,EAAiB/vB,cAAc,uBAC5CmwB,EAAeJ,EAAiB/vB,cAAc,sBAEpDkwB,EAAW1wB,iBAAiB,SAAS,WAEjCD,SAASuD,KAAKoa,YAAY6S,GACtBC,EAAaI,YACbJ,EAAaI,WAAWlT,YAAY8S,GAIpCxE,GACAA,GAER,IAEA2E,EAAa3wB,iBAAiB,SAAS,WAEnCD,SAASuD,KAAKoa,YAAY6S,GACtBC,EAAaI,YACbJ,EAAaI,WAAWlT,YAAY8S,GAIxCniB,EAAW,kBAGXlM,YAAW,WACP,MAAM0uB,EAAY9wB,SAASI,eAAe,aAC1C,GAAI0wB,EAAW,CACXA,EAAUzwB,UAAU8D,IAAI,QAGxB,MAAMkP,EAAarT,SAASI,eAAe,cACrCgT,EAAYpT,SAASI,eAAe,aACtCiT,GAAcD,IACdC,EAAWhT,UAAU2K,OAAO,UAC5BoI,EAAU/S,UAAU8D,IAAI,UAEhC,CACJ,GAAG,IACP,GACJ,CAIA,SAAS4sB,KACL,MAAMC,EAAUhxB,SAASI,eAAe,WAAW6wB,QAC7CC,EAAmBlxB,SAASI,eAAe,oBAC3C+wB,EAAmBnxB,SAASI,eAAe,eAEjD8wB,EAAiBjvB,MAAMiC,QAAU8sB,EAAU,OAAS,QACpDG,EAAiBC,UAAYJ,CACjC,CAEA,SAASK,KAED9sB,aAAaC,QAAQ,oBAAoBH,YAAYU,MACrD6qB,KAIJthB,EAAW,iBACf,CAxUAtO,SAASC,iBAAiB,oBAAoB,WAEzB,IAAIqxB,kBAAiBC,IAClCA,EAAUttB,SAAQutB,IACVA,EAASC,WAAWrgB,QACpBogB,EAASC,WAAWxtB,SAAQytB,IACxB,GAAsB,IAAlBA,EAAKC,SAAgB,CACND,EAAK1tB,iBAAiB,aAC9BC,SAAQ2tB,IACXA,EAAM3xB,iBAAiB,SAAS,SAASC,GACrCA,EAAM2xB,kBAENvjB,EAAW,iBACf,GAAE,GAEV,IAER,GACF,IAGGwjB,QAAQ9xB,SAASuD,KAAM,CAAEwuB,WAAW,EAAMC,SAAS,GAChE,IAoTA,MAAMC,GACF,WAAAC,CAAYC,EAAc,IAAKC,EAAa,KACxC9wB,KAAK+wB,SAAW,IAAIlpB,GACxB,CAEA,UAAAmpB,CAAWziB,GACP,MAAMpK,EAAMqL,KAAKrL,MAEX8sB,GADejxB,KAAK+wB,SAAS9oB,IAAIsG,IAAW,IACdqF,QAAOsd,GAAQ/sB,EAAM+sB,EAAOlxB,KAAK8wB,aAErE,QAAIG,EAAenhB,QAAU9P,KAAK6wB,eAIlCI,EAAe7wB,KAAK+D,GACpBnE,KAAK+wB,SAAS5oB,IAAIoG,EAAQ0iB,IACnB,EACX,EAGJ,SAASE,GAAcC,GACnB,OAAOA,EACF7b,QAAQ,QAAS,IACjB8b,OACA/a,MAAM,EAAG,IAClB,CAGA,MAAMgb,GAAiB,CACnBC,gBAAiB,KACjBC,aAAchiB,KAAKrL,MAEnB,IAAArE,GACIpB,SAASC,iBAAiB,SAAS,IAAMqB,KAAKyxB,mBAC9C/yB,SAASC,iBAAiB,YAAY,IAAMqB,KAAKyxB,mBACjD/W,aAAY,IAAM1a,KAAK0xB,gBAAgB,IAC3C,EAEA,cAAAD,GACIzxB,KAAKwxB,aAAehiB,KAAKrL,KAC7B,EAEA,kBAAMutB,GACEliB,KAAKrL,MAAQnE,KAAKwxB,aAAexxB,KAAKuxB,wBAChCnyB,IACNuyB,YAAYC,KAAK,UAAW,CACxBlc,MAAO,kBACPzI,QAAS,wBAGrB,GAGE4kB,GAAgB,CAClBC,qBAAqBvtB,IAIV,IACAA,EACHZ,MAAOa,KAAKC,IAAIF,EAASZ,MALL,KAMpB6H,MAAOnF,OAAOwK,YACVxK,OAAOC,QAAQ/B,EAASiH,OAAOsF,KAAI,EAAEihB,EAAKlsB,KACtC,CAACksB,EAAKvtB,KAAKC,IAAIoB,EAPH,WAa5BmsB,mBAAmB9e,IACR,IACAA,EACHtL,MAAOsL,EAAKtL,MAAM0O,MAAM,EAAG,KAAMxF,IAAIqgB,IACrC1e,aAAcS,EAAKT,aAAa6D,MAAM,EAAG,KAAMxF,IAAIqgB,OAK/D,SAASc,GAAWC,GAChB,OAAOA,EACF3c,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,SACvB,CAEA,SAAS4c,GAAejf,GACpB,MAAO,sDAEO+e,GAAW/e,EAAK1B,8BACjBygB,GAAW/e,EAAKmE,wCAGjC,CAEA,MAAM+a,GAAe,CACjB,cAAMC,CAASjvB,EAAOmM,GACdxM,mBACMM,EACDC,KAAK,cACLwI,OAAO,CAAC,CACLV,QAASrI,YAAYU,GACrBL,MAAOA,EAAM6J,QACbqlB,MAAOlvB,EAAMkvB,MACb/iB,UACAxJ,UAAW,IAAIyJ,OAI/B,EAEA,WAAA+iB,CAAYnvB,EAAOmM,GACfvP,KAAKqyB,SAASjvB,EAAOmM,GACrBoiB,YAAYC,KAAK,QAAS,CACtBlc,MAAO,QACPzI,QAAS,2CAEjB,GAGJ,SAASulB,KACL,MAAM9C,EAAUhxB,SAASI,eAAe,WAAW6wB,QAC7C8C,EAAgB/zB,SAASI,eAAe,qBACxC4zB,EAAeh0B,SAASI,eAAe,oBAGvC6zB,EAAeF,EAAc/vB,iBAAiB,SAC9CkwB,EAAcF,EAAahwB,iBAAiB,SAE9CgtB,GACA+C,EAAc9xB,MAAMiC,QAAU,OAC9B8vB,EAAa/xB,MAAMiC,QAAU,QAG7B+vB,EAAahwB,SAAQyuB,GAASA,EAAMtB,UAAW,IAC/C8C,EAAYjwB,SAAQyuB,GAASA,EAAMtB,UAAW,MAE9C2C,EAAc9xB,MAAMiC,QAAU,QAC9B8vB,EAAa/xB,MAAMiC,QAAU,OAG7B+vB,EAAahwB,SAAQyuB,GAASA,EAAMtB,UAAW,IAC/C8C,EAAYjwB,SAAQyuB,GAASA,EAAMtB,UAAW,IAEtD,CAGA,SAAS+C,KAEP,MAAMtE,EAAQ7vB,SAASS,cAAc,uBACjCovB,IACFA,EAAM5tB,MAAM4G,QAAU,IACtBgnB,EAAM5tB,MAAMmyB,UAAY,mCACxBhyB,YAAW,KACLytB,EAAMgB,YACRhB,EAAMgB,WAAWlT,YAAYkS,EAC/B,GACC,MAGL,MAAMC,EAAgB9vB,SAASI,eAAe,kBAC1C0vB,GACFA,EAAczvB,UAAU2K,OAAO,WAGjC,MAAMqpB,EAAcr0B,SAASI,eAAe,eACxCi0B,GACFA,EAAYC,QAId/vB,aAAakb,WAAW,eAGxBmQ,KACAthB,EAAW,iBAGb,CAKA,SAASimB,KACP,MAAMC,EAASx0B,SAASgE,iBAAiB,uBACnB,IAAlBwwB,EAAOpjB,QAKXojB,EAAOvwB,SAAQ,CAAC4rB,EAAOjb,KAQnB,GAEN,CAWA,SAAS6f,KACL7E,IACJ,CAGA,SAASzf,GAAwBhE,GAC7B,MAAMuoB,EAAqB10B,SAASS,cAAc,yBAC5Ck0B,EAAe30B,SAASI,eAAe,gBAE7C,GAAIs0B,GAAsBC,EAGxB,GAFAA,EAAalzB,UAAY,eAErB4C,YAAa,CAEf,OADAqwB,EAAmBzyB,MAAMiC,QAAU,QAC3BiI,GACN,IAAK,OACL,QACEwoB,EAAat0B,UAAU8D,IAAI,SAC3BwwB,EAAa3uB,YAAc,gBAC3B,MACF,IAAK,UACH2uB,EAAat0B,UAAU8D,IAAI,WAC3BwwB,EAAa3uB,YAAc,kBAC3B,MACF,IAAK,UACH2uB,EAAat0B,UAAU8D,IAAI,WAC3BwwB,EAAa3uB,YAAc,UAI/B4uB,KAGA50B,SAAS60B,cAAc,IAAIC,YAAY,oBAAqB,CAC1DC,OAAQ,CAAE5oB,OAAQA,KAEtB,MACEwoB,EAAat0B,UAAU8D,IAAI,gBAC3BwwB,EAAa3uB,YAAc,eAC3B0uB,EAAmBzyB,MAAMiC,QAAU,OAGnClE,SAAS60B,cAAc,IAAIC,YAAY,oBAAqB,CAC1DC,OAAQ,CAAE5oB,OAAQ,kBAM1B,CAEF1D,eAAemsB,KACb,IACE,IAAKvwB,YAAa,OAElB,MAAQI,KAAMuwB,SAAmBrwB,EAC9BC,KAAK,iBACLC,OAAO,SACPC,GAAG,UAAWT,YAAYU,IAC1BC,UAEKP,KAAMwwB,SAAoBtwB,EAC/BC,KAAK,gBACLC,OAAO,0BACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAECgwB,IACFh1B,SAASI,eAAe,cAAc4F,YAAcgvB,EAAS/vB,OAAS,GAGpEgwB,IACFj1B,SAASI,eAAe,cAAc4F,YAAcivB,EAAUpuB,wBAA0B,GAI1FsI,KACA3I,EAAaD,eAAe0uB,GAAWpuB,wBAA0B,EACnE,CAAE,MAAOC,GAET,CACF,CAGA,SAAS+Q,KACL,IAAKxT,YAAa,OAyBlB,OAvBqBM,EAChBuwB,QAAQ,eAAiB7wB,YAAYU,IACrCowB,GAAG,mBAAoB,CACpBj1B,MAAO,SACPk1B,OAAQ,SACRzmB,MAAO,gBACPuG,OAAQ,SAAS7Q,YAAYU,OAEjCswB,IAEQA,EAAQC,KAAOD,EAAQC,IAAInpB,SAC3BgE,GAAwBklB,EAAQC,IAAInpB,QAGT,YAAvBkpB,EAAQC,IAAInpB,QACZopB,KAER,IAEHC,WAAUrpB,IACoC,GAIvD,CAEA,SAAS4T,KACL,MAAMnP,EAAerM,aAAaC,QAAQ,eAC1C,GAAIoM,EAAc,CACd,MAAMC,EAAUxB,KAAKC,MAAMsB,GAQ3B,OAPAvL,EAAUyI,aAAe+C,EAAQlE,OAAS,EAC1CtH,EAAU0I,WAAa8C,EAAQpH,KAAO,EACtCpE,EAAU2I,aAAe6C,EAAQhE,MAGjCtI,aAAakb,WAAW,gBAEjB,CACX,CACA,OAAO,CACX,CAEA,SAASgW,KACL,IAAKpxB,YAAa,OAAO,EAEzB,MAAMqxB,EAAsBnxB,aAAaC,QAAQ,oBAAoBH,YAAYU,MAC3E4wB,EAAmC,YAAvBtxB,YAAY8H,OACxBypB,EAAmC,YAAvBvxB,YAAY8H,OAE9B,OAAOupB,GAAuBC,GAAaC,CAC/C,CAEA,SAASC,KAEL5jB,IACAnQ,OAAO4U,SAASiJ,QAAO,EAC3B,CAEA,SAASmW,KAIDh0B,OAAO4U,WACP5U,OAAO4U,SAASqf,KAAOj0B,OAAO4U,SAASqf,MAGvCj0B,OAAO4U,SAASiJ,QAChB7d,OAAO4U,SAASiJ,QAAO,GAI3B7d,OAAO4U,SAASG,QAAQ/U,OAAO4U,SAASO,SAC5C,CAUAxO,eAAeutB,KACX1nB,EAAW,sBACX,MAAM2nB,EAAmBj2B,SAASI,eAAe,uBAEjD,IACIqI,eAAeytB,IACX,MAAMzxB,KAAEA,EAAIC,MAAEA,SAAgBC,EAAeC,KAAK,sBAAsBC,OAAO,KAE/E,GAAIH,EAEA,OAIJ,MAAMyxB,EAAiBF,EAAiBG,SAClCC,EAAY,CAAC,EAEnB7lB,MAAM5L,KAAKuxB,GAAgBlyB,SAAQqyB,IAC/B,MAAMprB,EAAWorB,EAAM71B,cAAc,mBAAmB+d,QAAQtT,SAChEmrB,EAAUnrB,GAAYorB,EAAM7X,uBAAuB,IAIvDwX,EAAiBpkB,UAAYpN,EAAK2N,KAAI,CAACmkB,EAAQ3hB,IAAU,mDACrB2hB,EAAOrrB,WAAa7G,aAAa8G,eAAeD,SAAW,MAAQ,MAAM0J,EAAQ,EAAI,QAAQA,EAAM,IAAM,wCACvHA,EAAM,iCACb2hB,EAAOC,8DACQD,EAAOrrB,aAAaqrB,EAAOrrB,UAAY,+CACtDqrB,EAAO/oB,0DACP+oB,EAAOE,oEAEnB9X,KAAK,IAGR,MAAM+X,EAAaT,EAAiBG,SAEpC5lB,MAAM5L,KAAK8xB,GAAYzyB,SAAQqyB,IAC3B,MAAMprB,EAAWorB,EAAM71B,cAAc,mBAAmB+d,QAAQtT,SAEhE,GAAImrB,EAAUnrB,GAAW,CACrB,MAAMyrB,EAASN,EAAUnrB,GACnB0rB,EAASN,EAAM7X,wBACfoY,EAAQF,EAAOx0B,IAAMy0B,EAAOz0B,IAE9B00B,EAAQ,EACRP,EAAMj2B,UAAU8D,IAAI,aACb0yB,EAAQ,GACfP,EAAMj2B,UAAU8D,IAAI,eAGxBmyB,EAAMr2B,iBAAiB,gBAAgB,KACnCq2B,EAAMj2B,UAAU2K,OAAO,YAAa,cAAc,GACnD,CAAEuM,MAAM,GACf,IAER,OAGM2e,IAGN,MAAMY,EAAe9a,YAAYka,EAAmB,KAG9Ca,EAAoB/2B,SAASI,eAAe,sBAC9C22B,IACIA,EAAkBvY,QAAQsY,cAC1Bta,cAAclY,SAASyyB,EAAkBvY,QAAQsY,eAErDC,EAAkBvY,QAAQsY,aAAeA,EAGjD,CAAE,MAAOE,GAELf,EAAiBpkB,UAAY,iCAAiCmlB,EAAczoB,aAChF,CACJ,CAEA,SAASmR,KACL,MAAMqX,EAAoB/2B,SAASI,eAAe,sBAC9C22B,IAEIA,EAAkBvY,QAAQ0W,UAC1BvwB,EAAesyB,cAAcF,EAAkBvY,QAAQ0W,gBAChD6B,EAAkBvY,QAAQ0W,SAGjC6B,EAAkBvY,QAAQsY,eAC1Bta,cAAclY,SAASyyB,EAAkBvY,QAAQsY,sBAC1CC,EAAkBvY,QAAQsY,cAG7C,CAEAruB,eAAeyuB,GAAkBC,EAAWC,EAAUC,GAClD,GAAIhzB,aAAe,YAAcA,YAAY8H,OACzC,IAEI,MAAQ1H,KAAM6yB,EAAc5yB,MAAO6yB,SACzB5yB,EAAeC,KAAK,gBACrBC,OAAO,KACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAET,GAAIuyB,GAAkC,aAApBA,EAAW/qB,KAAqB,MAAM+qB,EAGxD,MACMC,EADc,IAAI,IAAIx2B,IAAIqY,EAAYnQ,QACbkI,OAGzBqmB,EAAc,CAChB/qB,QAASrI,YAAYU,GACrByI,wBAAyB8pB,GAAc9pB,wBAA0B,GAAK,EACtE3G,wBAAyBywB,GAAczwB,wBAA0B,GAAK2wB,EACtEE,cAAc,IAAI5mB,MAAO4d,gBAIrBhqB,MAAOizB,SACLhzB,EAAeC,KAAK,gBACrBqH,OAAOwrB,EAAa,CAAEprB,WAAY,UAAWurB,UAAW,YAEjE,GAAID,EAAa,MAAMA,QAGjBnxB,EAAaO,YAAYywB,EAEnC,CAAE,MAAO9yB,GAET,CAER,CAEA+D,eAAekB,KAGX,IACI,MAAQlF,MAAMozB,QAAEA,UAAoBlzB,EAAeiH,KAAKksB,aAExD,GAAID,EAAS,CAETxzB,YAAcwzB,EAAQ3rB,KAGtB,MAAQzH,KAAMszB,SAAsBpzB,EAC/BC,KAAK,iBACLC,OAAO,UACPC,GAAG,KAAMT,YAAYU,IACrBC,SAcL,OAZI+yB,IACA1zB,YAAY8H,OAAS4rB,EAAY5rB,OACjCgE,GAAwB4nB,EAAY5rB,SAIxC2L,KAGAzJ,IACAgC,MAEO,CACX,CAMI,OAJAhM,YAAc,KACdgK,IACA8B,GAAwB,MACxBE,MACO,CAEf,CAAE,MAAO3L,GAML,OAJAL,YAAc,KACdgK,IACA8B,GAAwB,MACxBE,MACO,CACX,CACJ,CA+BA,SAASpG,KAEL,MAAM+tB,EAAmBhc,aAAY,KAC7B3W,EAAUyI,cAAgBzI,EAAU0I,YAAc1I,EAAU2I,cAE5DiE,GACJ,GACD,KAUH,OAPAnQ,OAAO7B,iBAAiB,gBAAgB,KAChCoF,EAAUyI,cAAgBzI,EAAU0I,YAAc1I,EAAU2I,cAE5DiE,GACJ,IAGG+lB,CACX,CAOA,SAASzC,KAEL,MAAM0C,EAAqBj4B,SAASwB,cAAc,OAClDy2B,EAAmBx2B,UAAY,sBAE/Bw2B,EAAmBpmB,UAAY,qWAW/B7R,SAASuD,KAAKC,YAAYy0B,GAG1B71B,YAAW,KACP61B,EAAmB53B,UAAU8D,IAAI,OAAO,GACzC,IACP,CAEA,SAAS+zB,KACP,MAAMv3B,EAAIX,SAASS,cAAc,wBACjC,GAAIE,EAAG,CACLA,EAAEN,UAAU2K,OAAO,QAGnB,MAAMmtB,EAAiB5zB,aAAaC,QAAQ,yBAC5C,GAAI2zB,EAAgB,CAClB,MAAMC,EAAW9zB,SAAS6zB,EAAgB,IAC1C,IAAKE,MAAMD,IAAaA,GAAY,GAAKA,GAAY,EAAG,CAItD/yB,EAAU4I,aAAamqB,KAAc/yB,EAAU4I,aAAamqB,GAAY,IAAIp3B,KAG5EqE,EAAU4I,aAAamqB,GAAUj0B,IAAI,GAGrC,MAAMuM,EAAS,GAAG0nB,MAClB/yB,EAAU6I,eAAewC,KAAYrL,EAAU6I,eAAewC,GAAU,IAAI1P,KAG5EqE,EAAU6I,eAAewC,GAAQvM,IAAI,GAGrC8N,IAGA1N,aAAakb,WAAW,wBAC1B,CACF,CAEArd,YAAW,KACTzB,EAAEqK,SACFsD,EAAW,iBAAiB,GAC3B,IACL,CACF,CAEA,SAAS4pB,KACL,MAAMlO,EAAUhqB,SAASS,cAAc,wBACnCupB,IACAA,EAAQ3pB,UAAU2K,OAAO,QACzB5I,YAAW,KACP4nB,EAAQhf,SAERsD,EAAW,iBAAiB,GAC7B,KAEX,CAEA,SAASwJ,KACP,GAAIhW,OAAOw2B,qBAAuB9b,cAAc1a,OAAOw2B,qBAAsBj0B,YAAa,CACxF,MAAM1D,EAAIqb,aAAY,UACpB,IACE,IAAK3X,cAAgBA,YAAYU,GAC/B,YAAYyX,cAAc1a,OAAOw2B,qBAEnC,MAAO7zB,KAAM9D,EAAG+D,MAAOmZ,SAAWlZ,EAAeC,KAAK,iBAAiBC,OAAO,UAAUC,GAAG,KAAMT,YAAYU,IAAIC,SAEjH,GAAI6Y,IAAMld,EACR,OAAO6b,cAAc1a,OAAOw2B,qBAAsBj0B,YAAc,UAAWgK,IAE7E,MAAMkqB,EAAiBl0B,YAAY8H,OAGnC,GAFAgE,GAAwBxP,EAAEwL,QAEtB,YAAcxL,EAAEwL,QAAU,YAAcosB,EAAgB,CAC1Dl0B,YAAY8H,OAAS,UAErB,MAAMgsB,EAAiB5zB,aAAaC,QAAQ,uBACxC2zB,IAEF5zB,aAAa6B,QAAQ,wBAAyB+xB,GAE9C5zB,aAAakb,WAAW,wBAE1B8V,IACF,CACF,CAAE,MAAM50B,GACmC6b,cAAc1a,OAAOw2B,qBAAsBj0B,YAAc,KAAMgK,GAC1G,CACD,GAAG,KAEJvM,OAAOw2B,oBAAsB33B,CAC/B,CACF,CA3gBAmB,OAAO02B,aAAe,WACpBjE,IAIF,EAqKAv0B,SAASgE,iBAAiB,gBAAgBC,SAAQ6D,IAC9CA,EAAOC,QAAU,WAEb+tB,IACJ,CAAC,IA0LL91B,SAASC,iBAAiB,oBAAoB,WAI1CyJ,EAAStI,OAAOuF,MAAK,KAIjB,MAAMiK,EAAerM,aAAaC,QAAQ,eAC1C,GAAIoM,IAAiB9O,OAAO4U,SAASC,KACjC,IACI,MAAM9F,EAAUxB,KAAKC,MAAMsB,GACFE,KAAKrL,OAASoL,EAAQxJ,WAAa,GAGrC,QAEnBhC,EAAUyI,aAAe+C,EAAQlE,OAAStH,EAAUyI,aACpDzI,EAAU0I,WAAa8C,EAAQpH,KAAOpE,EAAU0I,WAChD1I,EAAU2I,aAAe6C,EAAQhE,OAASxH,EAAU2I,aAE5D,CAAE,MAAOrN,GAET,CACJ,GAER,IAuBAX,SAASC,iBAAiB,oBAAoB,WAC1CgK,IACJ,IAwHAjK,SAASC,iBAAiB,oBAAoB,KAC1C,MAAM0K,EAAW3K,SAASI,eAAe,YACrCuK,GACAA,EAAS1K,iBAAiB,SAAS,SAASU,GAExCW,KAAK6F,MAAQ7F,KAAK6F,MAAM0P,QAAQ,UAAW,IAGvCvV,KAAK6F,MAAMiK,OAAS,IACpB9P,KAAK6F,MAAQ7F,KAAK6F,MAAMyQ,MAAM,EAAG,GAEzC,GACJ,IAGJ,IAAI0G,GAAuB,CACvBhc,QAAS,KACTC,IAAK,KACLC,SAAU,GACVC,aAAc,GACdC,UAAW,KACXC,SAAU,GACVC,MAAO,YACPC,iBAAkB,GAClB41B,WAAY,KACZv1B,mBAAmB,EACnBJ,UAAW,KACXC,QAAS,MAIb0F,eAAeiwB,KACX,MAAMluB,EAAQxK,SAASI,eAAe,gBAChCqK,EAAczK,SAASI,eAAe,gBACtCsK,EAAa1K,SAASI,eAAe,eACrCwK,EAAgB5K,SAASI,eAAe,kBACxCkL,EAAaV,EAAgBA,EAAcG,QAAQ,gBAAkB,KAE3E,IACI,GAAI1G,YAAa,CACb,MAAMI,KAAEA,SAAeE,EAClBC,KAAK,iBACLC,OAAO,QACPC,GAAG,KAAMT,YAAYU,IACrBC,SAEL,GAAmB,YAAfP,GAAM2H,KAAoB,CAE1B,MAAM7J,EAAMuD,KAAK4T,MAAM,IAAuB,IAAhB5T,KAAK6T,UAAiBtT,WACpDiY,GAAqB/b,IAAMA,EAC3B+b,GAAqB5b,UAAY2B,YAAYU,GAC7CuZ,GAAqB7b,aAAe,GACpC6b,GAAqBqa,eAAgB,EACrCra,GAAqB1b,MAAQ,YAC7B0b,GAAqBsa,sBAAuB,EAExC92B,OAAO+2B,eACP/2B,OAAO+2B,cAAcC,cAGzBh3B,OAAO+2B,cAAgBl0B,EAAeuwB,QAAQ,UAAU3yB,IAAO,CAC3DyX,OAAQ,CAAE+e,UAAW,CAAEC,MAAM,MAGjCl3B,OAAO+2B,cAAc1D,GAAG,YAAa,CAAEj1B,MAAO,gBAAiB,EAAGm1B,QAAS5wB,MAEvE,IAAK6Z,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAazG,EAAKyG,WAAW,CAC5EoT,GAAqB7b,aAAaf,KAAK,CACnCwJ,SAAUzG,EAAKyG,SACfqT,eAAgB,EAChBtZ,MAAO,IAGXjF,SAASI,eAAe,gBAAgB4F,YAAcsY,GAAqB7b,aAAa2O,OAExF,MAAM8nB,EAAcl5B,SAASI,eAAe,sBACxC84B,GAA4C,OAA7BA,EAAYC,cAC3BC,IAER,KACD5D,YAEa1zB,OAAO4U,SAAS2iB,OAASv3B,OAAO4U,SAASO,SACzDqiB,GAAe/2B,GAEfvC,SAASI,eAAe,OAAO4F,YAAczD,EAC7CkI,EAAYxI,MAAMiC,QAAU,QAC5BwG,EAAWzI,MAAMiC,QAAU,OAG3BlE,SAASgE,iBAAiB,4CAA4CC,SAAQs1B,IAC1EA,EAAStI,SAAU,CAAK,IAI5B,MAAMuI,EAAgBx5B,SAASI,eAAe,iBACxCq5B,EAAiBz5B,SAASI,eAAe,kBACzCs5B,EAAkB15B,SAASI,eAAe,mBAE5Co5B,IAAeA,EAAcryB,MAAQ,MACrCsyB,IAAgBA,EAAetyB,MAAQ,MACvCuyB,IAAiBA,EAAgB1zB,YAAc,MAEnD2zB,KAGA,MAAMC,EAAkB55B,SAASS,cAAc,sBAC3Cm5B,GACAA,EAAgBv5B,UAAU2K,OAAO,UAEzC,MAII,GAHAP,EAAYxI,MAAMiC,QAAU,OAC5BwG,EAAWzI,MAAMiC,QAAU,QAEvB0G,GAAiBU,EAAY,CAC7B,MAAMJ,EAAW7G,YAAY8G,eAAeD,UAAY7G,YAAY+G,MAAMC,MAAM,KAAK,GACrFT,EAAczD,MAAQ+D,EACtBN,EAAcC,UAAW,EACzBD,EAAc3I,MAAMiC,QAAU,OAE9B,MAAM4G,EAAkB9K,SAASwB,cAAc,OAC/CsJ,EAAgBrJ,UAAY,mBAC5BqJ,EAAgB9E,YAAc,eAAekF,IAC7CI,EAAWC,aAAaT,EAAiBF,EAC7C,CAER,MAII,GAHAH,EAAYxI,MAAMiC,QAAU,OAC5BwG,EAAWzI,MAAMiC,QAAU,QAEvB0G,EAAe,CACfA,EAAcC,UAAW,EACzBD,EAAc3I,MAAMiC,QAAU,QAE9B,MAAM4G,EAAkBQ,GAAY7K,cAAc,qBAC9CqK,GACAA,EAAgBE,QAExB,CAGJR,EAAMvI,MAAMiC,QAAU,OAC1B,CAAE,MAAOQ,GAEL+J,MAAM,8BACV,CACJ,CAEA,SAASkrB,KACL,MAAME,EAAS75B,SAASI,eAAe,kBACjC8D,EAAUlE,SAASI,eAAe,mBAClCsyB,EAAQ1yB,SAASI,eAAe,iBAChC05B,EAAQ95B,SAASgE,iBAAiB,gBAEnC61B,GAAW31B,GAAYwuB,IAG5BmH,EAAO9zB,IAAM,EACb8zB,EAAO5d,IAAM,IACb4d,EAAO1yB,MAAQ,GACfjD,EAAQ8B,YAAc,GACtB0sB,EAAMvrB,MAAQ,GAGd0yB,EAAO55B,iBAAiB,SAAS,WAC7B,MAAMkH,EAAQ7C,SAAShD,KAAK6F,OAC5BjD,EAAQ8B,YAAcmB,EACtBurB,EAAMvrB,MAAQA,CAClB,IAGAurB,EAAMzyB,iBAAiB,SAAS,WAC5B,IAAIkH,EAAQ7C,SAAShD,KAAK6F,QAAU,EAGpCA,EAAQrB,KAAKmW,IAAI,EAAGnW,KAAKC,IAAI,IAAKoB,IAElC0yB,EAAO1yB,MAAQA,EACfjD,EAAQ8B,YAAcmB,EACtB7F,KAAK6F,MAAQA,CACjB,IAGA2yB,EAAM71B,SAAQ81B,IACVA,EAAK95B,iBAAiB,SAAS,WAC3B,MAAMkH,EAAQ7C,SAAShD,KAAKkd,QAAQrX,OACpC0yB,EAAO1yB,MAAQA,EACfjD,EAAQ8B,YAAcmB,EACtBurB,EAAMvrB,MAAQA,CAClB,GAAE,IAEV,CAIA,SAAS6yB,GAAoBt3B,GAGzB+F,eAAewxB,IACX,IACI,MAAMx1B,KAAEA,SAAeE,EAClBC,KAAK,iBACLC,OAAO,kBACPC,GAAG,UAAWpC,GACdsC,SAEDP,GAAMy1B,gBAAgBz3B,eACtBzC,SAASI,eAAe,gBAAgB4F,YACpCvB,EAAKy1B,eAAez3B,aAAa2O,OAE7C,CAAE,MAAO1M,GAET,CACJ,CAjBI5C,OAAOq4B,eAAe3d,cAAc1a,OAAOq4B,eAmB/CF,IACAn4B,OAAOq4B,cAAgBne,YAAYie,EAAa,IACpD,CAEAxxB,eAAe2xB,KACb,MAAM73B,EAAMvC,SAASI,eAAe,YAAY+G,MAAMwrB,OAAO0H,cAE7D,IACEv4B,OAAO+2B,cAAgBl0B,EAAeuwB,QAAQ,UAAU3yB,KACxD,MAAM2I,EAAW7G,YAAcA,YAAY8G,eAAeD,SAAWovB,KACrE,IAAIhC,EAEJha,GAAqBrb,WAAaiI,EAElCpJ,OAAO+2B,cACJ1D,GAAG,YAAa,CAAEj1B,MAAO,aAAc,EAAGm1B,QAASn1B,MAClDq6B,GAAcr6B,GACdoe,GAAqB1b,MAAQ1C,EAAM0C,MACf,WAAhB1C,EAAM0C,QACR0b,GAAqB9b,SAAWtC,EAAMsC,SACtC8b,GAAqB3b,SAAWzC,EAAMyC,SACtC63B,KACIlC,GAAqB9b,cAAc8b,GACzC,IAEDnD,GAAG,YAAa,CAAEj1B,MAAO,iBAAkB,EAAGm1B,QAASn1B,MAClC,WAAhBA,EAAM0C,QACR0b,GAAqB1b,MAAQ,SAC7B0b,GAAqB9b,SAAWtC,EAAMsC,SACtC8b,GAAqB3b,SAAWzC,EAAMyC,SACtC63B,KACIlC,GAAqB9b,cAAc8b,GACzC,IAED9C,kBAGG1zB,OAAO+2B,cAAc4B,KAAK,CAC9B3N,KAAM,YACN5sB,MAAO,cACPm1B,QAAS,CACPnqB,SAAUA,EACVwvB,UAAU,IAAK5pB,MAAQ4d,cACvBzpB,MAAO,KAIXqZ,GAAqBqc,eAAgB,EACrCrc,GAAqB/b,IAAMA,QAGrBT,OAAO+2B,cAAc4B,KAAK,CAC9B3N,KAAM,YACN5sB,MAAO,oBACPm1B,QAAS,CACPnqB,SAAUA,EACV0vB,YAAa,WACbvzB,UAAWyJ,KAAKrL,SAIpBzF,SAASI,eAAe,gBAAgB6B,MAAMiC,QAAU,OAExD9B,YAAW,KAC0B,WAA/Bkc,GAAqB1b,OACvBi4B,IACF,GACC,KAGHvC,EAAsBtc,aAAYvT,gBAC1B3G,OAAO+2B,cAAc4B,KAAK,CAC9B3N,KAAM,YACN5sB,MAAO,qBACP,GACD,KAGHkC,YAAW,KACLk2B,GAAqB9b,cAAc8b,EAAoB,GAC1D,IACL,CAAE,MAAO5zB,GAEP+J,MAAM,wBACR,CACF,CAGA,SAASqsB,KACL,MAAMC,EAAa/6B,SAASI,eAAe,kBACvC26B,IACAA,EAAW94B,MAAMiC,QAAU,QAC3B62B,EAAW/0B,YAAc,mBAEjC,CAEAyC,eAAeuyB,KACX,IAAK32B,YAAa,OAAO,EAEzB,MAAMI,KAAEA,SAAeE,EAClBC,KAAK,iBACLC,OAAO,SACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAEL,OAAOP,GAAMQ,OAAS,CAC1B,CAEA,SAASq1B,KACL,MAAMW,EAAQ,CACV,eAAgB,aAAc,YAAa,aAAc,eACzD,aAAc,YAAa,cAAe,cAAe,aACzD,YAAa,cAAe,eAAgB,eAAgB,aAC5D,eAAgB,gBAAiB,cAAe,aAAc,cAC9D,eAAgB,eAAgB,eAAgB,cAAe,iBAEnE,OAAOA,EAAMn1B,KAAK4T,MAAM5T,KAAK6T,SAAWshB,EAAM7pB,QAClD,CAEA,SAASypB,KACP,GAAI,WAAavc,GAAqB1b,MACpC,YAAY43B,KAGdx6B,SAASgE,iBAAiB,WAAWC,SAAStD,IAC5CA,EAAEN,UAAU2K,OAAO,UAAU,IAG/B,MAAMkwB,EAAgBl7B,SAASI,eAAe,kBAC9C86B,EAAc76B,UAAU8D,IAAI,WAE5B,MAAMg3B,EAAiBn7B,SAASI,eAAe,kBAC3C+6B,IACFA,EAAel5B,MAAMiC,QAAU,WAAaoa,GAAqB1b,MAAQ,QAAU,QAIrF,IACEw4B,IACF,CAAE,MAAO12B,GAET,CAEA,MAAM8kB,EAAaxN,aAAY,KAC7B,GAAIla,OAAO+2B,cACT,IACE/2B,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,oBACPm1B,QAAS,CACPnqB,SAAUoT,GAAqBrb,WAC/B23B,YAAa,iBAGnB,CAAE,MAAOj6B,GAET,CACF,GACC,KAEG06B,EAAqBr7B,SAASI,eAAe,wBAC/Ci7B,IACFA,EAAmBC,cAAcr5B,MAAMiC,QAAU,QAGnDg3B,EAAc1c,QAAQsY,aAAetN,EAErCpnB,YAAW,KACLonB,GAAYhN,cAAcgN,EAAW,GACxC,IACL,CAEA/gB,eAAe8yB,KACX,IACI,MAAMC,EAAmBx7B,SAASS,cAAc,sBAC1Cm5B,EAAkB55B,SAASS,cAAc,sBAE3C+6B,IAAkBA,EAAiBv5B,MAAMiC,QAAU,QACnD01B,GAAiBA,EAAgBv5B,UAAU8D,IAAI,WAEnDma,GAAqB1b,MAAQ,SAC7B0b,GAAqBqa,eAAgB,EAGrCra,GAAqB7b,aAAe6b,GAAqB7b,aAAa2P,KAAI6mB,IAAK,IACxEA,EACH1a,eAAgB,EAChBtZ,MAAOg0B,EAAEh0B,OAAS,MAGtBm0B,KACAqC,WAEM35B,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,eACPm1B,QAAS,CACL7yB,SAAU8b,GAAqB9b,SAC/BG,SAAU2b,GAAqB3b,SAC/BC,MAAO,SACPyE,UAAWyJ,KAAKrL,QAG5B,CAAE,MAAOf,GAEL+J,MAAM,uBACV,CACJ,CAEA,SAASitB,KAEL17B,SAASgE,iBAAiB,WAAWC,SAAQwT,IACzCA,EAAOpX,UAAU2K,OAAO,UAAU,IAItChL,SAASI,eAAe,oBAAoBC,UAAU8D,IAAI,WAG1D,MAAMw3B,EAAa37B,SAASI,eAAe,gBAC3C,GAAIu7B,GAAcrd,GAAqB/b,IAAK,CACxCo5B,EAAW31B,YAAcsY,GAAqB/b,IAG9C,MAAMq5B,EAAQ,GAAG95B,OAAO4U,SAAS2iB,OAASv3B,OAAO4U,SAASO,iBAAiBqH,GAAqB/b,MAEhG,IAAIs5B,OAAO,CACP9c,QAAS/e,SAASI,eAAe,UACjC+G,MAAOy0B,EACP/e,KAAM,IACNif,gBAAiB,EACjBC,WAAY,UACZhiB,WAAY,UACZlN,MAAO,MAIX,MAAMpH,EAAM,IAAIqL,KACVkrB,EAAc,CAChBC,YAAax2B,EAAIy2B,qBACjB1jB,iBAAkB/S,EAAI02B,qBACtBC,gBAAiB9d,GAAqB3b,SACtC05B,uBAAwB/d,GAAqB7b,aAAa2O,QAG9DzJ,OAAOC,QAAQo0B,GAAa/3B,SAAQ,EAAEc,EAAIoC,MACtC,MAAM4X,EAAU/e,SAASI,eAAe2E,GACpCga,IACAA,EAAQ/Y,YAAcmB,EAC1B,GAER,CAGAm1B,KAGA,MAAMd,EAAmBx7B,SAASS,cAAc,sBAC1Cm5B,EAAkB55B,SAASS,cAAc,sBAE3C6d,GAAqBqa,eAAgD,WAA/Bra,GAAqB1b,OAEvD44B,IAAkBA,EAAiBv5B,MAAMiC,QAAU,QACnD01B,GAAiBA,EAAgBv5B,UAAU8D,IAAI,aAG/Cq3B,IAAkBA,EAAiBv5B,MAAMiC,QAAU,SACnD01B,GAAiBA,EAAgBv5B,UAAU2K,OAAO,YAI1DywB,KAGAr5B,YAAW,KACHkc,GAAqB7b,cAAgB6b,GAAqB7b,aAAa2O,OAAS,GAChFgoB,IACJ,GACD,IACP,CAEA,SAASkD,KACet8B,SAASI,eAAe,sBAGhCyR,UAAY,2LAUpByM,GAAqB7b,aAAa2O,OAAS,GAC3CgoB,IAER,CAGA,MAAMmD,GAAe,CACjB,cACA,iBACA,WACA,mBACA,gBACA,gBACA,eACA,iBACA,eACA,cACA,mBACA,iBACA,kBACA,eACA,mBACA,mBACA,eACA,cACA,sBACA,kBAGEC,GAAc,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAIJ,SAASpD,KAEP,MAAMqD,EAAqB,CAAC,EAC5Bz8B,SAASgE,iBAAiB,sBAAsBC,SAAQqyB,IACtD,MAAMoG,EAAapG,EAAM71B,cAAc,mBACjCk8B,EAAUrG,EAAM71B,cAAc,gBAEpC,GAAIi8B,GAAcC,EAAS,CACzB,MAAMzxB,EAAWwxB,EAAWle,QAAQtT,SAC9BhC,EAAQ5E,SAASq4B,EAAQ32B,cAAgB,EAC/Cy2B,EAAmBvxB,GAAYhC,CACjC,KAIFoV,GAAqB7b,aAAawB,SAAQ24B,IACxC,MAAM1xB,EAAW0xB,EAAY1xB,SACzBuxB,EAAmBvxB,IAAauxB,EAAmBvxB,GAAY0xB,EAAYre,iBAC7Eqe,EAAYre,eAAiBke,EAAmBvxB,GAElD,IAIF,MAAM2xB,EAAqB,IAAIve,GAAqB7b,cAAcic,MAAK,CAACR,EAAGmN,IACzEA,EAAE9M,iBAAmBL,EAAEK,eACrB8M,EAAE9M,eAAiBL,EAAEK,eACrB8M,EAAEpmB,MAAQiZ,EAAEjZ,QAIV63B,EAAkB,iLAOlBD,EAAmBzqB,KAAI,CAACmkB,EAAQ3hB,IAChC,WAAa0J,GAAqB1b,OAAS2zB,EAAOrrB,SAChD,iCAAiC0J,EAAQ,EAAI,QAAQA,EAAM,IAAM,oCAC7CA,EAAM,wCACFA,EAAM,8CACJ2hB,EAAOrrB,iCAAiCqrB,EAAOrrB,kDAClDqrB,EAAOhY,gBAAkB,oBAAoBgY,EAAOhY,gBAAkB,2CACtEgY,EAAOtxB,OAAS,oBAAoBsxB,EAAOtxB,OAAS,4BAG3E,yCAAyC2P,EAAQ,EAAI,QAAQA,EAAM,IAAM,oCACrDA,EAAM,wCACFA,EAAM,8CACJ2hB,EAAOrrB,iCAAiCqrB,EAAOrrB,gIAEvBsxB,GAAY12B,KAAK4T,MAAM5T,KAAK6T,SAAW6iB,GAAYprB,aAAamrB,GAAaz2B,KAAK4T,MAAM5T,KAAK6T,SAAW4iB,GAAanrB,wQAQzKuN,KAAK,UAILoe,EAAgB/8B,SAASI,eAAe,sBAC1C28B,IACFA,EAAclrB,UAAYirB,GAI5B,MAAME,EAAUh9B,SAASI,eAAe,0BACpC48B,IAASA,EAAQh3B,YAAc62B,EAAmBzrB,QAEtD,MAAM6rB,EAASj9B,SAASI,eAAe,eACnC68B,IAAQA,EAAOj3B,aAAc,IAAK8K,MAAMorB,sBAE5C,MAAMgB,EAASl9B,SAASI,eAAe,oBACnC88B,IAAQA,EAAOl3B,aAAc,IAAK8K,MAAMqrB,sBAE5C,MAAMgB,EAASn9B,SAASI,eAAe,mBACnC+8B,IAAQA,EAAOn3B,YAAcsY,GAAqB3b,SACxD,CAEA8F,eAAe20B,KAEX,MAAMC,EAAiB7sB,MAAM5L,KAAK5E,SAASgE,iBAAiB,oCAAoCoO,KAAI3L,GAAMnC,SAASmC,EAAGU,SAChHm2B,EAAiBt9B,SAASS,cAAc,kBAE9C,GAA8B,IAA1B48B,EAAejsB,OAGf,YAFIksB,IAAgBA,EAAer7B,MAAMiC,QAAU,UAKnDo5B,IAAgBA,EAAer7B,MAAMiC,QAAU,QAGnDoa,GAAqB9b,SAAW+6B,GAAiBF,GAGjD,MAAM7D,EAAgBx5B,SAASI,eAAe,aAAeJ,SAASI,eAAe,kBACrF,GAAIo5B,EAAe,CACf,MAAMgE,EAAgBl5B,SAASk1B,EAAcryB,OAC7CmX,GAAqB3b,SAAW01B,MAAMmF,GAAiB,GAAKA,CAEhE,MAEIlf,GAAqB3b,SAAW,GAKpC2b,GAAqB1b,MAAQ,UAC7B0b,GAAqB7b,aAAe,GACpC6b,GAAqBzb,iBAAmB,GACxCyb,GAAqBtb,YAAc,CAAC,EACpCsb,GAAqBqa,eAAgB,EACrCra,GAAqBxb,UAAY,KACjCwb,GAAqBvb,QAAU,KAC/Bub,GAAqBpb,mBAAoB,EAGzCpB,OAAO+2B,cAAc1D,GAAG,YAAa,CAAEj1B,MAAO,oBAAqB,EAAGm1B,cAClE,GAAIA,GAAWA,EAAQnqB,SAAU,CAE7B,MAAMuyB,EAAcnf,GAAqB7b,aAAaoS,WAAUokB,GAAKA,EAAE/tB,WAAamqB,EAAQnqB,WAE5F,IAAqB,IAAjBuyB,EAAoB,CACpB,MAAMlH,EAASjY,GAAqB7b,aAAag7B,GAC3CC,EAAkBnH,EAAOhY,gBAAkB,OAGlBof,IAA3BtI,EAAQ9W,gBAAgC8W,EAAQ9W,eAAiBmf,IAEjErI,EAAQ9W,eAAiBmf,GAI7Bpf,GAAqB7b,aAAag7B,GAAe,IAC1ClH,KACAlB,EAEX,MAEI/W,GAAqB7b,aAAaf,KAAK,CACnCwJ,SAAUmqB,EAAQnqB,SAClBqT,eAAgB8W,EAAQ9W,gBAAkB,EAC1CtZ,MAAOowB,EAAQpwB,OAAS,IAGhC6Z,KACAV,EAAqBiX,GACrBuI,IACJ,KACDzI,GAAG,YAAa,CAAEj1B,MAAO,sBAAuBuI,OAAS4sB,cAgBxD,SAZMvzB,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,sBACPm1B,QAAS,CACLzyB,MAAO0b,GAAqB1b,MAC5BJ,SAAU8b,GAAqB9b,SAC/BG,SAAU2b,GAAqB3b,SAC/Bi4B,YAAavF,GAASuF,aAAe,cAKhB,aAAzBvF,GAASuF,aACsB,WAA/Btc,GAAqB1b,OACrByyB,EAAQnqB,WACPoT,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAamqB,EAAQnqB,WAAW,CAE/EoT,GAAqB7b,aAAaf,KAAK,CACnCwJ,SAAUmqB,EAAQnqB,SAClBqT,eAAgB,EAChBtZ,MAAO,EACP44B,UAAU,IAGd,MAAMC,EAA0B99B,SAASI,eAAe,0BACpD09B,IACAA,EAAwB93B,YAAcsY,GAAqB7b,aAAa2O,QAG5EgoB,IACJ,KACDjE,GAAG,YAAa,CAAEj1B,MAAO,qBAAsB,EAAGm1B,cAI7CA,EAAQnqB,WAAaoT,GAAqBzb,iBAAiB2L,SAAS6mB,EAAQnqB,YAC5EoT,GAAqBzb,iBAAiBnB,KAAK2zB,EAAQnqB,UAG/CmqB,EAAQ/J,MAAQ+J,EAAQ/J,MAAQ,IAChChN,GAAqBtb,YAAYqyB,EAAQnqB,UAAY,CACjDogB,KAAM+J,EAAQ/J,KACdyS,eAAgB1I,EAAQhuB,WAAayJ,KAAKrL,QAIlD2Y,EAAqBiX,GAGjB/W,GAAqBzb,iBAAiBuO,QAAU,GAChD4sB,KAER,IAIJ,MAAMC,EAAcj+B,SAASI,eAAe,gBAM5C,GALI69B,IAAaA,EAAYh8B,MAAMiC,QAAU,QAE7Cw3B,KAGIr3B,aAAaU,KAAOuZ,GAAqB5b,UAAW,CACpD,MAAMw7B,EAAgBC,KACtB7f,GAAqB4f,cAAgBA,CACzC,CACJ,CAEA,SAASX,GAAiBtlB,GACtB,IAAImmB,EAAO,GAgBX,OAdAnmB,EAAOhU,SAAQ0I,IACXhF,OAAOwJ,KAAK0S,gBAAgB5f,SAAQovB,IAChC,GAAIA,EAAIzc,WAAW,GAAGjK,MAAW,CAC7B,MAAMlD,EAAMoa,eAAewP,GAC3B5pB,EAAIP,MAAMjF,SAAQ,CAACkpB,EAAMvY,KACrBwpB,EAAK18B,KAAK,CACNyrB,KAAMA,EACNkR,YAAa50B,EAAIsK,aAAaa,IAChC,GAEV,IACF,IAGCwpB,EAAK1f,MAAK,IAAM5Y,KAAK6T,SAAW,IAC3C,CAEA,SAAS2kB,KACL,MAAMC,EAAkBv+B,SAASI,eAAe,oBAC5Cm+B,GAAmBA,EAAgB/f,QAAQggB,sBAC3C75B,EAAesyB,cAAcsH,EAAgB/f,QAAQggB,4BAC9CD,EAAgB/f,QAAQggB,oBAEvC,CAEA,SAAShE,KACP,MAAMU,EAAgBl7B,SAASI,eAAe,kBAC1C86B,GAAiBA,EAAc1c,QAAQsY,eACzCta,cAAclY,SAAS42B,EAAc1c,QAAQsY,sBACtCoE,EAAc1c,QAAQsY,cAE/B92B,SAASI,eAAe,mBAAmBC,UAAU8D,IAAI,WACzDnE,SAASI,eAAe,kBAAkBC,UAAU2K,OAAO,WAE3D,MAAM/H,EAAaqb,GAAqBrb,YAAcoB,aAAa8G,eAAeD,UAAYovB,KAE9Fxb,KAEA9e,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CA,EAAGT,YAAc,IACjBS,EAAGxE,MAAMiC,QAAU,MAAM,IAG3BlE,SAASgE,iBAAiB,oBAAoBC,SAAQwC,IACpDA,EAAGxE,MAAMiC,QAAU,MAAM,IAG3B,MAAM2e,EAAiB7iB,SAASS,cAAc,oBACxCqiB,EAAoB9iB,SAASS,cAAc,uBACjDoiB,EAAe5gB,MAAMiC,QAAU,OAC/B4e,EAAkB7gB,MAAMiC,QAAU,OAElC,IAAIu6B,EAAe,EACnB,GAAIp6B,aAAsC,YAAvBA,YAAY8H,OAC7B,IACE,MAAM1H,KAAEA,EAAIC,MAAEA,GAAUC,EAAeC,KAAK,iBAAiBC,OAAO,SAASC,GAAG,UAAWT,YAAYU,IAAIC,UACtGN,GAASD,IACZg6B,EAAeh6B,EAAKQ,MAGxB,CAAE,MAAO6B,GAET,MAEA23B,EAAen6B,SAASC,aAAaC,QAAQ,uBAAyB,KAGxE6U,EAAYpU,MAAQw5B,EACpBngB,GAAqBmgB,aAAeA,EAEpCz+B,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CA,EAAGT,YAAcy4B,EAAap4B,UAAU,IAG1C,IACEvE,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,kBACPm1B,QAAS,CACPnqB,SAAUjI,EACVsb,eAAgB,EAChBtZ,MAAOw5B,EACPp3B,UAAWyJ,KAAKrL,QAGtB,CAAE,MAAOqB,GAET,CA4BA,GAzBAhF,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,eACPm1B,QAAS,CACPnqB,SAAUjI,EACVoE,UAAWyJ,KAAKrL,SAIpBqZ,KAEAR,GAAqBxb,UAAYgO,KAAKrL,MAEtC4T,EAAc,CACZE,aAAc,EACdmlB,cAAe,EACf7jB,YAAa,EACb3R,MAAOoV,GAAqB9b,UAAY,GACxC+b,eAAgB,EAChBtZ,MAAOw5B,EACPE,cAAe7tB,KAAKrL,MACpBm5B,oBAAoB,EACpBC,eAAgB57B,IAGboW,EAAYnQ,OAAsC,IAA7BmQ,EAAYnQ,MAAMkI,OAAc,CACxD,KAAMkN,GAAqB9b,UAAY8b,GAAqB9b,SAAS4O,OAAS,GAG5E,OAFA0d,GAAe,gDACfxgB,EAAW,kBAGb+K,EAAYnQ,MAAQoV,GAAqB9b,QAC3C,CAGAs8B,KAGA,MAAMC,EAAqBp6B,EAAeuwB,QAAQ,sBAC/CC,GAAG,mBAAoB,CACtBj1B,MAAO,IACPk1B,OAAQ,SACRzmB,MAAO,wBACL0mB,IAEF+D,IAA0B,IAE3B5D,YAEHlX,GAAqBygB,mBAAqBA,EAE1Cj9B,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,uBAAuB,EAAGm1B,QAAS5wB,MAE9E,MAAMmQ,EAAQ0J,GAAqB7b,aAAaoS,WAAUokB,GAAKA,EAAE/tB,WAAazG,EAAKyG,WAC7E8zB,EAAkB,CACtB9zB,SAAUzG,EAAKyG,SACfqT,eAAgB,EAChBtZ,MAAOR,EAAKg6B,cAAgB,EAC5BZ,SAAUp5B,EAAKo5B,WAAY,IAGd,IAAXjpB,EACF0J,GAAqB7b,aAAaf,KAAKs9B,GAEvC1gB,GAAqB7b,aAAamS,GAASoqB,EAG7C5F,KACAva,IACD,IAED/c,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,oBAAoB,EAAGm1B,QAAS10B,MAI7E,GAAIA,EAAEuK,WAAaoT,GAAqBrb,WAAY,CAClD,MAAMw6B,EAAcnf,GAAqB7b,aAAaoS,WAAUokB,GAAKA,EAAE/tB,WAAavK,EAAEuK,WAEtF,IAAqB,IAAjBuyB,EAAoB,CAEtB,MAAMwB,EAAiB3gB,GAAqB7b,aAAag7B,GACnDyB,EAAeD,EAAe1gB,gBAAkB,EAChD4gB,EAAWx+B,EAAE4d,gBAAkB,EAErCD,GAAqB7b,aAAag7B,GAAe,IAC5CwB,KACAt+B,EAEH4d,eAAgBzY,KAAKmW,IAAIijB,EAAcC,GAE3C,MAEE7gB,GAAqB7b,aAAaf,KAAK,CACrCwJ,SAAUvK,EAAEuK,SACZqT,eAAgB5d,EAAE4d,gBAAkB,EACpCtZ,MAAOtE,EAAEsE,OAAS,EAClB44B,SAAUl9B,EAAEk9B,WAAY,IAI5Bzf,EAAqB,CACnBlT,SAAUvK,EAAEuK,SACZqT,eAAgB5d,EAAE4d,eAClBtZ,MAAOtE,EAAEsE,OAEb,CAEA6Z,IACD,IAEChd,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,iBAAiB,EAAGm1B,QAAS5wB,MAEpE4U,GAAeA,EAAYkF,eAAiB,GAC9Czc,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,gBACPm1B,QAAS,CACP5yB,aAAc6b,GAAqB7b,aACnC28B,iBAAkB9gB,GAAqBrb,WACvCo8B,iBAAkB56B,EAAKyG,SACvB7D,UAAWyJ,KAAKrL,QAIvB,IAED3D,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,kBAAkB,EAAGm1B,QAAS5wB,MAErEA,EAAK46B,mBAAqB/gB,GAAqBrb,YAE7CuN,MAAMC,QAAQhM,EAAKhC,gBACrBgC,EAAKhC,aAAawB,SAAQ24B,IACxB,MAAM0C,EAAgBhhB,GAAqB7b,aAAaoS,WACtDokB,GAAKA,EAAE/tB,WAAa0xB,EAAY1xB,WAGlC,IAAuB,IAAnBo0B,EAEFhhB,GAAqB7b,aAAaf,KAAKk7B,OAClC,CAGL,MAAM2C,EAAWjhB,GAAqB7b,aAAa68B,GACnDhhB,GAAqB7b,aAAa68B,GAAiB,IAC9CC,EACHhhB,eAAgBzY,KAAKmW,IAAIsjB,EAAShhB,gBAAkB,EAAGqe,EAAYre,gBAAkB,GACrFtZ,MAAOa,KAAKmW,IAAIsjB,EAASt6B,OAAS,EAAG23B,EAAY33B,OAAS,GAE9D,KAIF6Z,KAGL,IAEDhd,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,qBAAqB,EAAGm1B,QAAS5wB,MAEvE6Z,GAAqBzb,iBAAiB2L,SAAS/J,EAAKyG,WACvDoT,GAAqBzb,iBAAiBnB,KAAK+C,EAAKyG,UAElDkT,EAAqB3Z,GACjB6Z,GAAqBzb,iBAAiBuO,QAAU,GAClD4sB,IAEH,IAEDl8B,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,mBAAmB,EAAGm1B,QAAS5wB,MAC1E,GAAIA,EAAK+6B,aAAelhB,GAAqBrb,WAAY,CACvD,MAAMw8B,EAAUh7B,EAAKg7B,QAGrB,OAFAzmB,GAAiB,GAAGvU,EAAKi7B,YAAYD,EAAQlxB,eAAgBkxB,EAAQ3S,MAE9D2S,EAAQ3sB,MACb,IAAK,YACL,IAAK,YACH,MAAM6sB,EAAWtmB,EAAYpU,MAC7BoU,EAAYpU,OAASw6B,EAAQG,OAC7B5/B,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CqgB,GAAcrgB,EAAIk5B,EAAUtmB,EAAYpU,MAAM,IAEhD,MACF,IAAK,eACHoU,EAAYwmB,eAAiB,EAC7BxmB,EAAYymB,mBAAqB,EACjC,MACF,IAAK,SACH,MAAM3mB,EAAUnZ,SAASgE,iBAAiB,mBAC1CmV,EAAQlV,SAAQqE,GAAOA,EAAIsR,UAAW,IACtCxX,YAAW,KACT+W,EAAQlV,SAAQqE,GAAOA,EAAIsR,UAAW,GAAM,GAC3C6lB,EAAQ3mB,UACX,MACF,IAAK,aACHO,EAAY0mB,mBAAqB,EACjC,MACF,IAAK,eACH,MAAM3Z,EAAiBpmB,SAASI,eAAe,mBAC/CgmB,EAAe/lB,UAAU8D,IAAI,gBAC7B/B,YAAW,KACTgkB,EAAe/lB,UAAU2K,OAAO,eAAe,GAC9Cy0B,EAAQ3mB,UAIfsF,EAAqB,CACnBlT,SAAUoT,GAAqBrb,WAC/BgC,MAAOoU,EAAYpU,MACnBsZ,eAAgBlF,EAAYkF,gBAEhC,CACD,IAEDzc,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,gBAAgB,EAAGm1B,QAAS5wB,MACvE,GAAIA,EAAK+6B,aAAelhB,GAAqBrb,WAAY,CACvD,MAAM08B,EAAWtmB,EAAYpU,MAC7BoU,EAAYpU,OAASR,EAAKU,OAE1BnF,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CqgB,GAAcrgB,EAAIk5B,EAAUtmB,EAAYpU,MAAM,IAGhD,MAAM2P,EAAQ0J,GAAqB7b,aAAaoS,WAAUokB,GACxDA,EAAE/tB,WAAaoT,GAAqBrb,cAGvB,IAAX2R,IACF0J,GAAqB7b,aAAamS,GAAO3P,MAAQoU,EAAYpU,MAC7D+6B,8BAGgB,aAAdv7B,EAAKqoB,KACP9T,GAAiB,GAAGvU,EAAKi7B,2BAA4B,YAC9B,UAAdj7B,EAAKqoB,MACd9T,GAAiB,GAAGvU,EAAKi7B,yBAA0B,SAGrDthB,EAAqB,CACnBlT,SAAUoT,GAAqBrb,WAC/BgC,MAAOoU,EAAYpU,MACnBsZ,eAAgBlF,EAAYkF,gBAEhC,CACD,IAEDzc,OAAO+2B,cAAc1D,GAAG,YAAa,CAACj1B,MAAO,aAAa,EAAGm1B,QAAS5wB,MACpE81B,GAAc91B,EACf,IAED0K,KACA8wB,KAGAn+B,OAAOo+B,eAAiB,GACxBp+B,OAAOq+B,gBAAkB,EAC3B,CAEA13B,eAAe23B,GAAkBj7B,GAC7B,MAAMw6B,EAAWtmB,EAAYpU,MAI7B,GAHAoU,EAAYpU,OAASE,EAGjBd,YACA,IACI,MAAMK,MAAEA,SAAgBC,EACnBC,KAAK,iBACLuB,OAAO,CAAElB,MAAOoU,EAAYpU,QAC5BH,GAAG,UAAWT,YAAYU,IAE/B,GAAIL,EAAO,MAAMA,CACrB,CAAE,MAAOA,GAEL2U,EAAYpU,MAAQ06B,CACxB,CAIR,MAAMU,EAAqB/hB,GAAqB7b,aAAa69B,MAAKrH,GAChEA,EAAE1a,eAAiB,GAAK0a,EAAE/tB,WAAaoT,GAAqBrb,aAI9D,IAAKo9B,EACH,IACEv+B,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,kBACPm1B,QAAS,CACPnqB,SAAUoT,GAAqBrb,WAC/Bsb,eAAgB,EAChBtZ,MAAOoU,EAAYpU,OAAS,EAC5BoC,UAAWyJ,KAAKrL,MAChBo4B,SAAUwC,IAGhB,CAAE,MAAOv5B,GAET,CAIF,GAAIu5B,EACF,IACEv+B,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,eACPm1B,QAAS,CACPnqB,SAAUoT,GAAqBrb,WAC/B23B,YAAa,gBACbvzB,UAAWyJ,KAAKrL,QAGtB,CAAE,MAAOqB,GAET,CASE,OALiB9G,SAASgE,iBAAiB,eAClCC,SAAQC,IACb0Z,EAAmB1Z,EAASy7B,EAAUtmB,EAAYpU,MAAM,IAGrDoU,EAAYpU,KACvB,CAEAwD,eAAe83B,KACX,IAAKl8B,YAED,OAAOC,SAASC,aAAaC,QAAQ,uBAAyB,KAIlE,IACI,MAAMC,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,SACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAGL,OAAOP,GAAMQ,OAAS,CAC1B,CAAE,MAAOP,GAEL,OAAO,CACX,CACJ,CAEA,SAASu7B,KACL,IAAK5mB,EAAYnQ,MAAMkI,OAAQ,OAE/B,MAAMovB,EAAexgC,SAASI,eAAe,iBACvCqgC,EAAazgC,SAASI,eAAe,WAGrCmZ,EAAezT,KAAK4T,MAAM5T,KAAK6T,SAAWN,EAAYnQ,MAAMkI,QAC5DsvB,EAAcrnB,EAAYnQ,MAAMqQ,GAGhCD,EAAoBxT,KAAK6T,SAAW,GAE1C6mB,EAAax6B,YAAcsT,EACvBonB,EAAYrC,YAAcqC,EAAYvT,KAG1C,IAAIrhB,EAAU,CAACwN,EAAoBonB,EAAYvT,KAAOuT,EAAYrC,aAClE,KAAOvyB,EAAQsF,OAAS,GAAG,CACvB,MAAMuvB,EAAatnB,EAAYnQ,MAAMpD,KAAK4T,MAAM5T,KAAK6T,SAAWN,EAAYnQ,MAAMkI,SAC5EwvB,EAAStnB,EAAoBqnB,EAAWxT,KAAOwT,EAAWtC,YAC3DvyB,EAAQ0C,SAASoyB,IAClB90B,EAAQpK,KAAKk/B,EAErB,CAGA90B,EAAUA,EAAQ4S,MAAK,IAAM5Y,KAAK6T,SAAW,KAG7C8mB,EAAW5uB,UAAY,GACvB/F,EAAQ7H,SAAQ28B,IACZ,MAAM94B,EAAS9H,SAASwB,cAAc,UACtCsG,EAAO9B,YAAc46B,EACrB94B,EAAOC,QAAU,IAAM84B,GACnBD,KAAYtnB,EAAoBonB,EAAYvT,KAAOuT,EAAYrC,cAEnEoC,EAAWj9B,YAAYsE,EAAO,IAIlCuR,EAAYnQ,MAAM43B,OAAOvnB,EAAc,EAC3C,CAGA,SAASsF,KACL,MAAMkiB,EAAS/gC,SAASS,cAAc,8BAEhC4kB,EAAgB,EAAIvf,KAAKsX,GADhB,GAITvX,EAAWwT,EAAYkF,eACvBlF,EAAYkF,eAAiBD,GAAqB3b,SAClD,EAENo+B,EAAO9+B,MAAMqjB,gBAAkB,GAAGD,KAAiBA,IACnD0b,EAAO9+B,MAAMsjB,iBAAmBF,GAAiB,EAAIxf,EACzD,CAEA,SAASm7B,GAA2BC,GAChC,MAAMjX,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,0BACpBuoB,EAAQnY,UAAY,mQAMWovB,EAAW1iB,8KAIX0iB,EAAWh8B,qKAIZg8B,EAAW3V,+JAOzCtrB,SAASuD,KAAKC,YAAYwmB,GAC1B5mB,uBAAsB,IAAM4mB,EAAQ3pB,UAAU8D,IAAI,SACtD,CAEA,SAAS+8B,KACL,MAAM12B,EAAQxK,SAASS,cAAc,4BACjC+J,IACAA,EAAMnK,UAAU2K,OAAO,QACvB5I,YAAW,KACPoI,EAAMQ,SACNsD,EAAW,iBAAiB,GAC7B,KAEX,CAEA,SAAS6yB,KAEDr/B,OAAO+2B,eACP/2B,OAAO+2B,cAAcC,cAEzBxa,GAAuB,CACnBhc,QAAS,KACTC,IAAK,KACLC,SAAU,GACVC,aAAc,GACdC,UAAW,KACXC,SAAU,IAId2L,EAAW,kBACXtO,SAASS,cAAc,wBAAwBuK,QACnD,CAEA,SAASkO,GAAakoB,EAAWC,GAAW,GAC1C,MAAM57B,EAAMqL,KAAKrL,MACjB,KAAIA,GAAO4T,EAAYioB,gBAAkB,GAAK,MAKzCjoB,GAAgBA,EAAYnQ,OAAsC,IAA7BmQ,EAAYnQ,MAAMkI,UAAgBiI,EAAYE,cAAgBF,EAAYnQ,MAAMkI,QAA1H,CAKAiI,EAAYioB,eAAiB77B,EAC7B4T,EAAYvM,MAAQuM,EAAYvM,OAAS,CAAErF,KAAM,EAAGD,KAAM,EAAGD,WAAY,EAAGG,OAAQ,GAEpF,IACE,GAAI05B,EAAW,CAGb,GAFA/nB,EAAYE,eAERF,EAAY6H,YAAa,CAC3B,MAAMqgB,EAAUvhC,SAASS,cAAc,mBACvC,GAAI8gC,EAAS,CACX,MAAMxkB,EAAS,CAAC,SAAU,SAAU,YAAa,YAAa,SACxDykB,EAAczkB,EAAOjX,KAAK4T,MAAM5T,KAAK6T,SAAWoD,EAAO3L,SACvD0I,EAAqBynB,EAAQt/B,MAAM8X,WACzCwnB,EAAQt/B,MAAM8X,WAAa,sCAAsCynB,cACjED,EAAQt/B,MAAMmyB,UAAY,aAC1BmN,EAAQt/B,MAAMiT,OAAS,kBACvB9S,YAAW,KACTm/B,EAAQt/B,MAAMmyB,UAAY,GAC1BmN,EAAQt/B,MAAMiT,OAAS,GACvBqsB,EAAQt/B,MAAM8X,WAAaD,CAAkB,GAC5C,IACL,CAGA,GAAIT,EAAYE,cAAgBF,EAAYnQ,MAAMkI,OAAQ,CAExDiI,EAAYooB,cAAe,EAC3B9lB,IAGA,MAAM+lB,EAAiB1hC,SAASS,cAAc,oBAC9C,GAAIihC,EAAgB,CAClB,MAAM77B,EAAW67B,EAAejhC,cAAc,aAC9C,GAAIoF,EAAU,CACZ,MAAMwf,EAAgB,EAAIvf,KAAKsX,GAAK,GACpCvX,EAAS5D,MAAMsjB,iBAAmBF,CACpC,CACF,CAQA,OALAa,UACAtiB,EAAasB,YAAY,KAAKyB,MAAK,KACjCwI,IAAuB,GAI3B,CAGAwyB,IACF,MACEvd,KAGF,IAAKid,EAAU,CACb,IAAIO,EAAc,EAClB,MAAMlnB,EAAY2L,KAwBlB,GAvBI3L,EAAY,IACdknB,GAAelnB,EACf8L,GAAW9L,IAGTrB,EAAYiB,cACdsnB,GAAe,EACfpb,GAAW,KAEXob,GAAe,EACfpb,GAAW,IAGb5iB,EAAasB,YAAY08B,GAAaj7B,MAAK,KACzCL,IACA6I,IAAuB,IACtBsE,OAAM3M,IAC0C,IAGnDuS,EAAYgB,iBAGRhW,YAAa,CACf,MAAMw9B,EAAYxoB,EAAYE,aAAe,EACvC4T,EAAO9T,EAAYC,kBACvBD,EAAYnQ,MAAM24B,GAClBxoB,EAAYtF,aAAa8tB,GAM3BC,GAAmB3U,EAJF9T,EAAY6N,iBAAmB,SAC/B7N,EAAY0oB,aAAe,SAAW,QAIzD,CACF,CACF,MAoBE,GAnBA1oB,EAAYiB,cAAe,EAC3BjB,EAAYsB,aAAc,EAC1BtB,EAAYwB,cAEZjX,EAAasB,aAAa,GAAGyB,MAAK,KAChCL,IACA6I,IAAuB,IACtBsE,OAAM3M,IACoC,IAGzCuS,EAAYE,aAAe,IAC7BF,EAAYyB,eACZzB,EAAYE,aAAezT,KAAKmW,IAAI,EAAG5C,EAAYE,aAAe,GAC9DF,EAAY6H,aACdygB,MAIAtoB,EAAYwB,aAAe,EAE7B,YADAkP,KAMJ,MAAMiY,EAAahiC,SAASgE,iBAAiB,mBAGvCi+B,EAAuB5oB,EAAYC,kBACrCD,EAAYnQ,MAAMpD,KAAKmW,IAAI,EAAG5C,EAAYE,aAAe,IACzDF,EAAYtF,aAAajO,KAAKmW,IAAI,EAAG5C,EAAYE,aAAe,IAGpEyoB,EAAW/9B,SAAS6D,IACdA,EAAO9B,cAAgBi8B,EACzBn6B,EAAOzH,UAAU8D,IAAI,YACXi9B,GAAalhC,OAASA,MAAMY,QAAUgH,EAAO9B,cAAgB9F,MAAMY,OAAOkF,aACpF8B,EAAOzH,UAAU8D,IAAI,QACvB,IAGF8N,IAKA7P,YAAW,KAET4/B,EAAW/9B,SAAQqE,IACjBA,EAAIjI,UAAU2K,OAAO,UAAW,QAAQ,KAItCqO,GAAiBA,EAAYooB,cAAiBpoB,EAAY6H,cACxD7H,EAAYE,aAAeF,EAAYnQ,MAAMkI,QAC/CqK,EAAWpC,EAAYnQ,MAAMkI,OAASiI,EAAYE,cAE9CF,EAAY6H,YACdiD,KAEAE,KAGF/d,KACU+S,EAAY6H,cAClB7H,EAAY6N,iBACdgb,KAEA3a,MAGN,GA3BsB,IA8B1B,CAAE,MAAOzgB,GAIP,IACMuS,GAAeA,EAAYE,aAAeF,EAAYnQ,MAAMkI,SAAWiI,EAAYooB,aACrFpd,KAEA/V,EAAW,iBAEf,CAAE,MAAOxH,GAEPwH,EAAW,iBACb,CACF,CAzLA,CA0LF,CAEA,SAASuyB,GAAmBO,GAC1B,MAAM37B,EAAMqL,KAAKrL,MACjB,GAAIA,GAAO4T,EAAYioB,gBAAkB,GAAK,IAC5C,OAGFjoB,EAAYioB,eAAiB77B,EAE7B,MAAMxC,EAAaqb,GAAqBrb,YAAcoB,aAAa8G,eAAeD,UAAYovB,KAE9F,GAAI8G,EAAW,CAOb,GALA/nB,EAAYkF,iBACZlF,EAAYqlB,gBACZrlB,EAAYwB,YAAc,EAGtBxW,iBAEG,CAEL,IAAIqjB,EAAa,EACbrO,EAAYqlB,eAAiB,IAC/BhX,GAAc,GAGhB,MAAMiY,EAAWtmB,EAAYpU,MAC7BoU,EAAYpU,OAASyiB,EAErB1nB,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CmX,EAAmBnX,EAAIk5B,EAAUtmB,EAAYpU,MAAM,IAGrDk9B,IACF,CAGA,MAAMC,EAAU9jB,GAAqB7b,aAAaoS,WAChDokB,GAAKA,EAAE/tB,WAAajI,KAGL,IAAbm/B,GACF9jB,GAAqB7b,aAAa2/B,GAAS7jB,eAAiBlF,EAAYkF,eACxED,GAAqB7b,aAAa2/B,GAASn9B,MAAQoU,EAAYpU,OAE/DqZ,GAAqB7b,aAAaf,KAAK,CACrCwJ,SAAUjI,EACVsb,eAAgBlF,EAAYkF,eAC5BtZ,MAAOoU,EAAYpU,QAKvB6Z,KAGA,IACEhd,OAAO+2B,cAAc4B,KAAK,CACxB3N,KAAM,YACN5sB,MAAO,kBACPm1B,QAAS,CACPnqB,SAAUjI,EACVsb,eAAgBlF,EAAYkF,eAC5BtZ,MAAOoU,EAAYpU,MACnBoC,UAAWyJ,KAAKrL,QAGtB,CAAE,MAAOqB,GAET,CAGA+X,KAGIxF,EAAYkF,gBAAkBD,GAAqB3b,UACrD0/B,GAA0Bp/B,EAE9B,MAEEoW,EAAYqlB,cAAgB,EAC5BrlB,EAAYwB,cAMdiE,KAGAmhB,IACF,CAEA,SAASrC,KACoBtf,GAAqB7b,aACzCyS,QAAO+jB,GAAKA,EAAE1a,gBAAkBD,GAAqB3b,WACrDyO,QAEmB,GACpBtP,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,YAGnB,CAEA,SAASq6B,GAAclF,GAEhBA,IAEDA,EAAQiN,WACVnB,KACA7yB,EAAW,mBACFjK,aAAaU,KAAOswB,EAAQ3yB,UACrC6/B,GAA0BlN,EAAQmN,eAAiB,IAEnDC,GAA2BpN,EAAQmN,eAAiB,IAExD,CAEA,SAASE,GAAwBC,GAC7B,MAAM9D,EAAiBvgB,GAAqBrb,WACtCw1B,EAAana,GAAqBtb,YAAY67B,GAAgBvT,KAG9DxH,EAAgBxF,GAAqBmgB,cAAgB,EAErDmD,GADev8B,EAAUJ,OAASoU,EAAYpU,OAAS,GAC1B6e,EAG7BvF,EAAiBlF,EAAYkF,gBAAkB,EAG/CyL,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,0BAEpBuoB,EAAQnY,UAAY,mJAGiC+wB,GAAWnK,0lBAQPla,4ZAKAqjB,0ZAKAnJ,+PAWzDz4B,SAASuD,KAAKC,YAAYwmB,GAC1B5mB,uBAAsB,IAAM4mB,EAAQ3pB,UAAU8D,IAAI,SACtD,CAEA,SAAS0+B,KAEL,MAAM7Y,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,0BAGpB,MAAMqhC,EAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACpDC,EAAcD,EAAOh9B,KAAK4T,MAAM5T,KAAK6T,SAAWmpB,EAAO1xB,SAE7D4Y,EAAQnY,UAAY,mHAEwCkxB,ifAa5D/iC,SAASuD,KAAKC,YAAYwmB,GAC1B5mB,uBAAsB,IAAM4mB,EAAQ3pB,UAAU8D,IAAI,SACtD,CAGA,SAASo+B,GAA0BC,GAC/B,MAAMv/B,EAAaqb,GAAqBrb,WAClC+/B,EAAmBR,EAAcltB,MAAK2jB,GAAKA,EAAE/tB,WAAajI,IAGhE,GAAIqb,GAAqBpb,mBAAqB8/B,GAAoBA,EAAiB1X,MAAQ,EACvF,OAIJ,IAAImN,EACJ,GAAIuK,EACAvK,EAAauK,EAAiB1X,SAC3B,CAIHmN,EAF2B,IAAIna,GAAqB7b,cAC/Cic,MAAK,CAACR,EAAGmN,IAAMA,EAAE9M,eAAiBL,EAAEK,iBACT1J,WAAUokB,GAAKA,EAAE/tB,WAAajI,IAAc,CAChF,CAEIw1B,GAAc,EACdwK,GAA0BxK,GAE1BoK,IAER,CAEA,SAASI,GAA0B3X,GAC/B,GAAIhN,GAAqBpb,kBAAmB,OAC5Cob,GAAqBpb,mBAAoB,EAKzC,MAAM8mB,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,0BAGpB,MAkBM8M,EAlBe,CACjB,EAAG,CACCyI,MAAO,qBACPzI,QAAS,2CACTrI,MAAO,eAEX,EAAG,CACC8Q,MAAO,sBACPzI,QAAS,4CACTrI,MAAO,iBAEX,EAAG,CACC8Q,MAAO,qBACPzI,QAAS,wCACTrI,MAAO,kBAIcolB,IAAS,CAClCtU,MAAO,iBACPzI,QAAS,gCACTrI,MAAO,iBAIL4d,EAAgBxF,GAAqBmgB,cAAgB,EAErDmD,GADev8B,EAAUJ,OAASoU,EAAYpU,OAAS,GAC1B6e,EAEnCkG,EAAQnY,UAAY,mFAEQtD,EAAQrI,UAAUqI,EAAQyI,8BACzCzI,EAAQA,sOAKK8K,EAAYkF,0NAKZqjB,2MAKAtW,gOAS1BtrB,SAASuD,KAAKC,YAAYqa,GAC1Bzb,YAAW,KACPyb,EAAE5b,MAAM4G,QAAU,IAClBq6B,IAAqB,GACtB,IACP,CAEA,SAAST,GAA2BE,GAE5BQ,IAAwB56B,aAAa46B,IACrCC,IAAgB5mB,cAAc4mB,IAGlC,MAAMpZ,EAAUhqB,SAASS,cAAc,uBACnCupB,GAASA,EAAQhf,SAGrBq4B,GAA4BV,EAChC,CAGA,SAASW,GAAuBX,GAE5B,MAAM9D,EAAiBvgB,GAAqBrb,WACtCsgC,EAAgBZ,EAAQrtB,MAAK2jB,GAAKA,EAAE/tB,WAAa2zB,IAGjD2E,EAAoBD,GAAejY,MACjBqX,EAAQ9tB,WAAUokB,GAAKA,EAAE/tB,WAAa2zB,IAAkB,EAGhF,GAAIvgB,GAAqBpb,mBAAqBsgC,GAAqB,EAC/D,OAIJ,MAAMxZ,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,0BAGpB,MAAMgiC,EAAOd,EACRztB,QAAO+jB,GAAKA,EAAE3N,MAAQ,IACtB5M,MAAK,CAACR,EAAGmN,IAAMnN,EAAEoN,KAAOD,EAAEC,OAGzBxH,EAAgBxF,GAAqBmgB,cAAgB,EAErDmD,GADev8B,EAAUJ,OAASoU,EAAYpU,OAAS,GAC1B6e,EAEnCkG,EAAQnY,UAAY,6GAGV2xB,GAAqB,EACnB,+DAA+DZ,GAAWY,gBAC1E,yCAAyCZ,GAAWY,gJAIlDC,EAAKrxB,KAAKmkB,GAAW,wDACcA,EAAOjL,QAAQiL,EAAOrrB,WAAa2zB,EAAiB,iBAAmB,8KA0DxH,SAA6BvT,EAAMoY,GAC/B,MAAMC,EAAc,CAChB,EAAG,oDACH,EAAG,oDACH,EAAG,qDAGP,GAAID,EACA,OAAQC,EAAYrY,IAAS,yBACtB,wEAGX,OAAOqY,EAAYrY,IAAS,uBAChC,CArE0CsY,CAAoBrN,EAAOjL,KAAMiL,EAAOrrB,WAAa2zB,oEACrB,IAAhBtI,EAAOjL,KAAa,OAAS,+DACxCiL,EAAOjL,gEACPiL,EAAOrrB,8HAEDqrB,EAAOhY,gBAAkB,0EACzBgY,EAAOtxB,OAAS,iGAGtD0Z,KAAK,0CAEN6kB,EAAoB,EAAI,2hBAMSA,6DACA3E,uHAEM0E,GAAehlB,gBAAkB,0EACjCglB,GAAet+B,OAAS,+FAG7D,qlBAQyCs+B,GAAehlB,gBAAkB,4ZAKjCqjB,0ZAKA4B,iPAUzDxjC,SAASuD,KAAKC,YAAYwmB,GAC1B5mB,uBAAsB,IAAM4mB,EAAQ3pB,UAAU8D,IAAI,SAiBtD,CAEA,SAAS0/B,GAAa34B,GAElBoT,GAAqB7b,aAAe6b,GAAqB7b,aAAayS,QAClEqhB,GAAUA,EAAOrrB,WAAaA,IAI9BpJ,OAAO+2B,eACP/2B,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,iBACPm1B,QAAS,CAAEnqB,cAKnBkuB,IACJ,CAEA,SAASr4B,KACL,MAAMH,EAAYZ,SAASS,cAAc,eACnCI,EAAkBb,SAASS,cAAc,qBACzCskB,EAAe/kB,SAASS,cAAc,2BACtCqjC,EAAe9jC,SAASS,cAAc,kBAExCG,EAAUP,UAAUC,SAAS,SAC7BM,EAAUP,UAAU2K,OAAO,QAC3BnK,EAAgBR,UAAU2K,OAAO,QACjC+Z,EAAa1kB,UAAU2K,OAAO,cAC1B84B,GAAcA,EAAazjC,UAAU2K,OAAO,UAEhDpK,EAAUP,UAAU8D,IAAI,QACxBtD,EAAgBR,UAAU8D,IAAI,QAC9B4gB,EAAa1kB,UAAU8D,IAAI,cACvB2/B,GAAcA,EAAazjC,UAAU8D,IAAI,QAErD,CAEA,SAAS4/B,KAEL,MAAMC,EAAkB,CACpBC,UAAWjkC,SAASS,cAAc,oEAClCyjC,KAAMlkC,SAASS,cAAc,0DAC7B0jC,WAAYnkC,SAASS,cAAc,sEACnC6zB,MAAOt0B,SAASS,cAAc,4DAC9B2jC,SAAUpkC,SAASS,cAAc,kEACjC4jC,cAAerkC,SAASS,cAAc,0BAI1C,IAAIskB,EAAe/kB,SAASS,cAAc,2BACrCskB,IACDA,EAAe/kB,SAASwB,cAAc,OACtCujB,EAAatjB,UAAY,yBACzBzB,SAASuD,KAAKC,YAAYuhB,IAI9BA,EAAalT,UAAY,GAIzB,MAAMyyB,EAAetkC,SAASwB,cAAc,UAC5C8iC,EAAa7iC,UAAY,mBACzB6iC,EAAav/B,GAAK,oBAClBu/B,EAAazyB,UAAY,8BACzByyB,EAAav8B,QAAUhH,GACvBgkB,EAAavhB,YAAY8gC,GAGzB,MAAMC,EAAUvkC,SAASwB,cAAc,UACvC+iC,EAAQ9iC,UAAY,yBACpB8iC,EAAQx/B,GAAK,eACbw/B,EAAQ1yB,UAAY,8BACpB0yB,EAAQx8B,QAAU8tB,IAAgB,WAAavnB,EAAW,iBAAmB,EAC7EyW,EAAavhB,YAAY+gC,GAGzB,MAAMC,EAAgBxkC,SAASwB,cAAc,UAC7CgjC,EAAc/iC,UAAY,+BAC1B+iC,EAAcz/B,GAAK,qBACnBy/B,EAAc3yB,UAAY,gCAC1B2yB,EAAcz8B,QAAUuiB,GACxBvF,EAAavhB,YAAYghC,GAGzB,MAAMC,EAAWzkC,SAASwB,cAAc,UACxCijC,EAAShjC,UAAY,0BACrBgjC,EAAS1/B,GAAK,gBACd0/B,EAAS5yB,UAAY,mCACrB4yB,EAAS18B,QAAUqiB,GACnBrF,EAAavhB,YAAYihC,GAGzB,MAAMC,EAAc1kC,SAASwB,cAAc,UAC3CkjC,EAAYjjC,UAAY,6BACxBijC,EAAY3/B,GAAK,mBACjB2/B,EAAY7yB,UAAY,6BACxB6yB,EAAY38B,QAAU,WAElB,MAAM48B,EAAqB3kC,SAASS,cAAc,wBAC9CkkC,GAAoBA,EAAmBtkC,UAAU8D,IAAI,OAC7D,EACA4gB,EAAavhB,YAAYkhC,GAGzB,MAAME,EAAY5kC,SAASwB,cAAc,UACzCojC,EAAUnjC,UAAY,kCACtBmjC,EAAU7/B,GAAK,wBACf6/B,EAAU/yB,UAAY,0CACtB+yB,EAAU78B,QAAU,WAChB,MAAM48B,EAAqB3kC,SAASS,cAAc,wBAC9CkkC,GAAoBA,EAAmBtkC,UAAU8D,IAAI,OAC7D,EACA4gB,EAAavhB,YAAYohC,GAGzBj9B,OAAOk9B,OAAOb,GAAiB//B,SAAQ6D,IAC/BA,GAAUA,EAAO+oB,YACjB/oB,EAAO+oB,WAAWlT,YAAY7V,EAClC,GAER,CAKA,SAAS0X,KACL,MAAMhV,EAAQxK,SAASI,eAAe,aAClCoK,GACAA,EAAMnK,UAAU8D,IAAI,OAE5B,CAEA,SAAS0J,KACL,MAAMrD,EAAQxK,SAASI,eAAe,aAClCoK,GACAA,EAAMnK,UAAU2K,OAAO,OAE/B,CAEA,SAASqD,IACarO,SAASS,cAAc,eAAzC,MACMi0B,EAAqB10B,SAASS,cAAc,yBAC5C+S,EAAmBxT,SAASI,eAAe,aAC3CI,EAAeR,SAASS,cAAc,kBACtCqkC,EAAkB9kC,SAASS,cAAc,gBAE3C4D,aAEIqwB,IAAoBA,EAAmBzyB,MAAMiC,QAAU,SACvD1D,IAAcA,EAAayB,MAAMiC,QAAU,SAG3CsP,IACAA,EAAiBxN,YAAc3B,YAAY8G,eAAeD,UAAY7G,YAAY+G,OAIlF05B,IACAA,EAAgB7iC,MAAMiC,QAAU,QAIpC0wB,OAGIF,IAAoBA,EAAmBzyB,MAAMiC,QAAU,QACvD1D,IAAcA,EAAayB,MAAMiC,QAAU,QAG3C4gC,IACAA,EAAgB7iC,MAAMiC,QAAU,SAG5C,CAEA,SAASsb,KACL,MAAMhV,EAAQxK,SAASI,eAAe,aAClCoK,GACAA,EAAMnK,UAAU8D,IAAI,OAE5B,CAEA,SAAS0J,KACL,MAAMrD,EAAQxK,SAASI,eAAe,aAClCoK,GACAA,EAAMnK,UAAU2K,OAAO,OAE/B,CAyBA,SAASgjB,KACL,MAAM5a,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cAE3CgT,EAAU/S,UAAU8Z,OAAO,UAC3B9G,EAAWhT,UAAU8Z,OAAO,SAChC,CAEA,SAAS9J,KACL,MAAM00B,EAAkB/kC,SAASS,cAAc,uBAE1C4D,aAAgBA,aAAsC,iBAAvBA,YAAY8H,OAC5C44B,EAAgB/+B,YAAc,gBAE9B++B,EAAgB/+B,YAAc,YAEtC,CAEA,SAASg/B,KAELv2B,MAAM,6BACV,CAEA,SAASw2B,KAELx2B,MAAM,sCACV,CAEA,SAASy2B,KAELz2B,MAAM,0BACV,CAEA,SAAS02B,KAEL12B,MAAM,+BACV,CAEA,SAASqY,GAAc/H,EAASqmB,EAAOC,EAAKvsB,EAAW,KAMnD,IAJAssB,EAAQre,OAAOqe,OACfC,EAAMte,OAAOse,IAKT,YADAtmB,EAAQ/Y,YAAcq/B,GAI1B,MAEMC,GAFaD,EAAMD,GACV,GAEf,IAAIG,EAAUH,EACVI,EAAa,EAkBjBpiC,uBAhBA,SAASqiC,IACLF,GAAWD,EACXE,IAGIA,GAVO,IAWNF,EAAO,GAAKC,GAAWF,GACvBC,EAAO,GAAKC,GAAWF,EACxBtmB,EAAQ/Y,YAAcF,KAAKG,MAAMo/B,IAIrCtmB,EAAQ/Y,YAAcF,KAAKG,MAAMs/B,GACjCniC,sBAAsBqiC,GAC1B,GAGJ,CAEA,SAASzsB,GAAiBzK,EAASue,GAC/B,MAAM4Y,EAAe1lC,SAASwB,cAAc,OAC5CkkC,EAAajkC,UAAY,qBAAqBqrB,IAC9C4Y,EAAa1/B,YAAcuI,EAC3BvO,SAASuD,KAAKC,YAAYkiC,GAE1BtjC,YAAW,IAAMsjC,EAAarlC,UAAU8D,IAAI,SAAS,IAErD/B,YAAW,KACPsjC,EAAarlC,UAAU2K,OAAO,QAC9B5I,YAAW,IAAMsjC,EAAa16B,UAAU,IAAI,GAC7C,IACP,CAEA,SAAS0R,EAAgB9a,EAAGC,EAAGirB,GAC3B,MACM/P,EAAkB,aAAT+P,EACX,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WAE3B,IAAK,IAAIzrB,EAAI,EAAGA,EALM,GAKaA,IAAK,CACpC,MAAME,EAAWvB,SAASwB,cAAc,OACxCD,EAASE,UAAY,YAAYqrB,IAEjC,MAAMjQ,EAAuB,EAAhB/W,KAAK6T,SAAe,EAC3BwD,EAASrX,KAAK6T,SAAW7T,KAAKsX,GAAK,EACnCuoB,EAA2B,IAAhB7/B,KAAK6T,SAAiB,GAEvCpY,EAASU,MAAMob,MAAQ,GAAGR,MAC1Btb,EAASU,MAAMqb,OAAS,GAAGT,MAC3Btb,EAASU,MAAM2jC,aAAe,MAC9BrkC,EAASU,MAAMgb,gBAAkBF,EAAOjX,KAAK4T,MAAM5T,KAAK6T,SAAWoD,EAAO3L,SAC1E7P,EAASU,MAAMib,SAAW,QAC1B3b,EAASU,MAAMC,KAAO,GAAGN,MACzBL,EAASU,MAAME,IAAM,GAAGN,MAExB7B,SAASuD,KAAKC,YAAYjC,GAE1B,MAAMskC,EAAejkC,EAAIkE,KAAK0X,IAAIL,GAASwoB,EACrCG,EAAejkC,EAAIiE,KAAK2X,IAAIN,GAASwoB,EAE3CpkC,EAASmE,QAAQ,CACb,CAAE0uB,UAAW,2BAA4BvrB,QAAS,GAClD,CAAEurB,UAAW,aAAayR,EAAejkC,QAAQkkC,EAAejkC,gBAAiBgH,QAAS,IAC3F,CACCiQ,SAAU,IACVitB,OAAQ,iCACTC,SAAW,IAAMzkC,EAASyJ,QACjC,CACJ,CAEAvC,eAAew9B,KACX,MAAMr7B,EAAgB5K,SAASI,eAAe,kBACxCuK,EAAW3K,SAASI,eAAe,YAGzC,IAAI8K,EACJ,GAAI7G,YACA6G,EAAW7G,YAAY8G,eAAeD,UAC5B7G,YAAY+G,MAAMC,MAAM,KAAK,OACpC,CAIH,GAHAH,EAAWN,EAAczD,MAAMwrB,QAG1BznB,GAAYA,EAASkG,OAAS,GAAKlG,EAASkG,OAAS,GAGtD,OAFA0d,GAAe,qDACflkB,EAAcK,QAMlB,IAD2B,mCACHiM,KAAKhM,GAGzB,OAFA4jB,GAAe,yFACflkB,EAAcK,OAGtB,CAEA,MAAM1I,EAAMoI,EAASxD,MAAMwrB,OAG3B,IAAKpwB,GAAsB,IAAfA,EAAI6O,SAAiB,QAAQ8F,KAAK3U,GAG1C,OAFAusB,GAAe,+CACfnkB,EAASM,QAIb,IAEI,IAAIwzB,EAAe,EACnB,GAAIp6B,YACA,IACI,MAAMI,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,iBACLC,OAAO,SACPC,GAAG,UAAWT,YAAYU,IAC1BC,UAEAN,GAASD,IACVg6B,EAAeh6B,EAAKQ,MAG5B,CAAE,MAAOP,GAET,CAIJ5C,OAAO+2B,cAAgBl0B,EAAeuwB,QAAQ,UAAU3yB,KAGxD+b,GAAqBrb,WAAaiI,EAClCoT,GAAqBmgB,aAAeA,EACpCngB,GAAqB/b,IAAMA,QAGrBT,OAAO+2B,cAAcrD,YAG3B0Q,KAGApkC,OAAO+2B,cACF1D,GAAG,YAAa,CAAEj1B,MAAO,aAAc,EAAGm1B,cACvCkF,GAAclF,GACd/W,GAAqB1b,MAAQ,OAAO,IAEvCuyB,GAAG,YAAa,CAAEj1B,MAAO,iBAAkB,EAAGm1B,cACrB,WAAlBA,EAAQzyB,QACR0b,GAAqB1b,MAAQ,SAC7B0b,GAAqB9b,SAAW6yB,EAAQ7yB,SACxC8b,GAAqB3b,SAAW0yB,EAAQ1yB,SACxC63B,KACJ,IAEHrF,GAAG,YAAa,CAAEj1B,MAAO,gBAAiB,EAAGm1B,cAE1C,IAAK/W,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAamqB,EAAQnqB,WAAW,CAC/EoT,GAAqB7b,aAAaf,KAAK,CACnCwJ,SAAUmqB,EAAQnqB,SAClBqT,eAAgB,EAChBtZ,MAAO,IAIX,MAAMo2B,EAAqBr7B,SAASI,eAAe,gBAC/Ci7B,IACAA,EAAmBr1B,YAAcsY,GAAqB7b,aAAa2O,QAIvE,MAAM8nB,EAAcl5B,SAASI,eAAe,sBACxC84B,GAA4C,OAA7BA,EAAYC,cAC3BC,IAER,KAIRt3B,OAAO+2B,cAAc1D,GAAG,YAAa,CAAEj1B,MAAO,wBAAyB,EAAGm1B,cAElEA,GAA6B,WAAlBA,EAAQzyB,QAEnB0b,GAAqB1b,MAAQ,SAC7B0b,GAAqB9b,SAAW6yB,EAAQ7yB,SACxC8b,GAAqB3b,SAAW0yB,EAAQ1yB,SAGpC2b,GAAqBqc,gBAErB36B,SAASI,eAAe,gBAAgB6B,MAAMiC,QAAU,OACxDs2B,MAER,UAIE14B,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,cACPm1B,QAAS,CACLnqB,SAAUA,EACV4hB,KAAM,cACN7nB,MAAOw5B,EACP/D,UAAU,IAAI5pB,MAAO4d,iBAG7BpQ,GAAqBqc,eAAgB,QAG/B74B,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,oBACPm1B,QAAS,CACLnqB,SAAUA,EACV0vB,YAAa,WACbvzB,UAAWyJ,KAAKrL,SAKxBzF,SAASI,eAAe,gBAAgB6B,MAAMiC,QAAU,OAGxD9B,YAAW,KAG4B,WAA/Bkc,GAAqB1b,OACrBi4B,IACJ,GACD,IAEP,CAAE,MAAOn2B,GAELoqB,GAAe,2CACnB,CACJ,CA5XA9uB,SAASC,iBAAiB,mBAAoB8jC,IAmE9C/jC,SAASC,iBAAiB,SAAUU,IAChC,MAAMmwB,EAAY9wB,SAASI,eAAe,aACpC+lC,EAAcrV,GAAWrwB,cAAc,uBACvCw9B,EAAcj+B,SAASI,eAAe,gBACtCgmC,EAAgBnI,GAAax9B,cAAc,mBAG7CqwB,GAAWzwB,UAAUC,SAAS,SAC7B6lC,EAAY7lC,SAASK,EAAEG,SACvBH,EAAEG,OAAO2C,QAAQ,iBAClBoK,KAI+B,UAA/BowB,GAAah8B,MAAMiC,SAClBkiC,EAAc9lC,SAASK,EAAEG,SACzBH,EAAEG,OAAO2C,QAAQ,oBAClBw6B,EAAYh8B,MAAMiC,QAAU,OAChC,IAySJ,MAAMmiC,GAAc,CAChBC,SAAU,CACNvhC,GAAI,eACJ6T,KAAM,GACNgnB,OAAQ,GACR9S,KAAM,SACNjU,KAAM,gBACN/F,KAAM,YACNvE,QAAS,cAEbg4B,SAAU,CACNxhC,GAAI,eACJ6T,KAAM,GACNgnB,OAAQ,GACR9S,KAAM,SACNjU,KAAM,iBACN/F,KAAM,YACNvE,QAAS,eAEbi4B,YAAa,CACTzhC,GAAI,kBACJ6T,KAAM,GACNkU,KAAM,SACNjU,KAAM,UACN/F,KAAM,eACNvE,QAAS,WAEbk4B,OAAQ,CACJ1hC,GAAI,aACJ6T,KAAM,IACNE,SAAU,IACVgU,KAAM,SACNjU,KAAM,eACN/F,KAAM,SACNvE,QAAS,SAEbm4B,UAAW,CACP3hC,GAAI,gBACJ6T,KAAM,IACNE,SAAU,EACVgU,KAAM,SACNjU,KAAM,yBACN/F,KAAM,aACNvE,QAAS,wBAEbo4B,YAAa,CACT5hC,GAAI,kBACJ6T,KAAM,IACNE,SAAU,IACVgU,KAAM,SACNjU,KAAM,WACN/F,KAAM,eACNvE,QAAS,UAIjB,SAASuwB,KAEL,MAAM8H,EAAqB,CACvBN,SAAU,CACNvhC,GAAI,eACJ6T,KAAM,GACNgnB,OAAQ,GACR9S,KAAM,SACNjU,KAAM,gBACN/F,KAAM,YACNvE,QAAS,cAEbg4B,SAAU,CACNxhC,GAAI,eACJ6T,KAAM,GACNgnB,OAAQ,GACR9S,KAAM,SACNjU,KAAM,iBACN/F,KAAM,YACNvE,QAAS,eAEbi4B,YAAa,CACTzhC,GAAI,kBACJ6T,KAAM,GACNkU,KAAM,SACNjU,KAAM,UACN/F,KAAM,eACNvE,QAAS,WAEbk4B,OAAQ,CACJ1hC,GAAI,aACJ6T,KAAM,IACNE,SAAU,IACVgU,KAAM,SACNjU,KAAM,eACN/F,KAAM,SACNvE,QAAS,SAEbm4B,UAAW,CACP3hC,GAAI,gBACJ6T,KAAM,IACNkU,KAAM,SACNjU,KAAM,yBACN/F,KAAM,aACNvE,QAAS,wBAEbo4B,YAAa,CACT5hC,GAAI,kBACJ6T,KAAM,IACNE,SAAU,IACVgU,KAAM,SACNjU,KAAM,WACN/F,KAAM,eACNvE,QAAS,UAKjB,SAASs4B,IACL7mC,SAASgE,iBAAiB,iBAAiBC,SAAQ6iC,IAC/C,MAAMC,EAAcD,EAAKrmC,cAAc,iBACvC,IAAKsmC,EAAa,OAElB,MAAMnuB,EAAOtU,SAASyiC,EAAY/gC,aAC5BghC,EAAe3tB,EAAYpU,OAAS2T,EAE1CkuB,EAAKzmC,UAAU8Z,OAAO,YAAa6sB,GACnCF,EAAK7kC,MAAMglC,OAASD,EAAe,UAAY,cAC/CF,EAAK7kC,MAAM4G,QAAUm+B,EAAe,IAAM,KAAK,GAEvD,CAgBA,MAAMhqB,EAAYhd,SAASS,cAAc,uBACzC,IAAKuc,EAAW,OAGhBA,EAAUnL,UAAY,GAjBtB,SAA2B7K,EAAQ,GAC/B,MAAMkgC,EAAcv/B,OAAOwJ,KAAKy1B,GAC1BO,EAAe,GAErB,KAAOA,EAAa/1B,OAASpK,GAASkgC,EAAY91B,OAAS,GAAG,CAC1D,MAAMmR,EAAczc,KAAK4T,MAAM5T,KAAK6T,SAAWutB,EAAY91B,QAC3D+1B,EAAazlC,KAAKwlC,EAAYpG,OAAOve,EAAa,GAAG,GACzD,CAEA,OAAO4kB,CACX,CAUAC,CAAkB,GAAGnjC,SAAQovB,IACzB,MAAMoM,EAAUmH,EAAmBvT,GAE7BgU,EAAcrnC,SAASwB,cAAc,OAC3C6lC,EAAY5lC,UAAY,gBAAgBg+B,EAAQ3S,OAChDua,EAAYtiC,GAAK06B,EAAQ16B,GAEzBsiC,EAAYx1B,UAAY,+BACJ4tB,EAAQ5mB,kEACI4mB,EAAQ3sB,qDACR2sB,EAAQ7mB,uBAIxCyuB,EAAYt/B,QAAUU,UAIlB,GAAI4Q,EAAYpU,MAAQw6B,EAAQ7mB,KAE5B,YADAI,GAAiB,oBAAqB,SAK1C,MAAMsuB,EAAehpB,GAAqB7b,aAAayS,QAAO+jB,GAC1DA,EAAE/tB,WAAaoT,GAAqBrb,iBACrB06B,IAAf1E,EAAE/tB,UACa,OAAf+tB,EAAE/tB,WAGN,GAA4B,IAAxBo8B,EAAal2B,OAEb,YADA4H,GAAiB,uCAAwC,QAK7D,MAAMuuB,EAAeD,EAAaxhC,KAAK4T,MAAM5T,KAAK6T,SAAW2tB,EAAal2B,SACpEuuB,EAAWtmB,EAAYpU,MAC7BoU,EAAYpU,OAASw6B,EAAQ7mB,KAG7B5Y,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC7CA,EAAGT,YAAcqT,EAAYpU,KAAK,IAGtC,UAEUnD,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,iBACPm1B,QAAS,CACLmS,WAAYnU,EACZmM,WAAY+H,EAAar8B,SACzBw0B,SAAUphB,GAAqBrb,WAC/Bw8B,QAASA,KAKjBzmB,GAAiB,QAAQymB,EAAQ3sB,WAAWy0B,EAAar8B,YAAau0B,EAAQ3S,YAGxEhrB,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,kBACPm1B,QAAS,CACLnqB,SAAUoT,GAAqBrb,WAC/Bsb,eAAgBlF,EAAYkF,eAC5BtZ,MAAOoU,EAAYpU,MACnBoC,UAAWyJ,KAAKrL,SAKxBq5B,IAEJ,CAAE,MAAOp6B,GAGL2U,EAAYpU,MAAQ06B,EACpB3/B,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC7CA,EAAGT,YAAc25B,CAAQ,IAE7B3mB,GAAiB,yBAA0B,QAC/C,CACA8F,IAAyB,EAG7B9B,EAAUxZ,YAAY6jC,EAAY,IAItCR,IAGA,MAAMtiB,EAAcvkB,SAASS,cAAc,eAC3C,GAAI8jB,EAAa,CACI,IAAI+M,kBAAiB,KAClCuV,GAAoB,IAGf/U,QAAQvN,EAAa,CAC1BwN,WAAW,EACX0V,eAAe,EACfzV,SAAS,GAEjB,CAGA,OAAO6U,CACX,CAGA,SAASa,KACP1nC,SAASgE,iBAAiB,iBAAiBC,SAAQ6iC,IACjD,MAAMC,EAAcD,EAAKrmC,cAAc,iBACvC,IAAKsmC,EAAa,OAElB,MAAMnuB,EAAOtU,SAASyiC,EAAY/gC,aAC5BghC,EAAe3tB,EAAYpU,OAAS2T,EAE1CkuB,EAAKzmC,UAAU8Z,OAAO,YAAa6sB,GACnCF,EAAK7kC,MAAMglC,OAASD,EAAe,UAAY,cAC/CF,EAAK7kC,MAAM4G,QAAUm+B,EAAe,IAAM,KAAK,GAEnD,CAEA,SAAS7E,KAEL,MAAMwF,EAAe3nC,SAASgE,iBAAiB,iBAGzC4jC,EAAevuB,EAAYpU,OAAS,EAG1C0iC,EAAa1jC,SAAQ6iC,IACjB,MAAMC,EAAcD,EAAKrmC,cAAc,iBACvC,IAAKsmC,EAAa,OAGlB,MAAMnuB,EAAOtU,SAASyiC,EAAY/gC,aAG5BkU,EAAY0tB,GAAgBhvB,EAGlCkuB,EAAKzmC,UAAU8Z,OAAO,YAAaD,GACnC4sB,EAAK7kC,MAAM4G,QAAUqR,EAAY,IAAM,MACvC4sB,EAAK7kC,MAAMglC,OAAS/sB,EAAY,UAAY,aAAa,GAEjE,CAEA,SAAS2tB,KACP,MAAMD,EAAevuB,EAAYpU,OAAS,EAC1CjF,SAASgE,iBAAiB,eAAeC,SAAS8a,IAChD,MAAM+oB,EAAiBxjC,SAASya,EAAQ/Y,cAAgB,EACpD8hC,IAAmBF,GACrBhqB,EAAmBmB,EAAS+oB,EAAgBF,EAE/C,IACDF,IACF,CAIA,SAASpO,GAAe/2B,GAEpB,MACMwlC,EAAU,GADAjmC,OAAO4U,SAAS2iB,OAASv3B,OAAO4U,SAASO,iBACtB1U,IAKnC,IAAIs5B,OAAO,CACP9c,QAAS/e,SAASI,eAAe,UACjC+G,MAAO4gC,EACPlrB,KAAM,IACNif,gBAAiB,EACjBC,WAAY,UACZhiB,WAAY,UACZlN,MAAO,KAEf,CAEA,SAAS4J,KAGL,GAAI3U,OAAO4U,SAASC,KAAKC,WAAW,UAAW,CAC3C,MAAMrU,EAAMT,OAAO4U,SAASC,KAAKE,QAAQ,SAAU,IAInD,GAAI,4BAA4BK,KAAKC,UAAUC,WAAY,CACvD,MAAM4wB,EAAYhoC,SAASI,eAAe,cACpC6nC,EAAcD,EAAUvnC,cAAc,sBAG5CT,SAASgE,iBAAiB,WAAWC,SAAQwT,IACzCA,EAAOxV,MAAMiC,QAAU,MAAM,IAIjC8jC,EAAU/lC,MAAMiC,QAAU,OAC1B+jC,EAAYjiC,YAAczD,EAG1BylC,EAAUxpB,QAAQjc,IAAMA,CAC5B,MAEIuU,QAAQC,UAAU,GAAI/W,SAASgX,MAAOlV,OAAO4U,SAASO,UACtD1M,EAAchI,EAEtB,CACJ,CAEA,SAAS2lC,KACL,MAAMF,EAAYhoC,SAASI,eAAe,cACpCmC,EAAMylC,EAAUxpB,QAAQjc,IAG9BylC,EAAU/lC,MAAMiC,QAAU,OAG1BqG,EAAchI,EAClB,CAIA,SAASyW,GAAiBzK,EAASue,EAAO,QACtC,MAAM4Y,EAAe1lC,SAASwB,cAAc,OAC5CkkC,EAAajkC,UAAY,qBAAqBqrB,IAC9C4Y,EAAa1/B,YAAcuI,EAE3BvO,SAASuD,KAAKC,YAAYkiC,GAC1BtiC,uBAAsB,IAAMsiC,EAAarlC,UAAU8D,IAAI,UAEvD/B,YAAW,KACPsjC,EAAarlC,UAAU2K,OAAO,QAC9B5I,YAAW,IAAMsjC,EAAa16B,UAAU,IAAI,GAC7C,IACP,CAEA,SAASm9B,GAAerb,GACpB,MAAM1Z,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cAE9B,WAAT0sB,GACA1Z,EAAU/S,UAAU8D,IAAI,UACxBkP,EAAWhT,UAAU2K,OAAO,YAE5BoI,EAAU/S,UAAU2K,OAAO,UAC3BqI,EAAWhT,UAAU8D,IAAI,UAEjC,CAEAsE,eAAe2/B,GAAmBC,GAC9B,GAA2B,aAAtBhkC,aAAa+H,KAAoB,OAEtC,MAAMk8B,EAAe,CACjBvjC,GAAI+L,KAAKrL,MACTqN,KAAM,gBACN5J,MAAO,GACP6K,aAAc,GACdw0B,eAAe,GAInB,IAAK,MAAMtzB,KAAUozB,EAAS,CAC1B,MAAM7zB,EAAO1C,GAAoBE,MAAMsD,MAAKR,GAAKA,EAAE/P,KAAOkQ,IACtDT,IACA8zB,EAAap/B,MAAMxH,QAAQ8S,EAAKtL,OAChCo/B,EAAav0B,aAAarS,QAAQ8S,EAAKT,cAE/C,CAEA,OAAOu0B,CACX,CAEA7/B,eAAe+/B,GAAoBvzB,GAC/B,GAA2B,aAAtB5Q,aAAa+H,KAAoB,OAEtC,MAAMoI,EAAO1C,GAAoBE,MAAMsD,MAAKR,GAAKA,EAAE/P,KAAOkQ,IAC1D,IAAKT,EAAM,OAaX,MAVqB,CACjBhS,SAAUgS,EAAKtL,MAAMkJ,KAAI,CAAC+a,EAAMvY,KAAU,CACtCuY,KAAMA,EACNkR,YAAa7pB,EAAKT,aAAaa,OAEnC6zB,gBAAgB,EAChB/lC,UAAW2B,YAAYU,GACvBkQ,OAAQA,EAIhB,CAEA,SAASiP,KAIL,MAAQlH,UAAW0rB,EAAgBxkC,QAASykC,GAAiBC,KAC7D5oC,SAASI,eAAe,mBAAmBoD,YAAYklC,GAEvDrvB,EAAYwvB,yBAA0B,EACtCxvB,EAAYyvB,0BAA2B,EAEvCzlB,KAEArjB,SAASgE,iBAAiB,gBAAgBC,SAAStD,IAC/C,GAAIA,EAAG,CACHA,EAAEiZ,UAAW,EACbjZ,EAAEsB,MAAM4G,QAAU,MAElB,MAAMkgC,EAAkB/oC,SAASwB,cAAc,OAC/CunC,EAAgBtnC,UAAY,gBAC5BsnC,EAAgBl3B,UAAY,IAC5Bk3B,EAAgB9mC,MAAMuhB,QAAU,uQAUhC7iB,EAAEsB,MAAMib,SAAW,WACnBvc,EAAE6C,YAAYulC,EAClB,KAGJ,MAAMrH,EAAiB1hC,SAASS,cAAc,oBAC9C,GAAIihC,EAAgB,CAChB,MAAMtc,EAAkBsc,EAAejhC,cAAc,aACjD2kB,IACAA,EAAgBnjB,MAAMwjB,OAAS,UAEvC,CAGApM,EAAY2vB,gBAAmBhuB,IAE3BguB,GADqBhpC,SAASS,cAAc,mBACdua,EAAc,EAGhD5Y,WAAWihB,GAAsB,KACjCjhB,WAAWihB,GAAsB,IAGrC,CAGA,SAAS4lB,KACP,MAAMjmB,EAAiBhjB,SAASS,cAAc,oBAC9C,IAAKuiB,EAEH,OAIF,MAAMue,EAAUvhC,SAASwB,cAAc,OACvC+/B,EAAQ9/B,UAAY,WACpB8/B,EAAQ1vB,UAAY,qCAGpB0vB,EAAQt/B,MAAMuhB,QAAU,yOAaxB+d,EAAQ9gC,cAAc,mBAAmBwB,MAAMuhB,QAAU,2PAUzD,MAAM0lB,EAAWlpC,SAASwB,cAAc,SACxC0nC,EAASr3B,UAAY,wKAMrB7R,SAAS0wB,KAAKltB,YAAY0lC,GAG1BlmB,EAAenR,UAAY,GAC3BmR,EAAexf,YAAY+9B,EAC7B,CAEA,SAAS4H,KACP,MAAMzH,EAAiB1hC,SAASS,cAAc,oBAC9C,IAAKihC,EAAgB,OAErB,MAAM77B,EAAW67B,EAAejhC,cAAc,aAC9C,IAAKoF,EAAU,OAGfA,EAAS5D,MAAMwjB,OAAS,UAGxB,MAAM2jB,EAAcppC,SAASwB,cAAc,SAC3C4nC,EAAYv3B,UAAY,uMASxB7R,SAAS0wB,KAAKltB,YAAY4lC,EAC5B,CAEA,SAASC,KAEP,MAAMC,EAAgBtpC,SAASI,eAAe,oBAC1CkpC,GACFA,EAAct+B,SAGhB,MAAMu+B,EAAYvpC,SAASwB,cAAc,SACzC+nC,EAAUxkC,GAAK,mBACfwkC,EAAU13B,UAAY,s2KA0NtB7R,SAAS0wB,KAAKltB,YAAY+lC,EAC5B,CAEA,SAAS5H,KAEP,IAAKtoB,EAAY6H,YAAa,OAAO,EAIrC,MAAMwgB,EAAiB1hC,SAASS,cAAc,oBAC9C,IAAKihC,EAEH,OAAO,EAGT,MAAM77B,EAAW67B,EAAejhC,cAAc,aAC9C,IAAKoF,EAEH,OAAO,EAIT,MAAM4b,EAAapI,EAAYnQ,MAAMkI,OAC/BmI,EAAeF,EAAYE,cAAgB,EAE3CiwB,EADiB1jC,KAAKmW,IAAI,EAAGwF,EAAalI,GACHkI,EAKvC4D,EAAgB,EAAIvf,KAAKsX,GAAK,GAGpCvX,EAAS5D,MAAMsjB,iBAAmBF,GAAiB,EAAImkB,GAGvD,MAAMjI,EAAUvhC,SAASS,cAAc,mBACvC,GAAI8gC,EAAS,CACX,MAAMkI,EAAU,EACVC,EAAU,GACVC,EAAc7jC,KAAKmW,IAAIwtB,EAASC,EAAUF,GAEhDjI,EAAQt/B,MAAMob,MAAQ,GAAGssB,MACzBpI,EAAQt/B,MAAMqb,OAAS,GAAGqsB,MAG1BpI,EAAQt/B,MAAMC,KAAW,GAAKynC,EAAY,EAArB,IACrBpI,EAAQt/B,MAAME,IAAU,GAAKwnC,EAAY,EAArB,GACtB,CAGA,GAAIH,EAAsB,IAExB3jC,EAAS5D,MAAMwjB,OAAS,UACxB5f,EAASxF,UAAU2K,OAAO,gBACrB,GAAIw+B,EAAsB,KAM/B,GAJA3jC,EAAS5D,MAAMwjB,OAAS,UACxB5f,EAASxF,UAAU2K,OAAO,WAGtBw+B,GAAuB,MAASnwB,EAAYwvB,wBAAyB,CACvExvB,EAAYwvB,yBAA0B,EAGlCtH,IAEFA,EAAQt/B,MAAM8X,WAAa,qDAC3BwnB,EAAQt/B,MAAMmyB,UAAY,aAC1BmN,EAAQt/B,MAAMiT,OAAS,kBAEvB9S,YAAW,KACTm/B,EAAQt/B,MAAMmyB,UAAY,GAC1BmN,EAAQt/B,MAAMiT,OAAS,GACvBqsB,EAAQt/B,MAAM8X,WAAa,sDAAsD,GAChF,MAIL,MAAM6vB,EAAgB9jC,KAAK4T,MAAmB,IAAb+H,GACjCpI,EAAYE,aAAeqwB,EAG3BxnC,YAAW,IAAMu/B,MAAuB,IAC1C,OAOA,GAJA97B,EAAS5D,MAAMwjB,OAAS,UACxB5f,EAASxF,UAAU8D,IAAI,WAGnBqlC,GAAuB,MAASnwB,EAAYyvB,yBAA0B,CACxEzvB,EAAYyvB,0BAA2B,EAGnCvH,IAEFA,EAAQt/B,MAAM8X,WAAa,qDAC3BwnB,EAAQt/B,MAAMmyB,UAAY,aAC1BmN,EAAQt/B,MAAMiT,OAAS,kBAEvB9S,YAAW,KACTm/B,EAAQt/B,MAAMmyB,UAAY,GAC1BmN,EAAQt/B,MAAMiT,OAAS,GACvBqsB,EAAQt/B,MAAM8X,WAAa,sDAAsD,GAChF,MAIL,MAAM6vB,EAAgB9jC,KAAK4T,MAAmB,GAAb+H,GACjCpI,EAAYE,aAAeqwB,EAG3BxnC,YAAW,IAAMu/B,MAAuB,IAC1C,CAIF,OAAI6H,GAAuB,IAAMnwB,EAAYooB,eAE3CpoB,EAAYooB,cAAe,GACpB,EAIX,CAEA,SAASoI,KACL7lB,GAAe,IAAI,KACfE,KACAzI,EAAsC,EAA3BpC,EAAYnQ,MAAMkI,QAC7B+S,IAAsB,GAE9B,CAEA,SAASA,KAEP/hB,WAAWihB,GAAsB,KACjCymB,KACAC,KAEA,MAAMrkB,EAAsB1lB,SAASI,eAAe,iBAChDslB,IACFA,EAAoBzjB,MAAMsb,YAAY,QAAS,UAAW,aAC1DmI,EAAoBzjB,MAAMsb,YAAY,cAAe,gCAAiC,aACtFmI,EAAoBzjB,MAAMsb,YAAY,YAAa,wBAAyB,cAG9E,IACMlE,EAAYE,aAAe,GAAKmM,GAClCA,EAAoBrlB,UAAU8D,IAAI,WAClC/B,YAAW,KACTiiB,KACAqB,EAAoBrlB,UAAU2K,OAAO,WACrC0a,EAAoBrlB,UAAU8D,IAAI,YAClC/B,YAAW,KACTsjB,EAAoBrlB,UAAU2K,OAAO,WAAW,GAC/C,IAAI,GACN,MAEHqZ,KAGFjiB,YAAW,KACTu/B,IAAqB,GACpB,IAGH,MAAM5b,EAAmB/lB,SAASI,eAAe,WACjD,GAAI2lB,GAAoBjgB,KAAK6T,SAAW,GAAK,CAC3BnJ,MAAM5L,KAAKmhB,EAAiBqQ,UACpC1X,MAAK,IAAM5Y,KAAK6T,SAAW,KAAK1V,SAAQ6D,IAC9Cie,EAAiBviB,YAAYsE,EAAO,GAExC,CACF,CAAE,MAAOpD,GAET,CACF,CAEA,SAAS8iB,KACP,MAAMpB,EAAiBpmB,SAASI,eAAe,mBAC3CgmB,IAEFA,EAAe4jB,gBAAgB,SAG/B5jB,EAAenkB,MAAM8X,WAAa,oFAGpC,MAAMymB,EAAexgC,SAASI,eAAe,iBAK7C,GAJIogC,GACFA,EAAawJ,gBAAgB,SAG3BloC,OAAOmoC,kBAAmB,CAC5B,MAAMjnB,EAAiBhjB,SAASS,cAAc,oBAC1CuiB,IACFA,EAAenR,UAAY/P,OAAOmoC,kBAEtC,CAGsC,mBAA3BC,IACTA,IAEJ,CAGA,SAASC,KAEL,IAAIC,EAAat5B,KAAKrL,MAItBuW,aAAY,KACJlL,KAAKrL,MAAQ2kC,EAJM,KAKnBC,IACJ,GACD,KAGH,CAAC,YAAa,WAAY,SAASpmC,SAAQ/D,IACvCF,SAASC,iBAAiBC,GAAO,KAC7BkqC,EAAat5B,KAAKrL,KAAK,GACzB,IAIN3D,OAAO7B,iBAAiB,gBAAgB,KAChC6B,OAAO+2B,eACP/2B,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,cACPm1B,QAAS,CACLnqB,SAAUoT,GAAqBrb,aAG3C,GAER,CAEA,SAASonC,KACLvoC,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,kBACPm1B,QAAS,CACLnqB,SAAUoT,GAAqBrb,aAG3C,CAGA,SAASqnC,GAAuBrJ,GAC5B,MAAMsJ,EAAiBjsB,GAAqB7b,aACvCic,MAAK,CAACR,EAAGmN,IAAMA,EAAE9M,eAAiBL,EAAEK,iBACpC1J,WAAUokB,GAAKA,EAAE/tB,WAAa+1B,EAAW/1B,WAAY,EAEtDq/B,GAAkB,IAClBC,2BAA2BD,GAEJ,IAAnBA,GAEAzoC,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,gBACPm1B,QAAS,CACLoV,SAAUnsB,GAAqB7b,aAC1Bic,MAAK,CAACR,EAAGmN,IAAMA,EAAE9M,eAAiBL,EAAEK,iBACpC3G,MAAM,EAAG,MAKlC,CAEAnP,eAAe45B,GAA0Bn3B,GAErC,GAAIoT,GAAqBzb,iBAAiB2L,SAAStD,GAAW,OAG9D,MAAM6yB,EAAiBjtB,KAAKrL,MAC5B6Y,GAAqBzb,iBAAiBnB,KAAKwJ,GAG3C,IAAIogB,EAAO,EACX,MAAMof,EAAkBpsB,GAAqBzb,iBAAiB8nC,QAAQz/B,GAClEw/B,EAAkB,IAElBpf,EAAOof,EAAkB,EAGpBpsB,GAAqBtb,cACtBsb,GAAqBtb,YAAc,CAAC,GAExCsb,GAAqBtb,YAAYkI,GAAY,CACzCogB,KAAMA,EACNyS,eAAgBA,IAMxB,MAAMkD,EAAa3iB,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAaA,IAC1E+1B,IACI3V,EAAO,IACP2V,EAAW3V,KAAOA,EAClB2V,EAAWlD,eAAiBA,GAEhCkD,EAAW1iB,eAAiBlF,EAAYkF,eACxC0iB,EAAWh8B,MAAQI,EAAUJ,OAASoU,EAAYpU,OAAS,EAC3Dg8B,EAAWvV,WAAY,SAIrB5pB,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,mBACPm1B,QAAS,CACLnqB,SAAUA,EACVogB,KAAMA,EACN/M,eAAgBlF,EAAYkF,eAC5BtZ,MAAOI,EAAUJ,OAASoU,EAAYpU,OAAS,EAC/CoC,UAAW02B,EACXrS,WAAW,KAKfxgB,IAAaoT,GAAqBrb,YAAcqoB,EAAO,GACvD2X,GAA0B3X,GAI1BhN,GAAqBzb,iBAAiBuO,QAAU,SAC1C4sB,IAEd,CAEA,SAAS4M,KAYL,GAVAC,GAAoBC,cAAe,EAGnCxsB,GAAqBsa,sBAAuB,EAG5Cta,GAAqB1b,MAAQ,QAC7B0b,GAAqBvb,QAAU+N,KAAKrL,MAGhC6Y,GAAqB7b,aAAa2O,QAAU,EAAG,CAC/C,MAAMoxB,EAAgB,IAAIlkB,GAAqB7b,cAC1Cic,MAAK,CAACR,EAAGmN,IAAMA,EAAE9M,iBAAmBL,EAAEK,eAClC8M,EAAE9M,eAAiBL,EAAEK,eAAiB8M,EAAEpmB,MAAQiZ,EAAEjZ,QACtD2S,MAAM,EAAG,GACTxF,KAAI,CAACmkB,EAAQ3hB,KAAU,IAAK2hB,EAAQjL,KAAM1W,EAAQ,EAAGmpB,eAAgBjtB,KAAKrL,MAAQ,IAAOmP,MAE9F9S,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,WACPm1B,QAAS,CACLzyB,MAAO,QACP4/B,cAAeA,EACf9/B,UAAW4b,GAAqB5b,UAChC4/B,WAAW,EACXxpB,SAAUwF,GAAqBvb,SAAWub,GAAqBxb,WAAawb,GAAqBvb,YAIzGsgC,GAA4Bb,EAChC,MACI1gC,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,WACPm1B,QAAS,CACLzyB,MAAO,QACP0/B,WAAW,EACX5/B,UAAW4b,GAAqB5b,aAIxC4L,EAAW,kBAIfy8B,KAGIjpC,OAAO+2B,gBACP/2B,OAAO+2B,cAAcC,cACrBh3B,OAAO+2B,cAAgB,KAE/B,CAEA,SAASkS,KACL,MAAMC,EAASllC,KAAK4T,MAAM,IAAuB,IAAhB5T,KAAK6T,UAAiBtT,WAGnDvE,OAAOo+B,gBACPp+B,OAAOo+B,eAAej8B,SAAQgnC,GAAW1iC,aAAa0iC,KAEtDnpC,OAAOq+B,iBACPr+B,OAAOq+B,gBAAgBl8B,SAAQinC,GAAY1uB,cAAc0uB,KAEzDppC,OAAOqpC,6BACP3uB,cAAc1a,OAAOqpC,6BAErBrpC,OAAOspC,wBACP5uB,cAAc1a,OAAOspC,wBAIzB9sB,GAAuB,CACnBhc,QAAS,KACTC,IAAKyoC,EACLxoC,SAAU,GACVC,aAAc,GACdC,UAAW2B,aAAaU,IAAM,KAC9BpC,SAAU,GACVC,MAAO,YACPC,iBAAkB,GAClB41B,WAAY,KACZv1B,mBAAmB,EACnBJ,UAAW,KACXC,QAAS,KACTC,YAAa,CAAC,EACd21B,eAAe,EACf8F,aAAc,EACdx7B,WAAY,KACZ03B,eAAe,EACf/B,sBAAsB,GAG1Bva,GAAwBvN,KAAKrL,MAGzB3D,OAAO+2B,gBACP/2B,OAAO+2B,cAAcC,cACrBh3B,OAAO+2B,cAAgB,MAI3B,MAAMK,EAAcl5B,SAASI,eAAe,sBAC5C,GAAI84B,EAAa,CACb,MAAMmS,EAASnS,EAAYz4B,cAAc,uBACzCy4B,EAAYrnB,UAAYw5B,EAASA,EAAOzsB,UAAY,EACxD,CAGA,MAAM+c,EAAa37B,SAASI,eAAe,gBACvCu7B,IACAA,EAAW31B,YAAcglC,GAI7B,MAAMM,EAAStrC,SAASI,eAAe,UACvC,GAAIkrC,EAAQ,CACR,MAAMC,EAAM,GAAGzpC,OAAO4U,SAAS2iB,OAASv3B,OAAO4U,SAASO,iBAAiB+zB,IACzE,IAAInP,OAAO,CACP9c,QAASusB,EACTnkC,MAAOokC,EACP1uB,KAAM,IACNif,gBAAiB,EACjBC,WAAY,UACZhiB,WAAY,UACZlN,MAAO,KAEf,CAGIyR,GAAqBhc,UACrBqC,EAAeC,KAAK,iBACfuB,OAAO,CAAEgG,OAAQ,UAAWq/B,WAAY,CAAC,EAAGjpC,IAAKyoC,IACjDlmC,GAAG,KAAMwZ,GAAqBhc,SAC9BqE,MAAK,EAAGjC,YAC2D,IAGxEC,EAAeC,KAAK,uBACfuQ,SACArQ,GAAG,WAAYwZ,GAAqBhc,SACpCqE,MAAK,EAAGjC,YAC2D,KAK5E,MAAMk1B,EAAkB55B,SAASS,cAAc,sBAC3Cm5B,GACAA,EAAgBv5B,UAAU2K,OAAO,WAIrChL,SAASgE,iBAAiB,gDAAgDC,SAAQwC,GAAMA,EAAGuE,WAG3FqO,EAAc,CACVE,aAAc,EACdmlB,cAAe,EACf7jB,YAAa,EACb3R,MAAO,GACPqV,eAAgB,EAChBtZ,MAAO,EACP05B,cAAe7tB,KAAKrL,OAIxBzF,SAASgE,iBAAiB,4CAA4CC,SAAQs1B,IAC1EA,EAAStI,SAAU,CAAK,IAI5B,MAAMuI,EAAgBx5B,SAASI,eAAe,iBACxCq5B,EAAiBz5B,SAASI,eAAe,kBACzCs5B,EAAkB15B,SAASI,eAAe,mBAE5Co5B,IAAeA,EAAcryB,MAAQ,MACrCsyB,IAAgBA,EAAetyB,MAAQ,MACvCuyB,IAAiBA,EAAgB1zB,YAAc,KAGvD,CAEA,SAASylC,KAEPzrC,SAASS,cAAc,yBAAyBuK,SAChDhL,SAASS,cAAc,2BAA2BuK,SAE9ClJ,OAAOqpC,6BACT3uB,cAAc1a,OAAOqpC,6BAGvBnrC,SAASgE,iBAAiB,4DAA4DC,SACpF8a,GAAWA,EAAQ/T,WAIrB0gC,KACAX,KAGAz8B,EAAW,iBACb,CAEA,SAASisB,GAAclF,GAInB,GAAKA,EAGL,GAAIA,EAAQiN,UACRh0B,EAAW,uBAKf,GAAIjK,aAAaU,KAAOswB,EAAQ3yB,UAOhC6/B,GAA0BlN,EAAQmN,eAAiB,QAPnD,CAEIC,GADsBpN,EAAQmN,eAAiB,GAGnD,CAIJ,CAEA,SAASmJ,KACL,MAAMnhC,EAAQxK,SAASS,cAAc,4BACjC+J,IACAA,EAAMnK,UAAU2K,OAAO,QACvB5I,YAAW,KACPpC,SAASuD,KAAKoa,YAAYnT,EAAM,GACjC,KAEX,CAEA/B,eAAeu1B,KACX1f,GAAqB1b,MAAQ,QAC7B0b,GAAqBvb,QAAU+N,KAAKrL,MAGpC,MAAM+8B,EAAgB,GAsBtB,IAnBIlkB,GAAqBtb,cACrB2E,OAAOC,QAAQ0W,GAAqBtb,aAAaiB,SAAQ,EAAEiH,EAAU0gC,MACjE,MAAMrV,EAASjY,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAaA,IACtEqrB,GACAiM,EAAc9gC,KAAK,CACfwJ,SAAUqrB,EAAOrrB,SACjBqT,eAAgBgY,EAAOhY,gBAAkB,EACzCtZ,MAAOsxB,EAAOtxB,OAAS,EACvBqmB,KAAMsgB,EAAStgB,KACfyS,eAAgB6N,EAAS7N,gBAEjC,IAIJyE,EAAc9jB,MAAK,CAACR,EAAGmN,IAAMnN,EAAEoN,KAAOD,EAAEC,QAIrCkX,EAAcpxB,OAAS,GAAG,CAC7B,MAAMka,EAAOkX,EAAcpxB,OAAS,EACpCoxB,EAAc9gC,KAAK,CACfwJ,SAAU,MACVqT,eAAgB,EAChBtZ,MAAO,EACPqmB,KAAMA,GAEd,OAQMxpB,OAAO+2B,cAAc4B,KAAK,CAC5B3N,KAAM,YACN5sB,MAAO,WACPm1B,QAAS,CACLzyB,MAAO,QACP4/B,cAAeA,EACf9/B,UAAW4b,GAAqB5b,UAChCoW,SAAUwF,GAAqBvb,SAAWub,GAAqBxb,WAAawb,GAAqBvb,YAIrGsB,aAAaU,KAAOuZ,GAAqB5b,UACzC+/B,GAA2BD,GAE3BD,GAA0BC,EAElC,CAEA,SAASqJ,GAAiBlJ,GAElBt+B,aAAaU,KAAOuZ,GAAqB5b,UACzC+/B,GAA2BE,GAE3BW,GAAuBX,EAE/B,CAEA,SAASC,GAAW9kB,GAChB,MAAME,EAAI,CAAC,KAAM,KAAM,KAAM,MACvB3C,EAAIyC,EAAI,IACd,OAAOA,GAAKE,GAAG3C,EAAI,IAAM,KAAO2C,EAAE3C,IAAM2C,EAAE,GAC9C,CAGA,SAASmgB,KACL,IAAI2N,EAAsBh7B,KAAKrL,MAC3BsmC,GAAkB,EAClBC,EAAgB,KAChBC,EAAiB,KAGrB,SAASC,IACLJ,EAAsBh7B,KAAKrL,MAGvBsmC,GACAI,GAER,CA0BA,MAAMC,EAAoBpwB,aAAY,KAElC,GAAmC,WAA/BsC,GAAqB1b,OACrByB,aAAaU,KAAOuZ,GAAqB5b,UAEzC,YADA8Z,cAAc4vB,GAIEt7B,KAAKrL,MACiBqmC,EAGhB,MAASC,GAMvC,WACIA,GAAkB,EAClB,IAAIM,EAAmB,EAGvBJ,EAAiBjsC,SAASwB,cAAc,OACxCyqC,EAAexqC,UAAY,qBAC3BwqC,EAAehqC,MAAMuhB,QAAU,2VAc/B,MAAM8oB,EAAetsC,SAASwB,cAAc,OAC5C8qC,EAAarqC,MAAMuhB,QAAU,sMAQ7B,MAAM+oB,EAAavsC,SAASwB,cAAc,MAC1C+qC,EAAWvmC,YAAc,gBACzBumC,EAAWtqC,MAAMiE,MAAQ,cAEzB,MAAMyiC,EAAe3oC,SAASwB,cAAc,OAC5CmnC,EAAalnC,UAAY,kBACzBknC,EAAa3iC,YAAcqmC,EAC3B1D,EAAa1mC,MAAMuhB,QAAU,yIAO7B,MAAMgpB,EAAexsC,SAASwB,cAAc,KAC5CgrC,EAAaxmC,YAAc,uDAE3BsmC,EAAa9oC,YAAY+oC,GACzBD,EAAa9oC,YAAYmlC,GACzB2D,EAAa9oC,YAAYgpC,GACzBP,EAAezoC,YAAY8oC,GAC3BtsC,SAASuD,KAAKC,YAAYyoC,GAG1BD,EAAgBhwB,aAAY,KACxBqwB,IACA1D,EAAa3iC,YAAcqmC,EAEvBA,GAAoB,GAsBhC,WACIF,IAGA,MAAMtpC,EAAmByb,GAAqB7b,aAAayS,QACvD+jB,GAAKA,EAAE1a,gBAAkBD,GAAqB3b,WAIlD,GAAIE,EAAiBuO,QAAU,EAAG,CAE9B,MAAMq7B,EAAa,IAAI5pC,GAClB6b,MAAK,CAACR,EAAGmN,IACFA,EAAE9M,iBAAmBL,EAAEK,eAChB8M,EAAE9M,eAAiBL,EAAEK,eAEzB8M,EAAEpmB,MAAQiZ,EAAEjZ,QAEtB2S,MAAM,EAAG,GACTxF,KAAI,CAACmkB,EAAQ3hB,KAAU,IACjB2hB,EACHjL,KAAM1W,EAAQ,MAItB0J,GAAqB1b,MAAQ,QAG7B6/B,GAA2BgK,EAC/B,MAGIn+B,EAAW,iBAEnB,CAvDYo+B,EACJ,GACD,IACP,CAnEQC,EACJ,GACD,KAoEH,SAASR,IACLJ,GAAkB,EAEdC,IACAxvB,cAAcwvB,GACdA,EAAgB,MAGhBC,IACAjsC,SAASuD,KAAKoa,YAAYsuB,GAC1BA,EAAiB,KAEzB,CA0CA,OAhKA,WAEI,MAAMW,EAAsB,IAAItb,kBAAiB,KAC7C4a,GAAiB,IAGfhT,EAAcl5B,SAASI,eAAe,sBACxC84B,GACA0T,EAAoB9a,QAAQoH,EAAa,CACrCnH,WAAW,EACXC,SAAS,EACT6a,YAAY,EACZpF,eAAe,IAKvB3lC,OAAO+2B,cAAc1D,GAAG,YAAa,CAAEj1B,MAAO,oBAAqB,KAC/DgsC,GAAiB,GAEzB,CA0IAY,GAEO,CACHX,iBACAC,oBAER,CAGA,IAAIjJ,GAAyB,KACzBC,GAAiB,KACjB/kB,GAAwBvN,KAAKrL,MAC7BsnC,IAAiB,EAErB,SAAStR,KAED0H,IACA56B,aAAa46B,IAGbC,IACA5mB,cAAc4mB,IAIlB/kB,GAAwBvN,KAAKrL,MAC7BsnC,IAAiB,EAGjBC,KAGAC,KAGAC,KAGA,MAAM1R,EAAmBx7B,SAASS,cAAc,sBAC1Cm5B,EAAkB55B,SAASS,cAAc,sBAE3C6d,GAAqBqa,eAAgD,WAA/Bra,GAAqB1b,OACvD44B,IAAkBA,EAAiBv5B,MAAMiC,QAAU,QACnD01B,GAAiBA,EAAgBv5B,UAAU8D,IAAI,aAE/Cq3B,IAAkBA,EAAiBv5B,MAAMiC,QAAU,SACnD01B,GAAiBA,EAAgBv5B,UAAU2K,OAAO,WAE9D,CAEA,SAASgiC,KAEL,MAAMG,EAAkBntC,SAASS,cAAc,uBAC3C0sC,GAAiBA,EAAgBniC,SAGrC,MAAMgf,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,qBACpBuoB,EAAQnY,UAAY,8SAUpBmY,EAAQvpB,cAAc,qBAAqBR,iBAAiB,QAASmtC,IAGrEptC,SAASuD,KAAKC,YAAYwmB,EAC9B,CAEA,SAASijB,KAEL,MAAM1O,EAAkBv+B,SAASI,eAAe,oBAGjC,CAAC,YAAa,YAAa,WAAY,SAAU,cAGzD6D,SAAQ/D,IACXq+B,EAAgBt+B,iBAAiBC,EAAOmtC,GAAqB,IAIjEA,IACJ,CAEA,SAASA,KAEDN,KAGA5J,IAAwB56B,aAAa46B,IAGzCA,GAAyB/gC,YAAW,KAEJ0O,KAAKrL,MAAQ4Y,GAGf,KACtBivB,IACJ,GACD,KACP,CAEA,SAASJ,KAEL,MAAMhU,EAAcl5B,SAASI,eAAe,sBAC5C,IAAK84B,EAAa,OAGD,IAAI5H,kBAAiB,KAClCjT,GAAwBvN,KAAKrL,MAGzBsnC,IACAK,IACJ,IAIKtb,QAAQoH,EAAa,CAC1BnH,WAAW,EACXC,SAAS,EACT6a,YAAY,EACZpF,eAAe,GAEvB,CAEA,SAAS6F,KACLP,IAAiB,EAGjB,MAAM/iB,EAAUhqB,SAASS,cAAc,uBACnCupB,GAASA,EAAQ3pB,UAAU8D,IAAI,WAGnC,IAAIopC,EAAc,EAClB,MAAM5E,EAAe3e,EAAQvpB,cAAc,oBACrC4rB,EAAcrC,EAAQvpB,cAAc,kBAG1CkoC,EAAa3iC,YAAcunC,EAC3BlhB,EAAYpqB,MAAMmyB,UAAY,YAG9BgP,GAAiBpnB,aAAY,KACzBuxB,IAGA5E,EAAa3iC,YAAcunC,EAC3BlhB,EAAYpqB,MAAMmyB,UAAY,UAAUmZ,EAAc,KAGlDA,GAAe,IACf/wB,cAAc4mB,IACdoK,KACJ,GACD,IACP,CAEA,SAASJ,KAEL,MAAMpjB,EAAUhqB,SAASS,cAAc,uBACnCupB,GAASA,EAAQ3pB,UAAU2K,OAAO,WAGtC+hC,IAAiB,EACb3J,IAAgB5mB,cAAc4mB,IAGlCiK,IACJ,CAEA,SAASG,KAKL,GAHyBlvB,GAAqBzb,kBACrByb,GAAqBzb,iBAAiBuO,QAAU,EAEnD,CAElB,MAAMoxB,EAAgB,GAEtB,GAAIlkB,GAAqBtb,YAErB2E,OAAOC,QAAQ0W,GAAqBtb,aAAaiB,SAAQ,EAAEiH,EAAUzG,MACjE,MAAMw8B,EAAa3iB,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAaA,IAC1E+1B,GACAuB,EAAc9gC,KAAK,CACfwJ,SAAU+1B,EAAW/1B,SACrBqT,eAAgB0iB,EAAW1iB,gBAAkB,EAC7CtZ,MAAOg8B,EAAWh8B,OAAS,EAC3BqmB,KAAM7mB,EAAK6mB,MAEnB,IAIJkX,EAAc9jB,MAAK,CAACR,EAAGmN,IAAMnN,EAAEoN,KAAOD,EAAEC,WACrC,CAEmB,IAAIhN,GAAqB7b,cAC1Cic,MAAK,CAACR,EAAGmN,IAAMA,EAAE9M,eAAiBL,EAAEK,iBACpC3G,MAAM,EAAG,GAGA3T,SAAQ,CAACsyB,EAAQ3hB,KAC3B4tB,EAAc9gC,KAAK,IACZ60B,EACHjL,KAAM1W,EAAQ,GAChB,GAEV,CAGA6tB,GAA2BD,EAC/B,MAEIl0B,EAAW,iBAEnB,CAGA,MAAMu8B,GAAsB,CACxB4C,cAAe,KACfrK,eAAgB,KAChB/kB,sBAAuBvN,KAAKrL,MAC5BsnC,gBAAgB,EAChBpU,eAAe,EACfmS,cAAc,GAGlB,SAASrP,KAEAiS,MAA8BpvB,GAAqBqa,gBAKxDkS,GAAoBC,cAAe,EAGnC6C,KAGA9C,GAAoBxsB,sBAAwBvN,KAAKrL,MACjDolC,GAAoBkC,gBAAiB,EACrClC,GAAoBlS,eAAgB,EAGpCiV,KAGAC,KAGAC,KAGJ,CAEA,SAASJ,KACL,MAAMnP,EAAkBv+B,SAASI,eAAe,oBAChD,OAAOm+B,GAAmBA,EAAgBl+B,UAAUC,SAAS,UACjE,CAEA,SAASqtC,KACD9C,GAAoB4C,gBACpBllC,aAAasiC,GAAoB4C,eACjC5C,GAAoB4C,cAAgB,MAEpC5C,GAAoBzH,iBACpB5mB,cAAcquB,GAAoBzH,gBAClCyH,GAAoBzH,eAAiB,KAE7C,CAEA,SAASwK,KAEL,MAAMT,EAAkBntC,SAASS,cAAc,iCAC3C0sC,GAAiBA,EAAgBniC,SAGrC,MAAMgf,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,+BACpBuoB,EAAQnY,UAAY,4WAUpBmY,EAAQvpB,cAAc,+BAA+BR,iBAAiB,QAAS8tC,IAG/E,MAAMxP,EAAkBv+B,SAASI,eAAe,oBAC5Cm+B,GACAA,EAAgB/6B,YAAYwmB,EAEpC,CAEA,SAAS6jB,KACL,MAAMtP,EAAkBv+B,SAASI,eAAe,oBAChD,IAAKm+B,EAAiB,OAGP,CAAC,YAAa,YAAa,WAAY,SAAU,cAGzDt6B,SAAQ/D,IACXq+B,EAAgBt+B,iBAAiBC,EAAO8tC,GAA8B,IAI1EhuC,SAASC,iBAAiB,oBAAoB,KACtCD,SAASiuC,SAAWP,KAEpBC,KACO9C,GAAoBC,cAAgB4C,MAE3CM,IACJ,IAIJA,IACJ,CAEA,SAASA,KAEAN,MAA8B7C,GAAoBC,eAAgBD,GAAoBkC,iBAKvFlC,GAAoB4C,eACpBllC,aAAasiC,GAAoB4C,eAIrC5C,GAAoB4C,cAAgBrrC,YAAW,KAEf0O,KAAKrL,MAAQolC,GAAoBxsB,sBAGnC,KAAQqvB,MAC9BQ,IACJ,GACD,KACP,CAEA,SAASJ,KAEL,MAAM5U,EAAcl5B,SAASI,eAAe,sBAC5C,IAAK84B,EAAa,OAGD,IAAI5H,kBAAiB,KAE9Boc,MAA6B7C,GAAoBC,eACjDD,GAAoBxsB,sBAAwBvN,KAAKrL,MAG7ColC,GAAoBkC,gBACpBgB,KAER,IAIKjc,QAAQoH,EAAa,CAC1BnH,WAAW,EACXC,SAAS,EACT6a,YAAY,EACZpF,eAAe,GAEvB,CAEA,SAASyG,KAEL,IAAKR,OAA8B7C,GAAoBC,aACnD,OAGJD,GAAoBkC,gBAAiB,EAGrC,MAAM/iB,EAAUhqB,SAASS,cAAc,iCACnCupB,GAASA,EAAQ3pB,UAAU8D,IAAI,WAGnC,IAAIopC,EAAc,EAClB,MAAM5E,EAAe3e,EAAQvpB,cAAc,8BACrC4rB,EAAcrC,EAAQvpB,cAAc,4BAG1CkoC,EAAa3iC,YAAcunC,EAC3BlhB,EAAYpqB,MAAMmyB,UAAY,YAG9ByW,GAAoBzH,eAAiBpnB,aAAY,KAExC0xB,MAKLH,IAGA5E,EAAa3iC,YAAcunC,EAC3BlhB,EAAYpqB,MAAMmyB,UAAY,UAAUmZ,EAAc,KAGlDA,GAAe,IACf/wB,cAAcquB,GAAoBzH,gBAClC+K,OAbAJ,IAcJ,GACD,IACP,CAEA,SAASA,KAEL,MAAM/jB,EAAUhqB,SAASS,cAAc,iCACnCupB,GAASA,EAAQ3pB,UAAU2K,OAAO,WAGtC6/B,GAAoBkC,gBAAiB,EACjClC,GAAoBzH,iBACpB5mB,cAAcquB,GAAoBzH,gBAClCyH,GAAoBzH,eAAiB,MAIrCsK,MAA6B7C,GAAoBC,cACjDkD,IAER,CAEA,SAASG,KAEN,GAAI7vB,GAAqBsa,qBACrB,OAIJ,MAAM/1B,EAAmByb,GAAqB7b,aAAayS,QACvD+jB,GAAKA,EAAE1a,gBAAkBD,GAAqB3b,WAG5CyrC,EAAmBvrC,GACAA,EAAiBuO,QAAU,EAIpD,GAFAkN,GAAqBsa,sBAAuB,EAExCwV,EAAkB,CAElB,MAAM5L,EAAgB,GAEtB,GAAIlkB,GAAqBtb,YAErB2E,OAAOC,QAAQ0W,GAAqBtb,aAAaiB,SAAQ,EAAEiH,EAAUzG,MACjE,MAAMw8B,EAAa3iB,GAAqB7b,aAAa6S,MAAK2jB,GAAKA,EAAE/tB,WAAaA,IAC1E+1B,GACAuB,EAAc9gC,KAAK,CACfwJ,SAAU+1B,EAAW/1B,SACrBqT,eAAgB0iB,EAAW1iB,gBAAkB,EAC7CtZ,MAAOg8B,EAAWh8B,OAAS,EAC3BqmB,KAAM7mB,EAAK6mB,MAEnB,IAIJkX,EAAc9jB,MAAK,CAACR,EAAGmN,IAAMnN,EAAEoN,KAAOD,EAAEC,WACrC,CAEmB,IAAIhN,GAAqB7b,cAC1Cic,MAAK,CAACR,EAAGmN,IAAMA,EAAE9M,eAAiBL,EAAEK,iBACpC3G,MAAM,EAAG,GAGA3T,SAAQ,CAACsyB,EAAQ3hB,KAC3B4tB,EAAc9gC,KAAK,IACZ60B,EACHjL,KAAM1W,EAAQ,GAChB,GAEV,CAGAyuB,GAA4Bb,EAChC,MAEIl0B,EAAW,iBAElB,CAEA,SAASo9B,KAELiC,KACA9C,GAAoBC,cAAe,EACnCD,GAAoBlS,eAAgB,EACpCkS,GAAoBkC,gBAAiB,EAGrC,MAAM/iB,EAAUhqB,SAASS,cAAc,iCACnCupB,GAASA,EAAQhf,QACzB,CAEA,SAASq4B,GAA4Bb,GACjC,MAAMvK,EAAqBj4B,SAASS,cAAc,iCAC9Cw3B,GACAA,EAAmB53B,UAAU2K,OAAO,WAIxC,MAAMgf,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,sBACpBzB,SAASuD,KAAKC,YAAYwmB,GAC1B5nB,YAAW,IAAM4nB,EAAQ3pB,UAAU8D,IAAI,YAAY,IAGnD,MAAMkqC,EAAqBruC,SAASI,eAAe,sBAAsB4D,iBAAiB,sBACpFsqC,EAAiB,IAAInlC,IAG3Bq5B,EAAcv+B,SAAQsyB,IAClB8X,EAAmBpqC,SAAQqyB,IACvB,MAAMoG,EAAapG,EAAM71B,cAAc,mBACvC,IAAKi8B,EAAY,OAEjB,MAAMxxB,EAAWwxB,EAAWle,QAAQtT,SACpC,GAAIA,IAAaqrB,EAAOrrB,SAAU,CAC9B,MAAMmd,EAAOiO,EAAM7X,wBACnB6vB,EAAe7kC,IAAIyB,EAAU,CACzBhJ,KAAMmmB,EAAKnmB,KACXC,IAAKkmB,EAAKlmB,IACVkb,MAAOgL,EAAKhL,MACZC,OAAQ+K,EAAK/K,SAIjB,MAAMixB,EAAcjY,EAAMkY,WAAU,GAIpC,GAHAD,EAAYluC,UAAU8D,IAAI,eAAgB,eAGtB,IAAhBoyB,EAAOjL,KAAY,CACnBijB,EAAYluC,UAAU8D,IAAI,eAC1B,MAAMsqC,EAAczuC,SAASwB,cAAc,OAC3CitC,EAAYhtC,UAAY,eACxBgtC,EAAYzoC,YAAc,WAC1BuoC,EAAY/qC,YAAYirC,GACxBC,GAAgBH,EAAa,CAAC,KAAM,KAAM,MAAOhY,EAAOjL,KAC5D,MAAO,GAAoB,IAAhBiL,EAAOjL,KAAY,CAC1BijB,EAAYluC,UAAU8D,IAAI,gBAC1B,MAAMsqC,EAAczuC,SAASwB,cAAc,OAC3CitC,EAAYhtC,UAAY,eACxBgtC,EAAYzoC,YAAc,YAC1BuoC,EAAY/qC,YAAYirC,GACxBC,GAAgBH,EAAa,CAAC,KAAM,KAAMhY,EAAOjL,KACrD,MAAO,GAAoB,IAAhBiL,EAAOjL,KAAY,CAC1BijB,EAAYluC,UAAU8D,IAAI,eAC1B,MAAMsqC,EAAczuC,SAASwB,cAAc,OAC3CitC,EAAYhtC,UAAY,eACxBgtC,EAAYzoC,YAAc,eAC1BuoC,EAAY/qC,YAAYirC,GACxBC,GAAgBH,EAAa,CAAC,KAAM,MAAOhY,EAAOjL,KACtD,CAGAijB,EAAYtsC,MAAMib,SAAW,QAC7BqxB,EAAYtsC,MAAMC,KAAO,GAAGmmB,EAAKnmB,SACjCqsC,EAAYtsC,MAAME,IAAM,GAAGkmB,EAAKlmB,QAChCosC,EAAYtsC,MAAMob,MAAQ,GAAGgL,EAAKhL,UAClCkxB,EAAYtsC,MAAMqb,OAAS,GAAG+K,EAAK/K,WACnCixB,EAAYtsC,MAAM0sC,OAAS,IAAMpY,EAAOjL,KAGxCtrB,SAASuD,KAAKC,YAAY+qC,GAC1BnsC,YAAW,KACPmsC,EAAYluC,UAAU8D,IAAI,WAAW,GACtC,GACP,IACF,IAIN/B,YAAW,KACPwsC,KACA9sC,OAAO+2B,cAAc4B,KAAK,CACtB3N,KAAM,YACN5sB,MAAO,cACPm1B,QAAS,CACLwZ,QAASrM,EAAcpwB,KAAI6mB,IAAK,CAC5B/tB,SAAU+tB,EAAE/tB,SACZogB,KAAM2N,EAAE3N,KACR/M,eAAgB0a,EAAE1a,eAClBtZ,MAAOg0B,EAAEh0B,YAGnB,GACH,MAGH,MAAM+f,EAAahlB,SAASwB,cAAc,OAC1CwjB,EAAWvjB,UAAY,wBACvBujB,EAAWnT,UAAY,kIAKvB7R,SAASuD,KAAKC,YAAYwhB,GAC1B5iB,YAAW,IAAM4iB,EAAW3kB,UAAU8D,IAAI,YAAY,KAC1D,CAEA,SAAS2qC,GAAyBC,EAAU7jC,GAC1C,IAAKA,EAAU,OAAO,EAEtB,MAAMuyB,EAAcnf,GAAqB7b,aAAaoS,WAAUokB,GAAKA,EAAE/tB,WAAaA,IACpF,IAAqB,IAAjBuyB,EAAoB,OAAO,EAE/B,MAAMlH,EAASjY,GAAqB7b,aAAag7B,GAIjD,QAAIsR,GAHiBxY,EAAOhY,gBAAkB,MAQ9CgY,EAAOhY,eAAiBwwB,GACjB,EACT,CAEA,SAASL,GAAgB3vB,EAAS+jB,EAAQxX,GACtClpB,YAAW,KAEP0gC,EAAO7+B,SAAQ,CAAC+qC,EAAOp6B,KACnB,MAAMq6B,EAAejvC,SAASwB,cAAc,OAK5C,IAAII,EAAGC,EAAGgb,EAJVoyB,EAAaxtC,UAAY,oBACzBwtC,EAAajpC,YAAcgpC,EAOd,IAAT1jB,GAEAzO,EAAOqyB,EACHt6B,EAAQ,GAAM,GAEdhT,EAAI,EAAa,EAARgT,EAAa,IACtB/S,EAAI,EAAa,EAAR+S,EAAa,MAGtBhT,EAAI,GAAc,EAARgT,EAAa,IACvB/S,EAAI,EAAa,EAAR+S,EAAa,MAEV,IAAT0W,GAEPzO,EAjBa,IAkBTjI,EAAQ,GAAM,GAEdhT,EAAI,KACJC,EAAI,GAAc,EAAR+S,EAAa,MAGvBhT,EAAI,MACJC,EAAI,GAAc,EAAR+S,EAAa,OAI3BiI,EAAOqyB,EACHt6B,EAAQ,GAAM,GAEdhT,EAAI,GAAc,EAARgT,EAAa,IACvB/S,EAAI,QAGJD,EAAI,GAAc,EAARgT,EAAa,IACvB/S,EAAI,QAIZotC,EAAahtC,MAAMktC,SAAW,GAAGtyB,OACjCoyB,EAAahtC,MAAMC,KAAON,EAC1BqtC,EAAahtC,MAAME,IAAMN,EACzBotC,EAAahtC,MAAM0sC,OAAS,IAC5BM,EAAahtC,MAAM4nB,eAAoB,IAAc,GAARjV,EAAT,IAEpC5U,SAASuD,KAAKC,YAAYyrC,EAAa,GACzC,GACH,KACP,CAEA,SAASL,KAEL,MAAM7xB,EAAS,CACX,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAIhDqyB,IAGA,MAAMC,EAAmBrzB,YAAYozB,EAAqB,KAM1D,SAASA,IACL,IAAK,IAAI/tC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAMiuC,EAAWtvC,SAASwB,cAAc,OACxC8tC,EAAS7tC,UAAY,WAGrB,MAAMob,EAAO,EAAoB,GAAhB/W,KAAK6T,SAChBzT,EAAQ6W,EAAOjX,KAAK4T,MAAM5T,KAAK6T,SAAWoD,EAAO3L,SACjDlP,EAAuB,IAAhB4D,KAAK6T,SACZ41B,EAAwB,EAAhBzpC,KAAK6T,SACbb,EAAW,EAAoB,EAAhBhT,KAAK6T,SACpB61B,EAAW1pC,KAAK6T,SAAW,GAEjC21B,EAASrtC,MAAMob,MAAQ,GAAGR,MAC1ByyB,EAASrtC,MAAMqb,OAAS,GAAGT,MAC3ByyB,EAASrtC,MAAMgb,gBAAkB/W,EACjCopC,EAASrtC,MAAMC,KAAO,GAAGA,MACzBotC,EAASrtC,MAAMwtC,kBAAoB,GAAG32B,KACtCw2B,EAASrtC,MAAM4nB,eAAiB,GAAG0lB,KACnCD,EAASrtC,MAAM2jC,aAAe4J,EAAW,IAAM,MAE/CxvC,SAASuD,KAAKC,YAAY8rC,GAG1BltC,YAAW,KACPktC,EAAStkC,QAAQ,GACG,KAApB8N,EAAWy2B,GACnB,CACJ,CA/BAztC,OAAOqpC,4BAA8BkE,CAgCzC,CAKA,SAASnJ,KACApkC,OAAO+2B,eAEZ/2B,OAAO+2B,cAAc1D,GAAG,YAAa,CAAEj1B,MAAO,gBAAiB,EAAGm1B,cAC9D,GAAKA,EAAQwZ,SAGTvwB,GAAqBrb,WAAY,CACjC,MAAMsrC,EAAclZ,EAAQwZ,QAAQv5B,MAAKo6B,GAAKA,EAAExkC,WAAaoT,GAAqBrb,aAE9EsrC,GAEAoB,GAA+BpB,EAAYjjB,KAEnD,IAER,CAEA,SAASqkB,GAA+BrkB,GAEpC,GAAIhN,GAAqBpb,kBAAmB,OAC5Cob,GAAqBpb,mBAAoB,EAGzC,MAAM8mB,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,2BACpBuoB,EAAQ/nB,MAAMuhB,QAAU,uWAiBxB,MAqBMosB,EArBc,CAChB,EAAG,CACC54B,MAAO,kBACPzI,QAAS,2CACTygC,MAAO,KACP9oC,MAAO,eAEX,EAAG,CACC8Q,MAAO,mBACPzI,QAAS,4CACTygC,MAAO,IACP9oC,MAAO,iBAEX,EAAG,CACC8Q,MAAO,yBACPzI,QAAS,wCACTygC,MAAO,KACP9oC,MAAO,kBAIaolB,IAAS,CACjCtU,MAAO,qBACPzI,QAAS,kCACTygC,MAAO,KACP9oC,MAAO,iBAGX8jB,EAAQnY,UAAY,gEACqC+9B,EAAQZ,0CACzCY,EAAQ1pC,iDAAiD0pC,EAAQ54B,4HAE/E44B,EAAQrhC,iSAKgCqhC,EAAQ1pC,WAAWolB,0PAILjS,EAAYkF,gBAAkB,uPAI9BlF,EAAYpU,OAAS,mNAQrFjF,SAASuD,KAAKC,YAAYwmB,GAG1B5nB,YAAW,KACP4nB,EAAQ/nB,MAAM4G,QAAU,IAGxBq6B,IAAqB,GACtB,IACP,CAEA,SAASA,KAEL,MAAMnmB,EAAS,CACX,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAGhD,SAAS8yB,IACL,IAAK,IAAIxuC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAMiuC,EAAWtvC,SAASwB,cAAc,OACxC8tC,EAAS7tC,UAAY,kBACrB6tC,EAASrtC,MAAMuhB,QAAU,8DAEZ,EAAoB,GAAhB1d,KAAK6T,wCACR,EAAoB,GAAhB7T,KAAK6T,kDACCoD,EAAOjX,KAAK4T,MAAM5T,KAAK6T,SAAWoD,EAAO3L,iEAErC,IAAhBtL,KAAK6T,4GAGI7T,KAAK6T,SAAW,GAAM,IAAM,mDACnB,EAAoB,EAAhB7T,KAAK6T,oBAAwC,EAAhB7T,KAAK6T,oCAGpE3Z,SAASuD,KAAKC,YAAY8rC,GAG1BltC,YAAW,KACPktC,EAAStkC,QAAQ,GAClB,IACP,CACJ,CAGA6kC,IAGA,MAAM3E,EAAWlvB,YAAY6zB,EAA2B,KAGxD/tC,OAAOspC,uBAAyBF,EAGhC9oC,YAAW,KACPoa,cAAc0uB,EAAS,GACxB,IACP,CAEA,SAAS4E,KACHhuC,OAAOspC,wBACT5uB,cAAc1a,OAAOspC,wBAGvBprC,SAASgE,iBAAiB,oBAAoBC,SAAQwC,GAAMA,EAAGuE,WAE/D,MAAMgf,EAAUhqB,SAASS,cAAc,6BACnCupB,IACFA,EAAQ/nB,MAAM4G,QAAU,IACxBzG,YAAW,KACT4nB,EAAQhf,SAERm2B,IAAY,GACX,KAEP,CAIA,SAASe,KACLvmB,IAOA,GAFkBtC,EAAYsB,aAAetB,EAAYgB,iBAAmBhB,EAAYnQ,MAAMkI,OAE/E,CACX,MAAM2+B,EAAQ12B,EAAYiB,aAAe,EAAI,EAC7C1W,EAAasB,YAAY6qC,GAAOppC,MAAK,KACjC6f,GAAWupB,GACXC,GAAgBzxB,gBAAkBlF,EAAYnQ,MAAMkI,OACpD4+B,GAAgB5hC,gBAAgBjK,IAAI6rC,GAAgBhiC,cAGpD,MAAMpH,EAAYopC,GAAgB9mC,MAAMkI,OAClC6+B,EAAWrpC,GAAa,GAAK,EAClBA,GAAa,EAAI,EAAI,EAMtC,GAAqC,IAAjCopC,GAAgBhiC,cAAsBpH,GAAa,EAGnD,YADAxE,YAAW,IAAM8tC,MAA8B,MAKnD,GAAqC,IAAjCF,GAAgBhiC,cAAsBpH,GAAa,EAGnD,YADAxE,YAAW,IAAM8tC,MAA8B,MAKnD,GAAqC,IAAjCF,GAAgBhiC,cAAsBpH,GAAa,GAGnD,YADAxE,YAAW,IAAM8tC,MAA8B,MAKnD,GAAIF,GAAgBhiC,cAAgBiiC,EAGhC,YADA7tC,YAAW,IAAM8tC,MAA8B,MAInD,MAAMtkB,EAAYokB,GAAgBhiC,aAAe,EAC3CmiC,EAAgBH,GAAgBI,iBAAiBxkB,GAEjDykB,EAAarwC,SAASI,eAAe,mBAAmBqe,wBAC9D/B,EAAgB2zB,EAAWnuC,KAAOmuC,EAAWhzB,MAAQ,EAAGgzB,EAAWluC,IAAMkuC,EAAW/yB,OAAS,GAExF6yB,GAAgD,IAA/BA,EAAcjnC,MAAMkI,QAKtC4+B,GAAgBhiC,aAAe4d,EAC/BxpB,YAAW,IAAM6nB,GAAiB2B,IAAY,OAJ9CxpB,YAAW,IAAM8tC,MAA8B,KAKnD,GAER,MAGI9tC,YAAW,IAAM6nB,GAAiB+lB,GAAgBhiC,eAAe,MAGrEiE,GACJ,CAEA,SAASi+B,KACL,MAAMlmB,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,qBAEpB,MAAMmgC,EAAcv8B,EAAUJ,MAAQ+qC,GAAgBM,WAEtDtmB,EAAQnY,UAAY,yQAMqBm+B,GAAgBzxB,qLAInBqjB,0MAQtC5hC,SAASuD,KAAKC,YAAYwmB,EAC9B,CAGAvhB,eAAe0e,GAA2BxmB,EAAGkd,GAAI,GAC/C,GAAIld,GAIF,GAFA0Y,EAAYE,gBAEPsE,EAAG,CACN,IAAI6J,EAAa,EACjB,MAAMhN,EAAY2L,KACd3L,EAAY,IACdgN,GAAchN,EACd8L,GAAW9L,IAGTrB,EAAYiB,cACdoN,GAAc,EACdlB,GAAW,KAEXkB,GAAc,EACdlB,GAAW,IAGb,UACQ5iB,EAAasB,YAAYwiB,GAC/BphB,GACF,CAAE,MAAO3F,GAET,CAIA,GAFA0Y,EAAYgB,iBAERhW,aAAsC,YAAvBA,YAAY8H,OAAsB,CACnD,MAAM01B,EAAYxoB,EAAYE,aAAe,EACvC4T,EAAO9T,EAAYC,kBACrBD,EAAYnQ,MAAM24B,GAClBxoB,EAAYtF,aAAa8tB,SACvBC,GAAmB3U,EAAM,SACjC,CACF,MACK,CACL9T,EAAYiB,cAAe,EAC3BjB,EAAYsB,aAAc,EAC1BtB,EAAYwB,cAEZ,UACQjX,EAAasB,aAAa,GAChCoB,GACF,CAAE,MAAO3F,GAET,CAOA,GALI0Y,EAAYE,aAAe,IAC7BF,EAAYyB,eACZzB,EAAYE,aAAezT,KAAKmW,IAAI,EAAG5C,EAAYE,aAAe,IAGhEF,EAAYwB,aAAe,EAM7B,OALAkP,UACA/pB,SAASS,cAAc,mBAAmBsH,QAAU,KAClD/H,SAASS,cAAc,oBAAoBwB,MAAMiC,QAAU,OAC3D+lB,GAAiB5Q,EAAYk3B,YAAY,EAI/C,CAGA,MAAMtO,EAAuB5oB,EAAYC,kBACrCD,EAAYnQ,MAAMpD,KAAKmW,IAAI,EAAG5C,EAAYE,aAAe,IACzDF,EAAYtF,aAAajO,KAAKmW,IAAI,EAAG5C,EAAYE,aAAe,IAG9DyoB,EAAahiC,SAASgE,iBAAiB,mBAC7Cg+B,EAAW/9B,SAAS6D,IACdA,EAAO9B,cAAgBi8B,EACzBn6B,EAAOzH,UAAU8D,IAAI,YACXxD,GAAKT,OAASA,MAAMY,QAAUgH,EAAO9B,cAAgB9F,MAAMY,OAAOkF,aAC5E8B,EAAOzH,UAAU8D,IAAI,QACvB,IAGFigB,KACAnS,IAGA7P,YAAW,KAET4/B,EAAW/9B,SAAQqE,IACjBA,EAAIjI,UAAU2K,OAAO,UAAW,QAAQ,IAGtCqO,EAAYE,aAAeF,EAAYnQ,MAAMkI,QAC/CiT,KACA/d,KAEA47B,IACF,GACC,IACL,CAEA,SAAS7iB,KACL,MAAM2K,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,iBACpBuoB,EAAQnY,UAAY,0QASpB7R,SAASuD,KAAKC,YAAYwmB,GAG1B5mB,uBAAsB,KAClB4mB,EAAQ3pB,UAAU8D,IAAI,OAAO,IAIjC,IAAIiY,EAAU,EACd,MAAMusB,EAAe3e,EAAQvpB,cAAc,iBAErC+vC,EAAoBx0B,aAAY,KAClCI,IACAusB,EAAa3iC,YAAcoW,EAEvBA,GAAW,IACXI,cAAcg0B,GACdC,KACJ,GACD,KAGkBzmB,EAAQvpB,cAAc,kBAC9BsH,QAAU,KACnByU,cAAcg0B,GACdE,IAAc,EAIlB1mB,EAAQxL,QAAQgL,WAAagnB,CACjC,CAEA,SAASC,KACL,MAAMzmB,EAAUhqB,SAASS,cAAc,mBAEnCupB,IACAA,EAAQ3pB,UAAU2K,OAAO,QACzB5I,YAAW,KACP4nB,EAAQhf,SACRsD,EAAW,iBAAiB,GAC7B,KAEX,CAEA,SAASoiC,KACL,MAAM1mB,EAAUhqB,SAASS,cAAc,mBAEvC,GAAIupB,EAAS,CAEOA,EAAQvpB,cAAc,mBAC9BoR,UAAY,6hBAapB,MAAM6vB,EAAiB1X,EAAQvpB,cAAc,0BACvC4kB,EAAgB,EAAIvf,KAAKsX,GAAK,GACpCskB,EAAez/B,MAAMqjB,gBAAkB,GAAGD,KAAiBA,IAC3Dqc,EAAez/B,MAAMsjB,iBAAmBF,EAGxCsrB,KAGAvuC,YAAW,KACPs/B,EAAez/B,MAAM2uC,WAAa,oDAClClP,EAAez/B,MAAMsjB,iBAAmB,GAAG,GAC5C,KAGHnjB,YAAW,KACP4nB,EAAQ3pB,UAAU2K,OAAO,QACzB5I,YAAW,KACP4nB,EAAQhf,SAGRqO,EAAYwB,YAAc,EAC1BG,EAAgB3B,EAAYuC,qBAGxBvC,EAAY6N,iBACZ+C,GAAiB5Q,EAAYk3B,aAE7BnvB,GAAW/b,EAAU2I,aACzB,GACD,IAAI,GACR,KACP,CACJ,CAEA,SAAS2iC,KACL,MAAM3zB,EAAYhd,SAASS,cAAc,2BACzC,IAAKuc,EAAW,OAGhB,MAAMqL,EAAOrL,EAAUyB,wBACjBoyB,EAAUxoB,EAAKnmB,KAAOmmB,EAAKhL,MAAQ,EACnCyzB,EAAUzoB,EAAKlmB,IAAMkmB,EAAK/K,OAAS,EAGzC,IAAK,IAAIjc,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAME,EAAWvB,SAASwB,cAAc,OACxCD,EAASE,UAAY,wBAGrB,MAAM0b,EAAQrX,KAAK6T,SAAW7T,KAAKsX,GAAK,EAClCN,EAAW,IAAsB,IAAhBhX,KAAK6T,SACtBb,EAAW,EAAoB,IAAhBhT,KAAK6T,SACpB41B,EAAwB,GAAhBzpC,KAAK6T,SACbkD,EAAO,EAAoB,EAAhB/W,KAAK6T,SAGhBo3B,EAAOjrC,KAAK0X,IAAIL,GAASL,EACzBk0B,EAAOlrC,KAAK2X,IAAIN,GAASL,EAG/Bvb,EAASU,MAAMuhB,QAAU,qDAEbqtB,0BACDC,4BACEj0B,6BACCA,6JAKQA,oGAEQ/D,eAAsBy2B,yBAIpDhuC,EAASU,MAAMsb,YAAY,UAAW,GAAGwzB,OACzCxvC,EAASU,MAAMsb,YAAY,UAAW,GAAGyzB,OAEzChxC,SAASuD,KAAKC,YAAYjC,GAG1Ba,YAAW,KACPb,EAASyJ,QAAQ,GACG,KAApB8N,EAAWy2B,GACnB,CACJ,CAEA,SAAS0B,KACL,MAAMC,EAAelxC,SAASS,cAAc,sCACxCywC,GACAA,EAAaC,aAAa,UAAW,oDAE7C,CAWA,SAAS5wC,KACP,MAAM6wC,EAAkBpxC,SAASS,cAAc,qBAC/C,IAAK2wC,EAAiB,OAiEtB,GA9DAA,EAAgBv/B,UAAY,GAM5BmG,EAAcC,OAAOhU,SAAQ0I,IAC3B,MAAM2jB,EAAetwB,SAASwB,cAAc,OAC5C8uB,EAAa7uB,UAAY,gBACzB6uB,EAAa9R,QAAQ7R,MAAQA,EAAM5H,GAEnC,MAAMmT,EAAUvL,EAAMuL,QAChBjK,EAAe5I,EAAU4I,aAAatB,EAAM5H,KAAO,IAAI/D,IACvDqwC,EAAmBpjC,EAAa4O,KAEtC,IAAIy0B,EAAgB,EAChBD,EAAmB,GACrBpjC,EAAahK,SAAQstC,IAEfC,GAAe7kC,EAAM5H,GAAIwsC,IAC3BD,GACF,IAIJ,MAAMG,EAAYC,GAAa/kC,EAAM5H,IAC/B4sC,EAAkBC,GAAmBjlC,EAAM5H,IAC3C8sC,EAAmBC,GAAoBnlC,EAAM5H,IAC7CgtC,EAAcC,GAAerlC,EAAM5H,GAAIusC,EAAep5B,GAE5DoY,EAAaze,UAAY,mIAIL4/B,sGAGcE,aAA2BhlC,EAAM5H,iDACjC8sC,gFAGFE,sNAOWplC,EAAM5H,iCAIjDqsC,EAAgB5tC,YAAY8sB,GAG5B2hB,GAAiBtlC,EAAM5H,GAAG,IAI5BmtC,KAGI7sC,EAAUyI,aAAc,CAC1B,MAAMqkC,EAAsBnyC,SAASS,cAAc,8BAA8B4E,EAAUyI,kBACvFqkC,GACFA,EAAoB9xC,UAAU8D,IAAI,OAEtC,CAGA,MAAMhE,EAAqBH,SAASI,eAAe,wBAC/CD,IACFH,SAASgE,iBAAiB,WAAWC,SAAQwT,IAC3CA,EAAOpX,UAAU2K,OAAO,UAAU,IAEpC7K,EAAmBE,UAAU8D,IAAI,WAErC,CAGA,SAAS8b,KAEL,GAAI5b,YAAa,CAEb,MAAMiM,EAAgB/L,aAAaC,QAAQ,mBAC3C,GAAI8L,EACA,IAEI8hC,GADiB/iC,KAAKC,MAAMgB,GAEhC,CAAE,MAAO5L,GAET,CAER,CAQA,MAAMsY,EAAYhd,SAASS,cAAc,qBACzC,IAAKuc,EAAW,OAmFhB,GAhFAA,EAAUnL,UAAY,GAGtBmG,EAAcC,OAAOhU,SAAQ0I,IAEzB,MAAM2jB,EAAetwB,SAASwB,cAAc,OAC5C8uB,EAAa7uB,UAAY,gBACzB6uB,EAAa9R,QAAQ7R,MAAQA,EAAM5H,GAGnC,MAAMstC,EAAY1lC,EAAMuL,QAClBjK,EAAe5I,EAAU4I,aAAatB,EAAM5H,KAAO,IAAI/D,IAIvCiN,EAAa4O,KACnC,IAAIy0B,EAAgB,EAGhBrjC,EAAa4O,KAAO,GACpB5O,EAAahK,SAAQoF,IACCsD,EAAM5H,GAAxB,MACMutC,EAAat6B,EAAcC,OAAOtL,EAAM5H,GAAK,GAAGoT,aAChD/J,EAAkB,IAAIpN,IAG5B,IAAK,IAAI6L,EAAQ,EAAGA,GAASylC,EAAYzlC,IAAS,CAC9C,MAAMyT,EAAW,GAAG3T,EAAM5H,MAAMsE,KAASwD,KACrCxH,EAAU+I,gBAAgB9E,IAAIgX,IAAajb,EAAU8I,cAAc7E,IAAIgX,KACvElS,EAAgBjK,IAAI0I,EAE5B,CAGIuB,EAAgByO,OAASy1B,GACzBhB,GAEJ,IAKR,MAAMG,EAAYC,GAAa/kC,EAAM5H,IAC/BwtC,EAAYX,GAAmBjlC,EAAM5H,IACrCytC,EAAYV,GAAoBnlC,EAAM5H,IACtCgtC,EAAcC,GAAerlC,EAAM5H,GAAIusC,EAAee,GAG5D/hB,EAAaze,UAAY,uKAIG4/B,sIAGcc,aAAqB5lC,EAAM5H,6DAC3BytC,0GAGNT,0QAOWplC,EAAM5H,2CAIrDiY,EAAUxZ,YAAY8sB,GAGtB2hB,GAAiBtlC,EAAM5H,GAAG,IAI9BmtC,KAGI7sC,EAAUyI,aAAc,CACxB,MAAMqkC,EAAsBnyC,SAASS,cAAc,8BAA8B4E,EAAUyI,kBACvFqkC,GACAA,EAAoB9xC,UAAU8D,IAAI,OAE1C,CAEA,MAAMsuC,EAAgBzyC,SAASI,eAAe,wBAC1CqyC,IACAzyC,SAASgE,iBAAiB,WAAWC,SAAQwT,IACzCA,EAAOpX,UAAU2K,OAAO,UAAU,IAEtCynC,EAAcpyC,UAAU8D,IAAI,WAEpC,CAGA,SAASiuC,GAA4BvsC,GAI7BA,EAASkH,gBAET1H,EAAU4I,aAAe,CAAC,EAC1BtG,OAAOC,QAAQ/B,EAASkH,eAAe9I,SAAQ,EAAE0I,EAAO4D,MACpDlL,EAAU4I,aAAatB,GAAS,IAAI3L,IAAIwP,MAAMC,QAAQF,GAAQA,EAAO,GAAG,KAK5E1K,EAASmH,kBAET3H,EAAU6I,eAAiB,CAAC,EAC5BvG,OAAOC,QAAQ/B,EAASmH,iBAAiB/I,SAAQ,EAAEyM,EAAQC,MACvDtL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAIwP,MAAMC,QAAQE,GAAUA,EAAS,GAAG,KAKnF9K,EAASqH,mBAET7H,EAAU+I,gBAAkB,IAAIpN,IAAI6E,EAASqH,mBAI7CrH,EAASoH,iBAET5H,EAAU8I,cAAgB,IAAInN,IAAI6E,EAASoH,gBAEnD,CAGA,SAASykC,GAAapgC,GAQlB,MAPc,CACV,EAAG,cACH,EAAG,wBACH,EAAG,gBACH,EAAG,oBACH,EAAG,gBAEMA,IAAY,aAC7B,CAEA,SAASsgC,GAAmBtgC,GAQxB,MAPc,CACV,EAAG,UACH,EAAG,QACH,EAAG,eACH,EAAG,QACH,EAAG,cAEMA,IAAY,SAASA,GACtC,CAEA,SAASwgC,GAAoBxgC,GAQzB,MAPqB,CACjB,EAAG,0CACH,EAAG,6CACH,EAAG,iCACH,EAAG,+BACH,EAAG,+BAEaA,IAAY,qBACpC,CAEA,SAAS0gC,GAAe1gC,EAASggC,EAAee,GAE5C,OAAI/gC,EAAU,KAAOjN,aAAsC,YAAvBA,YAAY8H,QACrC,kBAIJ,GAAGmlC,KAAiBe,kBAC/B,CAEA,SAASJ,GAAiBtxC,GACtB,MAAMkd,EAAI7d,SAASI,eAAe,aAAaO,KAC/C,IAAKkd,EAAG,OAGR,MAAMC,EAAI9F,EAAcC,OAAOtX,EAAI,GAC/BoI,EAAI1D,EAAU4I,aAAatN,IAAM,IAAIK,IACrCid,EAAI5Z,YAAcA,YAAY8H,OAAS,eAE3C0R,EAAEhM,UAAY,GACd,IAAK,IAAImM,EAAI,EAAGA,GAAKF,EAAE5F,QAAS8F,IAAK,CACjC,MAAMF,EAAI9d,SAASwB,cAAc,OAC7B0c,EAAInV,EAAEO,IAAI0U,GACd,IAAI3c,GAAI,EACRV,GAAK,GAAKqd,EAAI,GAAK,YAAcC,IAAM5c,GAAI,GAC3Cyc,EAAErc,UAAY,aACdyc,IAAM7c,EAAIyc,EAAEzd,UAAU8D,IAAI,UAAY2Z,EAAEzd,UAAU8D,IAAI,UACtD,MAAMuuC,EAAIlB,GAAe7wC,EAAGqd,GAE5BF,EAAEjM,UAAY,qBACJmM,mBACV00B,EAAI,uGAAyG,cAC5Gx0B,GAAK7c,EAAI,0DAEMA,EAAI,yBAA2B,gCACvC,WAGJ6c,IAAM7c,EACNyc,EAAE/V,QAAU,KACR1C,EAAUyI,aAAenN,EACzB0E,EAAU0I,WAAaiQ,EACvBkC,EAAgBlC,EAAE,EAEf3c,IAEPyc,EAAE/V,QAAU,IAAMqb,KAGlBhhB,YAAW,KACP,MAAMuwC,EAAY70B,EAAErd,cAAc,aAC9BkyC,GACAA,EAAU1yC,iBAAiB,SAAUC,IACjCA,EAAM2xB,kBACNzO,IAAmB,GAE3B,GACD,IAGPvF,EAAEra,YAAYsa,EAClB,CACJ,CAEA,SAAS0zB,GAAe7kC,EAAOlD,GAC7B,MAAMme,EAAY5P,EAAcC,OAChC,IAAK2P,IAAcA,EAAUjb,EAAM,GAEjC,OAAO,EAGT,MAAMyT,EAAcwH,EAAUjb,EAAM,GAAGwL,aACvC,IAAIkI,EAAiB,EAIrB,IAAK,IAAIxT,EAAQ,EAAGA,GAASuT,EAAavT,IAAS,CACjD,MAAMyT,EAAW,GAAG3T,KAASlD,KAAOoD,KAChCxH,EAAU+I,gBAAgB9E,IAAIgX,IAAajb,EAAU8I,cAAc7E,IAAIgX,KACzED,GAGJ,CAKA,OAHmBA,IAAmBD,CAIxC,CAEA,SAASwyB,GAAiBjyC,GACxBA,EAAEkxB,kBAEGxtB,aAcHE,aAAakb,WAAW,oBAAoBpb,YAAYU,MACxDqe,OAbA5D,KAEApd,YAAW,KACT,MAAMgR,EAAYpT,SAASI,eAAe,aACpCiT,EAAarT,SAASI,eAAe,cACvCgT,GAAaC,IACfD,EAAU/S,UAAU8D,IAAI,UACxBkP,EAAWhT,UAAU2K,OAAO,UAC9B,GACC,KAMP,CAEA,SAAS6nC,KAEDxuC,YACAE,aAAakb,WAAW,oBAAoBpb,YAAYU,MAExDR,aAAakb,WAAW,0BAI5BnR,EAAW,iBACf,CA8BA,SAAS4jC,KACLlyC,SAASgE,iBAAiB,gCAAgCC,SAAQ6D,IAC9DA,EAAO7H,iBAAiB,SAAUU,IACdmH,EAAOiD,QAAQ,kBACvB1K,UAAU8Z,OAAO,QACzBxZ,EAAEkxB,iBAAiB,GACrB,GAEV,CAGA,SAASihB,GAAmBxzB,GACxB,IAAKtf,SAASI,eAAekf,GAAW,CAEpC,MAAM7H,EAASzX,SAASwB,cAAc,OACtCiW,EAAO1S,GAAKua,EACZ7H,EAAOhW,UAAY,SACnBzB,SAASuD,KAAKC,YAAYiU,EAC9B,CACJ,CAGA,SAASs7B,GAAezzB,EAAUC,GAAe,GAC7CuzB,GAAmBxzB,GACnBhR,EAAWgR,EAAUC,EACzB,CAGA,SAASyzB,KACL,MAAM9B,EAAelxC,SAASS,cAAc,sCACxCywC,GACAA,EAAaC,aAAa,UAAW,yDAIzCnxC,SAASgE,iBAAiB,mCAAmCC,SAAQ6D,IACjE,MAAMC,EAAUD,EAAOwnB,aAAa,WAChCvnB,GAAWA,EAAQyG,SAAS,iBAC5B1G,EAAOqpC,aAAa,UAAWppC,EAAQ8O,QAAQ,eAAgB,wBACnE,GAER,CAeA,SAASo8B,KACL,MAAMx7B,EAASzX,SAASI,eAAe,wBACvC,IAAKqX,EAAOhX,cAAc,qBAAsB,CAC5C,MAAMuc,EAAYhd,SAASwB,cAAc,OACzCwb,EAAUvb,UAAY,mBACtBgW,EAAOjU,YAAYwZ,EACvB,CACJ,CAEA,SAASjc,KACL,MAAMH,EAAYZ,SAASS,cAAc,eACnCI,EAAkBb,SAASS,cAAc,qBACzCqjC,EAAe9jC,SAASS,cAAc,kBAExCG,EAAUP,UAAUC,SAAS,SAC7BM,EAAUP,UAAU2K,OAAO,QAC3BnK,EAAgBR,UAAU2K,OAAO,QAC7B84B,GAAcA,EAAazjC,UAAU2K,OAAO,UAEhDpK,EAAUP,UAAU8D,IAAI,QACxBtD,EAAgBR,UAAU8D,IAAI,QAC1B2/B,GAAcA,EAAazjC,UAAU8D,IAAI,QAErD,CAEA,SAASqnB,KAEL,GAAInmB,EAAU+I,gBAAgByO,KAAO,GAAKxX,EAAU8I,cAAc0O,KAAO,EACrE,OAAO,EAIX,IAAK,IAAIlQ,EAAQ,EAAGA,GAAS,EAAGA,IAAS,CACrC,MAAMsB,EAAe5I,EAAU4I,aAAatB,GAE5C,IAAc,IAAVA,IAAesB,GAAsC,IAAtBA,EAAa4O,QAI5C5O,GAAgBA,EAAa4O,KAAO,GACpC,OAAO,CAEf,CAGA,MAAMvM,EAAgB/L,aAAaC,QAAQ,mBAC3C,GAAI8L,EAAe,CACf,MAAM4iC,EAAS7jC,KAAKC,MAAMgB,GAC1B,GAAI4iC,EAAO9kC,iBAAmB8kC,EAAO9kC,gBAAgBgD,OAAS,EAC1D,OAAO,EAEX,GAAI8hC,EAAO/kC,eAAiB+kC,EAAO/kC,cAAciD,OAAS,EACtD,OAAO,CAEf,CAEA,OAAO,CACX,CAEA,SAAS+hC,GAAyBxmC,GAC9B,IAAKtH,EAAU4I,aAAatB,GAAQ,OAAO,KAE3C,MAAM4D,EAAOC,MAAM5L,KAAKS,EAAU4I,aAAatB,IAAQ+R,MAAK,CAACR,EAAGmN,IAAMA,EAAInN,IAE1E,IAAK,MAAMzU,KAAO8G,EAAM,CACpB,MAAMG,EAAS,GAAG/D,KAASlD,IAC3B,IAAKpE,EAAU6I,eAAewC,GAAS,SAEvC,MAAMC,EAASH,MAAM5L,KAAKS,EAAU6I,eAAewC,IAASgO,MAAK,CAACR,EAAGmN,IAAMA,EAAInN,IAE/E,IAAK,MAAMrR,KAAS8D,EAAQ,CACxB,MAAM2P,EAAW,GAAG3T,KAASlD,KAAOoD,IAEpC,IAAKxH,EAAU8I,cAAc7E,IAAIgX,KAAcjb,EAAU+I,gBAAgB9E,IAAIgX,GACzE,MAAO,CAAE3T,QAAOlD,MAAKoD,QAE7B,CACJ,CAIA,MAAMumC,EAAcp7B,EAAcC,OAAOtL,EAAQ,GAC3C0mC,EAAkB9iC,EAAK,GAE7B,OAAI8iC,EAAkBD,EAAYl7B,QAEvB,CAAEvL,QAAOlD,IAAK4pC,EAAkB,EAAGxmC,MAAO,GAC1CF,EAAQ,EAER,CAAEA,MAAOA,EAAQ,EAAGlD,IAAK,EAAGoD,MAAO,GAIvC,CAAEF,QAAOlD,IAAK8G,EAAK,GAAI1D,MAAO,EACzC,CAEA,SAAS4e,KAEL,MAAMzB,EAAUhqB,SAASwB,cAAc,OACvCwoB,EAAQvoB,UAAY,iBACpBuoB,EAAQ/nB,MAAMuhB,QAAU,iTAcxB,MAAMhZ,EAAQxK,SAASwB,cAAc,OACrCgJ,EAAM/I,UAAY,oBAClB+I,EAAMvI,MAAMuhB,QAAU,+TAYtBhZ,EAAMqH,UAAY,2oDAmBlB7R,SAASuD,KAAKC,YAAYwmB,GAC1BA,EAAQxmB,YAAYgH,GAGJA,EAAMxG,iBAAiB,iBAC/BC,SAAQ6D,IACZA,EAAO7H,iBAAiB,aAAa,KACjC6H,EAAO7F,MAAM8X,WAAa,wBAC1BjS,EAAO7F,MAAMmyB,UAAY,kBAAkB,IAG/CtsB,EAAO7H,iBAAiB,YAAY,KAChC6H,EAAO7F,MAAM8X,WAAa,wBAC1BjS,EAAO7F,MAAMmyB,UAAY,eAAe,IAG5CtsB,EAAO7H,iBAAiB,SAAS,KAC7B,MAAM0M,EAAQrI,SAASwD,EAAO0W,QAAQ7R,OACtCpI,aAAa6B,QAAQ,iBAAkBuG,GACvCqd,EAAQhf,SAGR3F,EAAUyI,aAAenB,EACzBtH,EAAU0I,WAAa,EACvBqT,GAAW,EAAE,GACf,GAEV,CAEA,SAASrQ,IAKA1L,EAAU4I,aAAa,KACxB5I,EAAU4I,aAAa,GAAK,IAAIjN,KAGpC,IAAK,IAAIK,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzBgE,EAAU4I,aAAa,GAAG9J,IAAI9C,GAC9B,MAAMqP,EAAS,KAAKrP,IACfgE,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI,CAAC,IAEpD,CAGA,IAAK,IAAI2L,EAAQ,EAAGA,GAAS,EAAGA,IAAS,CAChCtH,EAAU4I,aAAatB,KACxBtH,EAAU4I,aAAatB,GAAS,IAAI3L,IAAI,CAAC,KAE7C,MAAM0P,EAAS,GAAG/D,MACbtH,EAAU6I,eAAewC,KAC1BrL,EAAU6I,eAAewC,GAAU,IAAI1P,IAAI,CAAC,IAEpD,CAIA2G,OAAOC,QAAQvC,EAAU6I,gBAAgBjK,SAAQ,EAAEyM,EAAQC,MACvD,MAAMs/B,EAAWnqC,KAAKmW,OAAOzL,MAAM5L,KAAK+L,IACxC,IAAK,IAAItP,EAAI,EAAGA,EAAI4uC,EAAU5uC,IAC1BsP,EAAOxM,IAAI9C,EACf,GAIR,CAEA,SAAS4Q,IAIP,MAAM7C,EAAe,CACnBzC,MAAOtH,EAAUyI,cAAgB,EACjClB,WAAYvH,EAAU0I,YAAc,EACpClB,MAAOxH,EAAU2I,cAAgB,EACjC/I,MAAOI,EAAUJ,OAAS,EAC1B6H,MAAOzH,EAAUyH,OAAS,CAAC,GAIzBzH,EAAU4I,eACZmB,EAAarC,cAAgB,CAAC,EAC9BpF,OAAOC,QAAQvC,EAAU4I,cAAchK,SAAQ,EAAE0I,EAAO4D,MACtDnB,EAAarC,cAAcJ,GAAS6D,MAAM5L,KAAK2L,GAAQ,GAAG,KAK1DlL,EAAU6I,iBACZkB,EAAapC,gBAAkB,CAAC,EAChCrF,OAAOC,QAAQvC,EAAU6I,gBAAgBjK,SAAQ,EAAEyM,EAAQC,MACzDvB,EAAapC,gBAAgB0D,GAAUF,MAAM5L,KAAK+L,GAAU,GAAG,KAK/DtL,EAAU+I,iBAAmB/I,EAAU+I,gBAAgByO,KAAO,IAChEzN,EAAalC,iBAAmBsD,MAAM5L,KAAKS,EAAU+I,kBAGnD/I,EAAU8I,eAAiB9I,EAAU8I,cAAc0O,KAAO,IAC5DzN,EAAanC,eAAiBuD,MAAM5L,KAAKS,EAAU8I,gBAMjD9J,YAIFM,EAAeC,KAAK,iBACjBC,OAAO,KACPC,GAAG,UAAWT,YAAYU,IAC1BC,SACA2B,MAAK,EAAGlC,OAAMC,YACb,GAAIA,EAGF,YADA4uC,GAA2BlkC,GAK7B,MAAMmkC,EAAmB,mBAAoB9uC,EAClB,qBAAsBA,UAIxC2K,EAAalC,iBAIjBqmC,UACInkC,EAAanC,eAKtBtI,EAAeC,KAAK,iBACjBuB,OAAOiJ,GACPtK,GAAG,UAAWT,YAAYU,IAC1B4B,MAAK,EAAGlC,OAAMC,YACTA,EAEF4uC,GAA2BlkC,IAG3BkkC,GAA2BlkC,GAG3BpP,SAAS60B,cAAc,IAAIC,YAAY,gBAAiB,CACtDC,OAAQ,CAAE1vB,gBAEd,GACA,IAIRiuC,GAA2BlkC,GAI7B,MAAMwT,EAAc,CAClBjW,MAAOtH,EAAUyI,aACjBrE,IAAKpE,EAAU0I,WACflB,MAAOxH,EAAU2I,aACjB3G,UAAWyJ,KAAKrL,OAGlBlB,aAAa6B,QAAQ,cAAeiJ,KAAKE,UAAUqT,GAErD,CAGA,SAAS0wB,GAA2BlkC,GAChC7K,aAAa6B,QAAQ,kBAAmBiJ,KAAKE,UAAUH,GAC3D,CAEA,SAASokC,KAOL7rC,OAAOC,QAAQvC,EAAU4I,cAAchK,SAAQ,EAAE0I,EAAO4D,MACkB,IAI1E5I,OAAOC,QAAQvC,EAAU6I,gBAAgBjK,SAAQ,EAAEyM,EAAQC,MACgB,GAM/E,CAGA,SAAS8iC,KAELxyC,EAAeE,aAAe,GAGFuyC,GAASplC,EAAY,KAG7C,iEAAiE4I,KAAKC,UAAUC,aAChFpX,SAASuD,KAAKlD,UAAU8D,IAAI,iBAG5BnE,SAAS0wB,KAAKijB,mBAAmB,YAAa,oOAUtD,CAGA,SAASD,GAASE,EAAMC,GACpB,IAAI5I,EACJ,OAAO,YAA6B6I,GAKhCvrC,aAAa0iC,GACbA,EAAU7oC,YALI,KACVmG,aAAa0iC,GACb2I,KAAQE,EAAK,GAGWD,EAChC,CACJ,CAGA,SAASE,KAEL/zC,SAASC,iBAAiB,cAAc,QAAU,CAAE+zC,SAAS,IAC7Dh0C,SAASC,iBAAiB,aAAa,QAAU,CAAE+zC,SAAS,GAShE,CAWA,SAASC,KAEL,MAAMC,EAAel0C,SAASS,cAAc,yBACtC+J,EAAQxK,SAASS,cAAc,wBAC/B0zC,EAAcn0C,SAASS,cAAc,wBAG3C2zC,KAGIF,GAAgB1pC,GAChB0pC,EAAaj0C,iBAAiB,SAAS,WACnCuK,EAAMnK,UAAU8D,IAAI,OACxB,IAIAgwC,GAAe3pC,IACf2pC,EAAYl0C,iBAAiB,SAAS,WAClCuK,EAAMnK,UAAU2K,OAAO,OAC3B,IAGAR,EAAMvK,iBAAiB,SAAS,SAASU,GACjCA,EAAEG,SAAW0J,GACbA,EAAMnK,UAAU2K,OAAO,OAE/B,KAIyBhL,SAASgE,iBAAiB,yBAClCC,SAAQ6D,IACzBA,EAAO7H,iBAAiB,SAAS,WAC7B,MAAMo0C,EAAS/yC,KAAKguB,aAAa,eAMjC,GAHAglB,GAA0BD,EAFZ/yC,KAAKguB,aAAa,eAKjB,aAAX+kB,GAAoC,UAAXA,EAAoB,CAC5Br0C,SAASgE,iBAAiB,iBAAiBqwC,OACnDpwC,SAAQswC,GAAWA,EAAQl0C,UAAU2K,OAAO,YACrD1J,KAAKjB,UAAU8D,IAAI,SACvB,CACJ,GAAE,GAEV,CAEA,SAASmwC,GAA0BD,EAAQltC,GACvC,MAAM5D,EAAOvD,SAASuD,KAGtB,OAAO8wC,GACH,IAAK,WACD9wC,EAAKlD,UAAU2K,OAAO,gBAAiB,mBACzB,SAAV7D,GAAkB5D,EAAKlD,UAAU8D,IAAI,iBAC3B,aAAVgD,GAAsB5D,EAAKlD,UAAU8D,IAAI,mBAC7C,MAEJ,IAAK,QACDZ,EAAKlD,UAAU2K,OAAO,cAAe,cACvB,UAAV7D,GAAmB5D,EAAKlD,UAAU8D,IAAI,eAC5B,SAAVgD,GAAkB5D,EAAKlD,UAAU8D,IAAI,cACzC,MAEJ,IAAK,aACDZ,EAAKlD,UAAU2K,OAAO,aACR,cAAV7D,GAAuB5D,EAAKlD,UAAU8D,IAAI,aAC9C,MAEJ,IAAK,WACD,IAAIqwC,EAAez2B,WAAW02B,iBAAiBlxC,GAAMmxC,iBAAiB,iBAAmB,GAE3E,aAAVvtC,GACAqtC,EAAe1uC,KAAKC,IAAIyuC,EAAe,GAAK,KAC5CjxC,EAAKtB,MAAMsb,YAAY,eAAgBi3B,GACvCjxC,EAAKtB,MAAMktC,SAAW,eAAeqF,MACpB,aAAVrtC,GACPqtC,EAAe1uC,KAAKmW,IAAIu4B,EAAe,GAAK,IAC5CjxC,EAAKtB,MAAMsb,YAAY,eAAgBi3B,GACvCjxC,EAAKtB,MAAMktC,SAAW,eAAeqF,MACpB,UAAVrtC,IACP5D,EAAKtB,MAAM0yC,eAAe,gBAC1BpxC,EAAKtB,MAAMktC,SAAW,IAE1B,MAEJ,IAAK,aACD5rC,EAAKlD,UAAU2K,OAAO,iBACR,aAAV7D,GAAsB5D,EAAKlD,UAAU8D,IAAI,iBAC7C,MAEJ,IAAK,gBACDZ,EAAKlD,UAAU2K,OAAO,4BACR,cAAV7D,GAAuB5D,EAAKlD,UAAU8D,IAAI,4BAC9C,MAEJ,IAAK,aACDZ,EAAKlD,UAAU2K,OAAO,gBAAiB,sBACzB,aAAV7D,GAAsB5D,EAAKlD,UAAU8D,IAAI,iBAC/B,YAAVgD,GAAqB5D,EAAKlD,UAAU8D,IAAI,sBAC5C,MAEJ,IAAK,QACDZ,EAAKlD,UAAU2K,OAAO,cACR,SAAV7D,GAAkB5D,EAAKlD,UAAU8D,IAAI,cACzC,MAEJ,IAAK,aACDZ,EAAKlD,UAAU2K,OAAO,iBACR,UAAV7D,GAAmB5D,EAAKlD,UAAU8D,IAAI,iBAC1C,MAEJ,IAAK,aACDZ,EAAKlD,UAAU2K,OAAO,gBACR,UAAV7D,GAAmB5D,EAAKlD,UAAU8D,IAAI,gBAC1C,MAEJ,IAAK,QACa,QAAVgD,GAAiBytC,KAK7BC,IACJ,CAEA,SAASA,KACL,MAAMtxC,EAAOvD,SAASuD,KAChB6gC,EAAW,CACb0Q,WAAYvxC,EAAK9B,UACjB0tC,SAAU5rC,EAAKtB,MAAMktC,SACrB4F,UAAWxxC,EAAKtB,MAAMyyC,iBAAiB,iBAG3CnwC,aAAa6B,QAAQ,wBAAyBiJ,KAAKE,UAAU60B,GACjE,CAEA,SAASgQ,KACL,MAAMY,EAAgBzwC,aAAaC,QAAQ,yBAC3C,GAAIwwC,EAAe,CACf,MAAM5Q,EAAW/0B,KAAKC,MAAM0lC,GACtBzxC,EAAOvD,SAASuD,KAGlB6gC,EAAS0Q,aACTvxC,EAAK9B,UAAY2iC,EAAS0Q,YAI1B1Q,EAAS+K,WACT5rC,EAAKtB,MAAMktC,SAAW/K,EAAS+K,UAI/B/K,EAAS2Q,WACTxxC,EAAKtB,MAAMsb,YAAY,eAAgB6mB,EAAS2Q,WAIpDE,IACJ,CACJ,CAEA,SAASA,KACL,MAAM1xC,EAAOvD,SAASuD,KAmBtBoE,OAAOC,QAhBgB,CACnB,gBAAiB,CAAEysC,OAAQ,WAAYltC,MAAO,QAC9C,kBAAmB,CAAEktC,OAAQ,WAAYltC,MAAO,YAChD,cAAe,CAAEktC,OAAQ,QAASltC,MAAO,SACzC,aAAc,CAAEktC,OAAQ,QAASltC,MAAO,QACxC+tC,UAAa,CAAEb,OAAQ,aAAcltC,MAAO,aAC5C,gBAAiB,CAAEktC,OAAQ,aAAcltC,MAAO,YAChD,2BAA4B,CAAEktC,OAAQ,gBAAiBltC,MAAO,aAC9D,gBAAiB,CAAEktC,OAAQ,aAAcltC,MAAO,YAChD,qBAAsB,CAAEktC,OAAQ,aAAcltC,MAAO,WACrD,aAAc,CAAEktC,OAAQ,QAASltC,MAAO,QACxC,gBAAiB,CAAEktC,OAAQ,aAAcltC,MAAO,SAChD,eAAgB,CAAEktC,OAAQ,aAAcltC,MAAO,WAIpBlD,SAAQ,EAAExC,EAAW0zC,MAChD,MAAMC,EAAW7xC,EAAKlD,UAAUC,SAASmB,GACnCqG,EAAS9H,SAASS,cAAc,iBAAiB00C,EAAWd,wBAAwBc,EAAWhuC,WAEjGW,IACIstC,EACAttC,EAAOzH,UAAU8D,IAAI,UAErB2D,EAAOzH,UAAU2K,OAAO,UAEhC,IAIChL,SAASS,cAAc,oCACxBT,SAASS,cAAc,kDAAkDJ,UAAU8D,IAAI,UAGtFnE,SAASS,cAAc,iCACxBT,SAASS,cAAc,gDAAgDJ,UAAU8D,IAAI,UAGpFnE,SAASS,cAAc,sCACxBT,SAASS,cAAc,oDAAoDJ,UAAU8D,IAAI,UAGxFnE,SAASS,cAAc,sCACxBT,SAASS,cAAc,qDAAqDJ,UAAU8D,IAAI,UAGzFnE,SAASS,cAAc,yCACxBT,SAASS,cAAc,uDAAuDJ,UAAU8D,IAAI,UAG3FnE,SAASS,cAAc,sCACxBT,SAASS,cAAc,qDAAqDJ,UAAU8D,IAAI,UAGzFnE,SAASS,cAAc,iCACxBT,SAASS,cAAc,+CAA+CJ,UAAU8D,IAAI,UAGnFnE,SAASS,cAAc,sCACxBT,SAASS,cAAc,oDAAoDJ,UAAU8D,IAAI,UAGxFnE,SAASS,cAAc,sCACxBT,SAASS,cAAc,oDAAoDJ,UAAU8D,IAAI,SAEjG,CAEA,SAASywC,KACL,MAAMrxC,EAAOvD,SAASuD,KAGtBA,EAAKlD,UAAU2K,OACX,gBAAiB,kBAAmB,cAAe,aACnD,YAAa,gBAAiB,2BAC9B,gBAAiB,qBAAsB,aACvC,gBAAiB,gBAIrBzH,EAAKtB,MAAMktC,SAAW,GACtB5rC,EAAKtB,MAAM0yC,eAAe,gBAG1B30C,SAASgE,iBAAiB,gCAAgCC,SAAQ6D,IAC9DA,EAAOzH,UAAU2K,OAAO,SAAS,IAIrChL,SAASS,cAAc,kDAAkDJ,UAAU8D,IAAI,UACvFnE,SAASS,cAAc,gDAAgDJ,UAAU8D,IAAI,UACrFnE,SAASS,cAAc,oDAAoDJ,UAAU8D,IAAI,UACzFnE,SAASS,cAAc,qDAAqDJ,UAAU8D,IAAI,UAC1FnE,SAASS,cAAc,uDAAuDJ,UAAU8D,IAAI,UAC5FnE,SAASS,cAAc,qDAAqDJ,UAAU8D,IAAI,UAC1FnE,SAASS,cAAc,+CAA+CJ,UAAU8D,IAAI,UACpFnE,SAASS,cAAc,oDAAoDJ,UAAU8D,IAAI,UACzFnE,SAASS,cAAc,oDAAoDJ,UAAU8D,IAAI,UAGzFI,aAAakb,WAAW,wBAC5B,CAEAhX,eAAeq5B,GAAmB3U,EAAMkoB,GACtC,GAAIhxC,YACF,IAEE,MAAMI,KAAEA,EAAIC,MAAEA,SAAgBC,EAAeC,KAAK,yBAC/CC,OAAO,KACPC,GAAG,UAAWT,YAAYU,IAC1BD,GAAG,OAAQqoB,GACXnoB,SAEH,GAAIN,GAAwB,aAAfA,EAAM8H,KACjB,OAGF,IAAI8oC,GAAY,EACZ5tB,EAAa,EAEjB,GAAIjjB,EAAM,CAER,MAAMyC,EAAWzC,EAAK8wC,eAAiB,EACvC7tB,EAAaxgB,GAAY,EAAI,EAAI,EAEjC,MAAMxC,MAAEA,SAAgBC,EAAeC,KAAK,yBACzCuB,OAAO,CACNovC,eAAgBruC,EAChBsuC,mBAAmB,IAAI1kC,MAAO4d,cAC9B+mB,UAAWJ,EACXK,aAAcjxC,EAAKixC,aAAehuB,IAEnC5iB,GAAG,UAAWT,YAAYU,IAC1BD,GAAG,OAAQqoB,GAEd,GAAIzoB,EAAO,MACb,KAAO,CAEL4wC,GAAY,EACZ5tB,EAAa,EAEb,MAAMhjB,MAAEA,SAAgBC,EAAeC,KAAK,yBACzCwI,OAAO,CAAC,CACPV,QAASrI,YAAYU,GACrBooB,KAAMA,EACNooB,eAAgB,EAChBE,UAAWJ,EACXK,aAAchuB,KAGlB,GAAIhjB,EAAO,OAGX,MAAMD,KAAEA,EAAMC,MAAO6yB,SAAqB5yB,EAAeC,KAAK,gBAC3DC,OAAO,0BACPC,GAAG,UAAWT,YAAYU,IAC1BC,SAEH,IAAKuyB,EAAY,CACf,MAAMoe,GAAgBlxC,GAAMoC,wBAA0B,GAAK,GACrDnC,MAAEA,SAAgBC,EAAeC,KAAK,gBACzCuB,OAAO,CAAEU,uBAAwB8uC,IACjC7wC,GAAG,UAAWT,YAAYU,IAEzBL,GAGF1E,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC/CqgB,GAAcrgB,EAAInC,SAASmC,EAAGT,cAAgB,EAAG2vC,EAAa,GAGpE,CACF,CAMA,OAJIjuB,EAAa,SACT9jB,EAAasB,YAAYwiB,GAG1B,CAAE4tB,YAAW5tB,aACtB,CAAE,MAAO/mB,GAET,CAEJ,CAEA,SAASi1C,KACP,MAAMxvB,EAAiBpmB,SAASI,eAAe,mBAC/C,IAAKgmB,EAAgB,OAErB,MAAMyvB,EAAU,IAAI,gCAAgC,0BAC9CC,EAAiB1vB,EAAe6C,YAGlCnnB,OAAOi0C,wBACTv5B,cAAc1a,OAAOi0C,wBAIvBj0C,OAAOi0C,uBAAyB/5B,aAAY,KAE1C,MAAMhV,EAAQlB,KAAK4T,MAAsB,EAAhB5T,KAAK6T,UAAgB,EAE9C,IAAK,IAAItY,EAAI,EAAGA,EAAI2F,EAAO3F,IAAK,CAC9B,MAAM20C,EAASh2C,SAASwB,cAAc,OACtCw0C,EAAOv0C,UAAY,iBACnBu0C,EAAOhwC,YAAc6vC,EAAQ/vC,KAAK4T,MAAM5T,KAAK6T,SAAWk8B,EAAQzkC,SAGhE,MAAMlP,EAAO4D,KAAK6T,SAAWm8B,EACvBh9B,EAAW,EAAoB,EAAhBhT,KAAK6T,SAE1Bq8B,EAAO/zC,MAAMC,KAAO,GAAGA,MACvB8zC,EAAO/zC,MAAMwtC,kBAAoB,GAAG32B,KAEpCsN,EAAe5iB,YAAYwyC,GAG3B5zC,YAAW,KACL4zC,EAAOnlB,aAAezK,GACxBA,EAAezI,YAAYq4B,EAC7B,GACY,IAAXl9B,EACL,IACC,IACL,CAEA,SAAS6oB,KAEP,IAAKtoB,EAAY6H,YAAa,OAI9B,MAAMwgB,EAAiB1hC,SAASS,cAAc,oBAC9C,IAAKihC,EAEH,OAGF,MAAM77B,EAAW67B,EAAejhC,cAAc,aAC9C,IAAKoF,EAEH,OAIF,MAAM4b,EAAapI,EAAYnQ,MAAMkI,OAC/BmI,EAAeF,EAAYE,cAAgB,EAE3CiwB,EADiB1jC,KAAKmW,IAAI,EAAGwF,EAAalI,GACHkI,EAKvC4D,EAAgB,EAAIvf,KAAKsX,GAAK,GAWpC,GARAvX,EAAS5D,MAAMsjB,iBAAmBF,GAAiB,EAAImkB,GAGlD3jC,EAASxF,UAAUC,SAAS,gBAC/BuF,EAASxF,UAAU8D,IAAI,eAIrBqlC,EAAsB,IAExB3jC,EAAS5D,MAAMwjB,OAAS,UACxB5f,EAASxF,UAAU2K,OAAO,gBACrB,GAAIw+B,EAAsB,KAM/B,GAJA3jC,EAAS5D,MAAMwjB,OAAS,UACxB5f,EAASxF,UAAU2K,OAAO,WAGtBw+B,GAAuB,MAASnwB,EAAYwvB,wBAAyB,CACvExvB,EAAYwvB,yBAA0B,EAItC,MAAMoN,EAAWnwC,KAAK4T,MAAmB,IAAb+H,GAC5BpI,EAAYE,aAAe08B,EAG3B,MAAM1U,EAAUvhC,SAASS,cAAc,mBACnC8gC,IACFA,EAAQt/B,MAAM8X,WAAa,uDAC3B3X,YAAW,KACTm/B,EAAQt/B,MAAM8X,WAAa,sDAAsD,GAChF,MAIL3X,YAAW,IAAMu/B,MAAuB,IAC1C,OAOA,GAJA97B,EAAS5D,MAAMwjB,OAAS,UACxB5f,EAASxF,UAAU8D,IAAI,WAGnBqlC,GAAuB,MAASnwB,EAAYyvB,yBAA0B,CACxEzvB,EAAYyvB,0BAA2B,EAIvC,MAAMmN,EAAWnwC,KAAK4T,MAAmB,GAAb+H,GAC5BpI,EAAYE,aAAe08B,EAG3B,MAAM1U,EAAUvhC,SAASS,cAAc,mBACnC8gC,IACFA,EAAQt/B,MAAM8X,WAAa,uDAC3B3X,YAAW,KACTm/B,EAAQt/B,MAAM8X,WAAa,sDAAsD,GAChF,MAIL3X,YAAW,IAAMu/B,MAAuB,IAC1C,CAEJ,CAEA,SAASuU,GAASC,EAAqBC,GACrC,MAAM1U,EAAiB1hC,SAASS,cAAc,oBACxCoF,EAAW67B,EAAiBA,EAAejhC,cAAc,aAAe,KACxE8gC,EAAUvhC,SAASS,cAAc,mBAEvC,IAAKoF,IAAa07B,EAAS,OAG3B,MAAM8U,EAAgB9U,EAAQt/B,MAAM8X,WACpCwnB,EAAQt/B,MAAM8X,WAAaq8B,EAC3B7U,EAAQlhC,UAAU8D,IAAI,uBAGtB,MAAMiiB,EAAiBpmB,SAASS,cAAc,oBAC1C2lB,IACFA,EAAenkB,MAAMyb,UAAY,OACjC0I,EAAeoG,aACfpG,EAAenkB,MAAMyb,UAAY,wBAInC,MACM44B,EADgB,EAAIxwC,KAAKsX,GAAK,IACD,EAAI+4B,GAGvC/zC,YAAW,KACTyD,EAAS5D,MAAM2uC,WAAa,gCAC5B/qC,EAAS5D,MAAMsjB,iBAAmB+wB,EAGlCl0C,YAAW,KACTm/B,EAAQt/B,MAAM8X,WAAas8B,EAC3B9U,EAAQlhC,UAAU2K,OAAO,sBAAsB,GAC9C,IAAK,GACP,IACL,CAEA,SAASurC,GAAkB/U,GAAc,GACvC,MAAMD,EAAUvhC,SAASS,cAAc,mBACvC,IAAK8gC,EAAS,OAGd,MAAMiV,EAAajV,EAAQt/B,MAAM8X,WAGjC,GAAIynB,EAAa,CACf,MAAMzkB,EAAS,CAAC,SAAU,SAAU,YAAa,YAAa,SACxD05B,EAAoB15B,EAAOjX,KAAK4T,MAAM5T,KAAK6T,SAAWoD,EAAO3L,SACnEmwB,EAAQt/B,MAAM8X,WAAa,sCAAsC08B,aACnE,CAGAlV,EAAQlhC,UAAU8D,IAAI,gBAGtB/B,YAAW,KACTm/B,EAAQlhC,UAAU2K,OAAO,gBAErBw2B,IACFD,EAAQt/B,MAAM8X,WAAay8B,EAC7B,GACC,IACL,CAGA,SAASnzB,KAGP,MAAM+C,EAAiBpmB,SAASI,eAAe,mBAO/C,GANIgmB,IACFA,EAAenkB,MAAMsb,YAAY,aAAc,4CAA6C,aAC5F6I,EAAenkB,MAAMsb,YAAY,YAAa,sBAAuB,eAIlEvd,SAASI,eAAe,mBAAoB,CAC/C,MAAMs2C,EAAY12C,SAASwB,cAAc,SACzCk1C,EAAU3xC,GAAK,kBACf2xC,EAAU1wC,YAAc,ybAgBxBhG,SAAS0wB,KAAKltB,YAAYkzC,EAC5B,CAGA,MAAMlW,EAAexgC,SAASI,eAAe,iBACzCogC,IACFA,EAAav+B,MAAMsb,YAAY,QAAS,UAAW,aACnDijB,EAAav+B,MAAMsb,YAAY,cAAe,gCAAiC,aAC/EijB,EAAav+B,MAAMsb,YAAY,YAAa,wBAAyB,cAIvE,MAAMyF,EAAiBhjB,SAASS,cAAc,oBAC1CuiB,IACGlhB,OAAOmoC,oBACVnoC,OAAOmoC,kBAAoBjnB,EAAenR,WAG5CmR,EAAenR,UAAY,gmBAuB/B,CAEA,SAAS8kC,GAAiBC,GACxB,GAAIA,EAAS,CAEX,MAAMlV,EAAiB1hC,SAASS,cAAc,oBACxC4rB,EAAcqV,GAAgBjhC,cAAc,aAElD,GAAI4rB,EAAa,CAEf,MAAMgqB,EAAgBhqB,EAAYpqB,MAAMwjB,OAGlCoxB,EAAgB,CAAC,UAAW,UAAW,UAAW,WAClDrV,EAAcqV,EAAc/wC,KAAK4T,MAAM5T,KAAK6T,SAAWk9B,EAAczlC,SAE3Eib,EAAYpqB,MAAM2uC,WAAa,mBAC/BvkB,EAAYpqB,MAAMwjB,OAAS+b,EAG3Bp/B,YAAW,KACTiqB,EAAYpqB,MAAMwjB,OAAS4wB,CAAa,GACvC,IACL,CACF,CACF,CAIA,SAASzN,KACL,MAAMF,EAAiB1oC,SAASwB,cAAc,OAC9CknC,EAAe3jC,GAAK,aACpB2jC,EAAezmC,MAAMuhB,QAAU,oMAU/B,MAAMmlB,EAAe3oC,SAASwB,cAAc,OAY5C,OAXAmnC,EAAa1mC,MAAMuhB,QAAU,+OAU7BklB,EAAellC,YAAYmlC,GACpB,CAAE3rB,UAAW0rB,EAAgBxkC,QAASykC,EACjD,CAEA,SAASK,GAAgBL,EAAc3tB,GACnC,GAAI2tB,EAAc,CACd,MAAMxsB,EAAUrW,KAAK4T,MAAMsB,EAAgB,IACrCoB,EAAUpB,EAAgB,GAChC2tB,EAAa3iC,YAAc,GAAGmW,EAAQ9V,WAAWkW,SAAS,EAAG,QAAQH,EAAQ/V,WAAWkW,SAAS,EAAG,MACxG,CACJ,CAEA,SAASutB,KACL,MAAMgN,EAAqB92C,SAASwB,cAAc,OAClDs1C,EAAmB70C,MAAMuhB,QAAU,sRAYnCxjB,SAASuD,KAAKC,YAAYszC,GAE1B,MAAMC,EAAejxC,KAAK4T,MAAsB,EAAhB5T,KAAK6T,UAAgB,EACrD,IAAI41B,EAAQ,EAEZ,IAAK,IAAIluC,EAAI,EAAGA,EAAI01C,EAAc11C,IAC9Be,YAAW,KACP00C,EAAmB70C,MAAM4G,QAAU,IACnCzG,YAAW,KACP00C,EAAmB70C,MAAM4G,QAAU,GAAG,GACvC,GAAG,GACP0mC,GACHA,GAAS,IAGbntC,YAAW,KACPpC,SAASuD,KAAKoa,YAAYm5B,EAAmB,GAC9CvH,EAAQ,IACf,CAEA,SAASxF,KACL,MAAM3jB,EAAiBpmB,SAASI,eAAe,mBAC/C,IAAKgmB,EAAgB,OAGjBtkB,OAAOi0C,wBACPv5B,cAAc1a,OAAOi0C,wBAGzB,MAAMF,EAAU,IAAI,gCAAiC,0BAC/CmB,EAAc5wB,EAAe6C,YAEnCnnB,OAAOi0C,uBAAyB/5B,aAAY,KACxC,MAAMi7B,EAAgBnxC,KAAK4T,MAAsB,EAAhB5T,KAAK6T,UAAgB,EAEtD,IAAK,IAAItY,EAAI,EAAGA,EAAI41C,EAAe51C,IAAK,CACpC,MAAM20C,EAASh2C,SAASwB,cAAc,OACtCw0C,EAAOv0C,UAAY,sBACnBu0C,EAAOhwC,YAAc6vC,EAAQ/vC,KAAK4T,MAAM5T,KAAK6T,SAAWk8B,EAAQzkC,SAEhE4kC,EAAO/zC,MAAMuhB,QAAU,6FAGX1d,KAAK6T,SAAWq9B,+PAQ5B5wB,EAAe5iB,YAAYwyC,GAG3B5zC,YAAW,KACH4zC,EAAOnlB,aAAezK,GACtBA,EAAezI,YAAYq4B,EAC/B,GACD,IACP,IACD,IACP,CAEA,SAAS9L,KACDpoC,OAAOi0C,yBACPv5B,cAAc1a,OAAOi0C,wBACrBj0C,OAAOi0C,uBAAyB,KAExC,CAEA,SAASmB,KACP,MAAMR,EAAY12C,SAASwB,cAAc,SACzCk1C,EAAU3xC,GAAK,oBACf2xC,EAAU1wC,YAAc,wxCA2CxBhG,SAAS0wB,KAAKltB,YAAYkzC,EAC5B,CAEA,SAASS,KACL,MAAMC,EAAiBp3C,SAASwB,cAAc,OAC9C41C,EAAen1C,MAAMuhB,QAAU,yUAe/B,MAAM6zB,EAAiBr3C,SAASwB,cAAc,OAC9C61C,EAAep1C,MAAMuhB,QAAU,iQAU/B6zB,EAAexlC,UAAY,yYAKoCwH,EAAYnQ,MAAMkI,wnCA+BjF,MAAMkmC,EAAcD,EAAe52C,cAAc,iBAC3C8jC,EAAU8S,EAAe52C,cAAc,aAE7C,CAAC62C,EAAa/S,GAAStgC,SAAQqE,IAC3BA,EAAIrI,iBAAiB,cAAc,KAC/BqI,EAAIrG,MAAMmyB,UAAY,aAAa,IAEvC9rB,EAAIrI,iBAAiB,cAAc,KAC/BqI,EAAIrG,MAAMmyB,UAAY,UAAU,GAClC,IAGNkjB,EAAYr3C,iBAAiB,SAAS,KAClCm3C,EAAen1C,MAAM4G,QAAU,IAC/BzG,YAAW,KACPg1C,EAAepsC,SACfgd,KACA,MAAM8D,EAAUzmB,EAAU0I,WAAa,EACvC1I,EAAU0I,WAAa+d,EACvBzmB,EAAU2I,aAAe,EACzBoT,GAAW,EAAE,GACd,IAAI,IAGXmjB,EAAQtkC,iBAAiB,SAAS,KAC9Bm3C,EAAen1C,MAAM4G,QAAU,IAC/BzG,YAAW,KACPg1C,EAAepsC,SACfgd,KACA1Z,EAAW,iBAAiB,GAC7B,IAAI,IAGX8oC,EAAe5zC,YAAY6zC,GAC3Br3C,SAASuD,KAAKC,YAAY4zC,GAG1Bh0C,uBAAsB,KAClBg0C,EAAen1C,MAAM4G,QAAU,GAAG,GAE1C,CAGA,SAASqd,KAGL,GAAI7M,EAAYk+B,wBAEZ,OAIJl+B,EAAYk+B,yBAA0B,EAGtC,IAAIC,GAAoBn+B,EAAYwL,kBACpCxL,EAAYwL,mBAAoB,EAGhC,MAAM4yB,EAAgBpyC,EAAUJ,MAChC,IAAIyyC,EAAcD,EAGdD,IACAE,EAAcD,EAEdpyC,EAAUJ,MAAQyyC,EAClBzlC,KAMJ,MAAMmU,EAAiBpmB,SAASS,cAAc,oBAC9C,GAAI2lB,EAAgB,CAGhB,MAAMuxB,EAAoB33C,SAASwB,cAAc,OACjDm2C,EAAkBl2C,UAAY,gCAC9Bk2C,EAAkB11C,MAAMuhB,QAAU,8UAYlC4C,EAAe7a,aAAaosC,EAAmBvxB,EAAewxB,WAClE,CA8FA,GA3FAx1C,YAAW,KACP,MAAMm/B,EAAUvhC,SAASS,cAAc,mBAEvC,GAAI8gC,EAAS,CAGT,MAAMsW,EAAqB73C,SAASwB,cAAc,OAClDq2C,EAAmBp2C,UAAY,sBAC/B8/B,EAAQ/9B,YAAYq0C,GAEpBtW,EAAQt/B,MAAMyb,UAAY,4BAG1Btb,YAAW,KAGP,MAAM4gB,EAAiBhjB,SAASS,cAAc,oBAE9C,GAAIuiB,GAAkBlhB,OAAOmoC,kBAAmB,CAE5CjnB,EAAenR,UAAY/P,OAAOmoC,kBAElC,MAAMvjB,EAAW1D,EAAeviB,cAAc,cACxCsiB,EAAYC,EAAeviB,cAAc,eAE3CsiB,IAEAC,EAAe/gB,MAAMmyB,UAAY,aACjCpR,EAAe/gB,MAAM2uC,WAAa,sBAGlC7tB,EAAU/c,YAAcyxC,EACxB10B,EAAU9gB,MAAMiE,MAAQ,QAGxB9D,YAAW,KAEP,MACM01C,EAAY,IADJ,GAEd,IAAIC,EAAc,EAElB,MAAMC,EAAe,KACjB,GAAID,GALM,GAKgB,CACtB,MAAMlyC,EAAWkyC,EANX,GAOAxyC,EAAeO,KAAKG,MAAMwxC,GAAiBC,EAAcD,GAAiB5xC,GAEhFkd,EAAU/c,YAAcT,EACxBwd,EAAU9gB,MAAMiE,MAAQ,cACxB6c,EAAU9gB,MAAM2qB,WAAa,uBAE7BmrB,IACA31C,WAAW41C,EAAcF,EAC7B,MAEI/0B,EAAU/c,YAAc0xC,EAGxBt1C,YAAW,KACP2gB,EAAU9gB,MAAMiE,MAAQ,QACxB6c,EAAU9gB,MAAM2qB,WAAa,OAC7B5J,EAAe/gB,MAAMmyB,UAAY,UAAU,GAC5C,IACP,EAIJ4jB,IAGItxB,IACAA,EAASrmB,UAAU8D,IAAI,cACvBuiB,EAASzkB,MAAMyb,UAAY,+BAC/B,GACD,KAEX,IACD,KAGHtb,YAAW,KAEP61C,IAA6B,GAC9B,IACP,MACI71C,YAAW,KACP61C,IAA6B,GAC9B,IACP,GACD,MAGEj4C,SAASI,eAAe,yBAA0B,CACnD,MAAM83C,EAAUl4C,SAASwB,cAAc,SACvC02C,EAAQnzC,GAAK,wBACbmzC,EAAQlyC,YAAc,+pBActBhG,SAAS0wB,KAAKltB,YAAY00C,EAC9B,CACJ,CAIA,SAASC,KACL,MAAMvQ,EAAeviC,EAAUJ,MACzBmzC,EAAWxQ,EAGjBviC,EAAUJ,MAAQmzC,EAGlBp4C,SAASgE,iBAAiB,eAAeC,SAAQwC,IAC7CmX,EAAmBnX,EAAImhC,EAAcwQ,EAAS,IAIlDp4C,SAASgE,iBAAiB,cAAcC,SAAQ4U,IAC5CA,EAAKxY,UAAU8D,IAAI,cACnB/B,YAAW,KACPyW,EAAKxY,UAAU2K,OAAO,aAAa,GACpC,KAAK,IAIZiH,GACJ,CAEA,SAASgmC,KAEL9oC,KAEA,MAAM3E,EAAQxK,SAASwB,cAAc,OACrCgJ,EAAM/I,UAAY,0BAClB+I,EAAMqH,UAAY,0qEAuDlB7R,SAASuD,KAAKC,YAAYgH,GAC1BpH,uBAAsB,IAAMoH,EAAMnK,UAAU8D,IAAI,SACpD,CAEA,SAASk0C,KAEP,MAAM7tC,EAAQxK,SAASS,cAAc,4BACrC0O,KAEI3E,IACFA,EAAMnK,UAAU2K,OAAO,QACvB5I,YAAW,KACToI,EAAMQ,SAEN,MAAMstC,EAAet4C,SAASS,cAAc,kCAExC63C,GAEFA,EAAar2C,MAAM8X,WAAa,mFAChCw+B,IAAgB,IAEhBA,KAGFvwB,KAGA,MAAM8D,EAAUzmB,EAAU0I,WAAa,EACjCkV,EAAa5e,YAAcA,YAAY8H,OAAS,eAGtD,GAAI9G,EAAUyI,cAAgB,GAAKge,EAAU,GAAoB,YAAf7I,EAMhD,OAJA3U,EAAW,uBACXlM,YAAW,KACTghB,IAAmB,GAClB,KAKL/d,EAAU0I,WAAa+d,EACvBzmB,EAAU2I,aAAe,EACzBmB,KAEA/M,YAAW,KAELk2C,GAAgBA,EAAaznB,YAC/BynB,EAAaznB,WAAWlT,YAAY26B,GAEtCl3B,GAAW,EAAE,GACZ,IAAI,GACN,KAEP,CAEA,SAASm3B,GAAgB53C,GAAI,GAI3B,MAAM+gC,EAAiB1hC,SAASS,cAAc,oBAC9C,GAAIihC,EAAgB,CAClB,MAAM77B,EAAW67B,EAAejhC,cAAc,aAC1CoF,IACFA,EAASxF,UAAU2K,OAAO,UAAW,eACrCnF,EAAS5D,MAAMwjB,OAAS,GACxB5f,EAAS5D,MAAMyb,UAAY,OAGtB7X,EAAS2yC,YACd3yC,EAAS5D,MAAMyb,UAAY,GAE/B,CAEA,MAAMG,EAAI7d,SAASI,eAAe,mBAClC,GAAIyd,EAAG,CACL,MAAMC,EAAID,EAAEpd,cAAc,kCAC1BE,GAAKmd,GAAKA,EAAE9S,SACZ6S,EAAEmsB,gBAAgB,SAClBrpC,GAAKmd,GAAKD,EAAEtS,aAAauS,EAAGD,EAAE+5B,YAC9Bj3C,IAAMkd,EAAE7Z,iBAAiB,kCAAkCC,SAAQtD,GAAKA,EAAEqK,WAC1E5I,YAAW,KACTyb,EAAE5b,MAAM8X,WAAa,kFAAkF,GACtG,IACL,CAEA,MAAM+D,EAAI9d,SAASI,eAAe,iBAClC0d,GAAKA,EAAEksB,gBAAgB,SAEvB,mBAAqBE,IAA0BA,KAE/C,MAAMnhC,EAAIpI,EAAI,kCAAoC,kEAClDX,SAASgE,iBAAiB+E,GAAG9E,SAAQtD,IACnCA,EAAEkwB,YAAclwB,EAAEkwB,WAAWlT,YAAYhd,EAAE,GAE/C,CAEA,SAAS83C,KAEP,MAAMjuC,EAAQxK,SAASS,cAAc,4BACrC0O,KAEI3E,IACFA,EAAMnK,UAAU2K,OAAO,QACvB5I,YAAW,KACToI,EAAMQ,SACNutC,KAEAvwB,KAGA,MAAM8D,EAAUzmB,EAAU0I,WAAa,EACjCkV,EAAa5e,YAAcA,YAAY8H,OAAS,eAGlD9G,EAAUyI,cAAgB,GAAKge,EAAU,GAAoB,YAAf7I,EAChDG,MAEA/d,EAAU0I,WAAa+d,EACvBzmB,EAAU2I,aAAe,GAG3BiE,IACA3D,EAAW,iBAAiB,GAC3B,KAEP,CAGA,SAASoqC,KACP,OAAOr0C,aAAqC,uBAAtBA,YAAY+G,KACpC,CAGA,SAASutC,KAEP,IAAKD,KAAe,OAGpB,MAAMp1B,EAAiBtjB,SAASI,eAAe,wBAC3CkjB,GAAgBA,EAAetY,SAGnC,MAAM2lB,EAAa3wB,SAASwB,cAAc,UAC1CmvB,EAAW5rB,GAAK,uBAChB4rB,EAAW9e,UAAY,yCACvB8e,EAAW1uB,MAAMuhB,QAAU,kSAgB3BmN,EAAW5oB,QAAU,WAEnB6wC,IACF,EAGA,MAAMxyB,EAAiBpmB,SAASI,eAAe,mBAC3CgmB,GACFA,EAAe5iB,YAAYmtB,EAE/B,CAGA,SAASioB,KAEP,IAAKF,KAAe,OAGpB,IAAKr/B,IAAgBA,EAAYnQ,QAAUmQ,EAAYnQ,MAAMkI,OAE3D,OAIF,MAAMynC,EAAY/yC,KAAKC,IAAI,GAAIsT,EAAYnQ,MAAMkI,OAASiI,EAAYE,cAItE,GAAIF,EAAY6H,YAOd,OAJA7H,EAAYE,aAAezT,KAAKmW,IAAI,EAAG5C,EAAYnQ,MAAMkI,OAAS,GAClEuwB,KACAxd,UACAnL,GAAiB,sCAAuC,WAK1DK,EAAYE,cAAgBs/B,EAGxBx/B,EAAYE,cAAgBF,EAAYnQ,MAAMkI,OAChDmW,MAKFnD,KACAC,KACArL,GAAiB,WAAW6/B,eAAwB,WACtD,CAGA,SAAS/4B,KAIP,MAAMwD,EAAiBtjB,SAASI,eAAe,qBAQ/C,GAPIkjB,GACFA,EAAetY,UAMZ3G,aAAsC,uBAAtBA,YAAY+G,QAAmC/G,YAAY+G,OAAOoD,SAAS,YAE9F,OAMF,MAAM1G,EAAS9H,SAASwB,cAAc,UACtCsG,EAAO/C,GAAK,oBACZ+C,EAAO9B,YAAc,mBACrB8B,EAAO7F,MAAMuhB,QAAU,+RAevB1b,EAAOC,QAAU,WAEf1C,EAAU2I,aAAe,GACzBoT,GAAW,GACb,EAEAphB,SAASuD,KAAKC,YAAYsE,GAI1B6wC,IACF,CA5yEA1H,KAGAjxC,SAASC,iBAAiB,oBAAoB,KAC1CgxC,IAAqB,IAoZzBjxC,SAASC,iBAAiB,oBAAoB,WAE1CD,SAASgE,iBAAiB,aAAaC,SAAQ2tB,IAC3CA,EAAM3xB,iBAAiB,QAAS2yC,GAAiB,IAIpC,IAAIthB,kBAAiBC,IAClCA,EAAUttB,SAAQutB,IACVA,EAASC,WAAWrgB,QACpBogB,EAASC,WAAWxtB,SAAQytB,IACxB,GAAsB,IAAlBA,EAAKC,SAAgB,CACND,EAAK1tB,iBAAiB,aAC9BC,SAAQ2tB,IACXA,EAAM3xB,iBAAiB,QAAS2yC,GAAiB,GAEzD,IAER,GACF,IAGG9gB,QAAQ9xB,SAASuD,KAAM,CAAEwuB,WAAW,EAAMC,SAAS,GAChE,IAgDAhyB,SAASC,iBAAiB,oBAAoB,KAE1C6yC,GAAmB,wBAGnBE,KAGAC,IAA8B,IAyZlCjzC,SAASC,iBAAiB,oBAAoB,WAE1Cg0C,IACJ,IA46CAiD,KAKC,MAAMxjC,GAAqB,CAC1B1B,MAAO,GACPD,YAAa,KAKb,gBAAMjO,GACJ,IACMO,kBACI/C,KAAKqS,mBAEXrS,KAAKsS,uBAGFtS,KAAK0Q,OAA+B,IAAtB1Q,KAAK0Q,MAAMZ,SAE5B9P,KAAK0Q,MAAQ,GAEjB,CAAE,MAAOtN,GAEPpD,KAAK0Q,MAAQ,EACf,CACF,EAKA,sBAAM2B,GACJ,IACE,MAAMlP,KAAEA,EAAIC,MAAEA,SAAgBC,EAC3BC,KAAK,gBACLC,OAAO,KACPgP,GAAG,cAAcxP,YAAYU,sBAAsBV,YAAYU,OAElE,GAAIL,EAAO,MAAMA,EAEjBpD,KAAK0Q,MAAQvN,EAAK2N,KAAIoC,IAAQ,CAC5BzP,GAAIyP,EAAKzP,GACT+N,KAAM0B,EAAK1B,KACX5J,MAAOsL,EAAKtL,OAAS,GACrB6K,aAAcS,EAAKT,cAAgB,GACnCC,SAAUQ,EAAKP,UACfC,SAAUM,EAAKL,UACftE,OAAQ2E,EAAK9H,QACb0H,UAAWI,EAAKH,cAEpB,CAAE,MAAO3P,GAEPpD,KAAK0Q,MAAQ,EACf,CACF,EAKA,oBAAA4B,GACE,IACE,MAAMklC,EAAcv0C,aAAaC,QAAQ,sBACzClD,KAAK0Q,MAAQ8mC,EAAczpC,KAAKC,MAAMwpC,GAAe,EAEvD,CAAE,MAAOp0C,GAEPpD,KAAK0Q,MAAQ,EACf,CACF,EAOA,UAAMuC,CAAKC,GACT,OAAKA,EAEEnQ,kBACC/C,KAAKmT,eAAeD,GAC1BlT,KAAKoT,mBAAmBF,GAJR,IAKpB,EAOA,oBAAMC,CAAeD,GACnB,IACE,MAAMG,EAAW,CACf7B,KAAM0B,EAAK1B,KACX5J,MAAOsL,EAAKtL,OAAS,GACrB6K,aAAcS,EAAKT,cAAgB,GACnCrH,QAASrI,YAAYU,IAIvB,GAAIyP,EAAKzP,IAAyB,iBAAZyP,EAAKzP,IAAsC,KAAnByP,EAAKzP,GAAGqM,OAAe,CACnE,MAAM3M,KAAEA,EAAIC,MAAEA,SAAgBC,EAC3BC,KAAK,gBACLuB,OAAOwO,GACP7P,GAAG,KAAM0P,EAAKzP,IACdF,SACAG,SAEH,GAAIN,EAAO,MAAMA,EACjB,OAAOD,CACT,CAEK,CACH,MAAMA,KAAEA,EAAIC,MAAEA,SAAgBC,EAC3BC,KAAK,gBACLwI,OAAOuH,GACP9P,SACAG,SAEH,GAAIN,EAAO,MAAMA,EAGjB,MAAMkQ,EAAQtT,KAAK0Q,MAAM6C,WAAUf,GACjCA,EAAK/O,KAAOyP,EAAKzP,IAAO+O,EAAKiB,QAAUjB,EAAKiB,SAAWP,EAAKO,SAiB9D,OAde,IAAXH,EACFtT,KAAK0Q,MAAM4C,GAAS,IACfnQ,EACHyE,MAAOzE,EAAKyE,OAAS,GACrB6K,aAActP,EAAKsP,cAAgB,IAGrCzS,KAAK0Q,MAAMtQ,KAAK,IACX+C,EACHyE,MAAOzE,EAAKyE,OAAS,GACrB6K,aAActP,EAAKsP,cAAgB,KAIhCtP,CACT,CACF,CAAE,MAAOC,GAEP,OAAO,IACT,CACF,EAOA,kBAAAgQ,CAAmBF,GACjB,IACE,MAAMQ,EAAU,IACXR,EACHzP,GAAIyP,EAAKzP,IAAM+L,KAAKrL,MACpBsP,OAAQP,EAAKO,QAAUjE,KAAKrL,OAGxBmP,EAAQtT,KAAK0Q,MAAM6C,WAAUf,GACjCA,EAAK/O,KAAOyP,EAAKzP,IAAO+O,EAAKiB,QAAUjB,EAAKiB,SAAWP,EAAKO,SAU9D,OAPe,IAAXH,EACFtT,KAAK0Q,MAAM4C,GAASI,EAEpB1T,KAAK0Q,MAAMtQ,KAAKsT,GAGlBzQ,aAAa6B,QAAQ,qBAAsBiJ,KAAKE,UAAUjO,KAAK0Q,QACxDgD,CACT,CAAE,MAAOtQ,GAEP,OAAO,IACT,CACF,EAOA,YAAM,CAAOK,GACX,IAAKV,YAIH,OAFA/C,KAAK0Q,MAAQ1Q,KAAK0Q,MAAMkD,QAAOV,GAAQA,EAAKzP,KAAOA,IACnDR,aAAa6B,QAAQ,qBAAsBiJ,KAAKE,UAAUjO,KAAK0Q,SACxD,EAGT,IAEE,GAAkB,iBAAPjN,GAAiC,KAAdA,EAAGqM,OAAe,CAC9C,MAAM1M,MAAEA,SAAgBC,EACrBC,KAAK,gBACLuQ,SACArQ,GAAG,KAAMC,GAEZ,GAAIL,EAAO,MAAMA,CACnB,CAGA,OADApD,KAAK0Q,MAAQ1Q,KAAK0Q,MAAMkD,QAAOV,GAAQA,EAAKzP,KAAOA,KAC5C,CACT,CAAE,MAAOL,GAEP,OAAO,CACT,CACF,EAQA,WAAM0Q,CAAMH,EAAQ8jC,GAClB,IAAK10C,YAAa,OAAO,EAEzB,IACE,MAAM20C,EAAY18B,OAAOrH,GACnBT,EAAOlT,KAAK0Q,MAAMsD,MAAKd,GAAQ8H,OAAO9H,EAAKzP,MAAQi0C,IAEzD,IAAKxkC,EAEH,OAAO,EAKT,MAAM/P,KAAEA,EAAIC,MAAEA,SAAgBC,EAAe4Q,IAC3C,qBACA,CACEC,UAAWujC,EACXtjC,OAAQ,GAAGjB,EAAK1B,mBAAmBzO,YAAY8G,eAAeD,UAAY,UAC1EwK,QAASlB,EAAKtL,OAAS,GACvByM,eAAgBnB,EAAKT,cAAgB,GACrC6B,aAAa,EACbC,WAAY/E,KAAKrL,MACjBqQ,cAAe,CAACijC,GAChBhjC,YAAa1R,YAAYU,KAI7B,OAAIL,CAON,CAAE,MAAOA,GAEP,OAAO,CACT,CACF,EAMA,aAAAsR,GACE,IAAK3R,YACH,MAAO,CACL4R,SAAU,EACVC,SAAU,GACVC,SAAU,EACVC,UAAU,EACVC,YAAa,KAIjB,OAAQhS,YAAY8H,QAAU,QAC5B,IAAK,UACH,MAAO,CACL8J,SAAU,GACVC,SAAU,GACVC,SAAUG,IACVF,UAAU,EACVC,YAAa,KAEjB,IAAK,UACH,MAAO,CACLJ,SAAU,GACVC,SAAU,GACVC,SAAUG,IACVF,UAAU,EACVC,YAAa,KAEjB,IAAK,OACH,MAAO,CACLJ,SAAU,EACVC,SAAU,GACVC,SAAU,GACVC,UAAU,EACVC,YAAa,MAEjB,QACE,MAAO,CACLJ,SAAU,EACVC,SAAU,GACVC,SAAU,EACVC,UAAU,EACVC,YAAa,KAGrB,EAMA,kBAAAE,GACE,MAAMC,EAASlV,KAAK0U,gBACpB,OAAO1U,KAAK0Q,MAAMZ,OAASoF,EAAOP,QACpC,EAOAgjC,wBAA0BzkC,GACnBA,GAASA,EAAKtL,OAAUsL,EAAKT,aAI9BS,EAAKtL,MAAMkI,OAAS,EACf,CAAE8nC,OAAO,EAAO3qC,QAAS,2CAG3B,CAAE2qC,OAAO,GAPP,CAAEA,OAAO,EAAO3qC,QAAS,wBAchCyhC,GAAkB,CACtB9oB,kBAAkB,EAClBnV,YAAa,KACb/D,aAAc,EACdmrC,UAAW,KACXjwC,MAAO,GACP6K,aAAc,GACdwK,eAAgB,EAChBmgB,cAAe,EACf7jB,YAAa,EACby1B,WAAY,EACZliC,gBAAiB,IAAIpN,IAKrB,KAAAszB,GACEhzB,KAAK4lB,kBAAmB,EACxB5lB,KAAKyQ,YAAc,KACnBzQ,KAAK0M,aAAe,EACpB1M,KAAK63C,UAAY,KACjB73C,KAAK4H,MAAQ,GACb5H,KAAKyS,aAAe,GACpBzS,KAAKid,eAAiB,EACtBjd,KAAKo9B,cAAgB,EACrBp9B,KAAKuZ,YAAc,EACnBvZ,KAAKgvC,WAAa,EAClBhvC,KAAK8M,gBAAkB,IAAIpN,GAC7B,EAOA,kBAAAo4C,CAAmB5kC,GACjB,SAAKA,GAASA,EAAKtL,OAAUsL,EAAKT,gBAKlCzS,KAAKgzB,QACLhzB,KAAK4lB,kBAAmB,EACxB5lB,KAAKyQ,YAAcyC,EACnBlT,KAAK4H,MAAQ,IAAIsL,EAAKtL,OACtB5H,KAAKyS,aAAe,IAAIS,EAAKT,cAC7BzS,KAAKgvC,WAAajrC,EAAUJ,MAC5B3D,KAAK0M,aAAe,GACb,EACT,EAOA,gBAAAoiC,CAAiBvjC,GACf,IAAKvL,KAAK4H,MAAMkI,OAAQ,OAAO,KAG/B,MAAMioC,EAAY/3C,KAAK4H,MAAMkI,QAAU,GAAK,EAC1B9P,KAAK4H,MAAMkI,QAAU,EAAI,EAAI,EAE/C,GAAIvE,EAAQwsC,EAAW,OAAO,KAG9B,MAAM70B,EAAc,CAClB,EAAG,CAAE4gB,MAAO,EAAGp+B,MAAOlB,KAAKC,IAAI,EAAGzE,KAAK4H,MAAMkI,QAASkoC,QAAQ,GAC9D,EAAG,CAAElU,MAAO,EAAGp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,IAAKkoC,QAAQ,GAC/E,EAAG,CAAElU,MAAO,EAAGp+B,MAAOlB,KAAKC,IAAI,EAAGzE,KAAK4H,MAAMkI,QAASkoC,QAAQ,GAC9D,EAAG,CAAElU,MAAO,EAAGp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,IAAKkoC,QAAQ,GAC/E,EAAG,CAAElU,MAAO,EAAGp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,IAAKkoC,QAAQ,GAC/E,EAAG,CAAElU,MAAO,EAAGp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,IAAKkoC,QAAQ,GAC/E,EAAG,CAAElU,MAAO,GAAIp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,KAAMkoC,QAAQ,GACjF,EAAG,CAAElU,MAAO,GAAIp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,KAAMkoC,QAAQ,GACjF,EAAG,CAAElU,MAAO,GAAIp+B,MAAOlB,KAAKC,IAAI,EAAGD,KAAKmW,IAAI,EAAG3a,KAAK4H,MAAMkI,OAAS,KAAMkoC,QAAQ,IAG7Et/B,EAASwK,EAAY3X,IAAU2X,EAAY,GAGjD,OAAIxK,EAAOhT,OAAS,EACX1F,KAAK8uC,iBAAiBvjC,EAAQ,IAGvCvL,KAAK63C,UAAY,CACfjwC,MAAO5H,KAAK4H,MAAM0O,MAAMoC,EAAOorB,MAAOprB,EAAOorB,MAAQprB,EAAOhT,OAC5D+M,aAAczS,KAAKyS,aAAa6D,MAAMoC,EAAOorB,MAAOprB,EAAOorB,MAAQprB,EAAOhT,OAC1EsyC,OAAQt/B,EAAOs/B,OACfC,QAAS1sC,IAAUwsC,GAGd/3C,KAAK63C,UACd,GAMF,SAASK,KACP,MAAMC,EAAaz5C,SAASI,eAAe,qBACrCs5C,EAAa15C,SAASI,eAAe,uBACrCwR,EAAW5R,SAASI,eAAe,yBACnCoW,EAAS9C,GAAmBsC,gBAE5B2jC,EAAYF,EAAWtyC,MAAMwrB,OACnC,IAAKgnB,EAEH,YADA3gC,GAAiB,kCAAmC,SAKtD,IAAI9P,EAAQywC,EAAUnrC,SAAS,KAC7BmrC,EAAUtuC,MAAM,KAAK+G,KAAI+a,GAAQA,EAAKwF,SACtCgnB,EAAUtuC,MAAM,OAAO6J,QAAOiY,GAAQA,EAAK/b,OAAS,IAGtDlI,EAAQA,EAAMkJ,KAAI+a,GAAQA,EAAK3e,SAAS,KAAO,CAAC2e,GAAQA,EAAK9hB,MAAM,SAAQuuC,OAG3E,MAAM1jC,EAAW7R,YAAcmS,EAAON,SAAW,GAC7ChN,EAAMkI,OAAS8E,IACjB8C,GAAiB,WAAW9C,mBAA2B,SACvDhN,EAAQA,EAAM0O,MAAM,EAAG1B,IAIzBtE,EAASC,UAAY,GACrB6nC,EAAWz3C,MAAMiC,QAAU,QAG3BgF,EAAMjF,SAAQkpB,IACZ,MAAM0sB,EAAWC,GAAe3sB,EAAM4sB,GAAgB5sB,IACtDvb,EAASpO,YAAYq2C,GACrBG,GAAsBH,EAAS,IAGjCI,IACF,CAOA,SAASF,GAAgB5sB,GAEvB,IAAK,MAAMzc,KAAUmT,eAAgB,CACnC,MAAMjP,EAAQiP,eAAenT,GAAQxH,MAAMyhC,QAAQxd,EAAK+sB,eACxD,IAAe,IAAXtlC,EACF,OAAOiP,eAAenT,GAAQqD,aAAaa,EAE/C,CACA,MAAO,EACT,CAEA,SAASklC,GAAe3sB,EAAMkR,GAC5B,MAAMvqB,EAAO9T,SAASwB,cAAc,OACpCsS,EAAKrS,UAAY,wBACjBqS,EAAKqmC,WAAY,EACjBrmC,EAAKjC,UAAY,iJAIoCsb,+DACHkR,wLAMlD,MAAM+b,EAAYtmC,EAAKrT,cAAc,oBASrC,OARI25C,IAEFA,EAAUn4C,MAAMib,SAAW,WAC3Bk9B,EAAUn4C,MAAMo4C,MAAQ,OACxBD,EAAUn4C,MAAME,IAAM,MACtBi4C,EAAUn4C,MAAMmyB,UAAY,oBAGvBtgB,CACT,CAEA,SAASwmC,KACP,MAAM1oC,EAAW5R,SAASI,eAAe,yBACzC,IAAKwR,EAAU,OAEf,MAAMioC,EAAW75C,SAASwB,cAAc,OACxCq4C,EAASp4C,UAAY,wBACrBo4C,EAASM,WAAY,EACrBN,EAAShoC,UAAY,qTASrB,MAAM0oC,EAAU3oC,EAASpO,YAAYq2C,GACrCG,GAAsBO,GAEW,IAA7B3oC,EAASwkB,SAAShlB,QACpB6oC,KAIFM,EAAQ95C,cAAc,gBAAgBwK,OACxC,CAEA,SAASuvC,GAAW1yC,GAChB,IAAKA,EAAQ,OAEb,MAAM+xC,EAAW/xC,EAAOiD,QAAQ,0BAC5B8uC,GACAA,EAAS7uC,QAEjB,CAOA,SAASgvC,GAAsBj7B,GAC7B,IAAKA,EAAS,OAGd,MAAM07B,EAAQ17B,EAAQyvB,WAAU,GAC5BzvB,EAAQ8R,YACV9R,EAAQ8R,WAAW6pB,aAAaD,EAAO17B,IAIzCA,EAAU07B,GAEFtJ,aAAa,YAAa,QAElCpyB,EAAQ9e,iBAAiB,aAAcC,IACrCA,EAAM2xB,kBACN9S,EAAQ1e,UAAU8D,IAAI,YACtBjE,EAAMy6C,aAAaC,QAAQ,aAAc,GAAG,IAG9C77B,EAAQ9e,iBAAiB,WAAYC,IACnCA,EAAM2xB,kBACN9S,EAAQ1e,UAAU2K,OAAO,WAAW,IAItC,MAAMovC,EAAYr7B,EAAQte,cAAc,oBAKxC,OAJI25C,IACFA,EAAUryC,QAAU,IAAMyyC,GAAWJ,IAGhCr7B,CACT,CAKA,SAASk7B,KACP,MAAMroC,EAAW5R,SAASI,eAAe,yBACpCwR,IAELA,EAAS3R,iBAAiB,YAAaC,IACrCA,EAAM2sB,iBACN,MAAMguB,EAAkBjpC,EAASnR,cAAc,aAC/C,IAAKo6C,EAAiB,OAEtB,MAAMC,EAAeC,GAAoBnpC,EAAU1R,EAAM86C,SACrDF,EACFlpC,EAASrG,aAAasvC,EAAiBC,GAEvClpC,EAASpO,YAAYq3C,EACvB,IAIFjpC,EAAS5N,iBAAiB,0BAA0BC,SAAQ6P,GAC1DkmC,GAAsBlmC,KAE1B,CAQA,SAASinC,GAAoB/9B,EAAWnb,GACtC,IAAKmb,EAAW,OAAO,KAEvB,MAAMi+B,EAAoB,IAAIj+B,EAAUhZ,iBAAiB,0CAEzD,OAAKi3C,EAAkB7pC,OAEhB6pC,EAAkBC,QAAO,CAACnwC,EAASowC,KACxC,MAAMC,EAAMD,EAAM18B,wBACZ48B,EAASx5C,EAAIu5C,EAAIj5C,IAAMi5C,EAAI99B,OAAS,EAE1C,OAAI+9B,EAAS,GAAKA,EAAStwC,EAAQswC,OAC1B,CAAEA,OAAQA,EAAQt8B,QAASo8B,GAE3BpwC,CACT,GACC,CAAEswC,OAAQt0B,OAAOu0B,oBAAqBv8B,QAXH,IAYxC,CAKA,SAASw8B,KACP,MAAM3pC,EAAW5R,SAASI,eAAe,yBACpCwR,GAELA,EAAS3R,iBAAiB,WAAYC,IACpC,MAAM25C,EAAW75C,SAASw7C,cAAczwC,QAAQ,0BAChD,IAAK8uC,EAAU,OAEf,IAAI4B,EAEJ,OAAQv7C,EAAMmzB,KACZ,IAAK,UACHnzB,EAAM2sB,iBACN4uB,EAAc5B,EAAS6B,wBAAwBj7C,cAAc,gBAC7D,MACF,IAAK,YACHP,EAAM2sB,iBACN4uB,EAAc5B,EAAS8B,oBAAoBl7C,cAAc,gBACzD,MACF,IAAK,aACHP,EAAM2sB,iBACN4uB,EAAc5B,EAASp5C,cAAc,gBACrC,MACF,IAAK,YACHP,EAAM2sB,iBACN4uB,EAAc5B,EAASp5C,cAAc,gBAIrCg7C,GAAaA,EAAYxwC,OAAO,GAExC,CAKAxC,eAAemzC,KACb,MAAMC,EAAY77C,SAASI,eAAe,oBACpCwR,EAAW5R,SAASI,eAAe,yBAGnC0S,EAAO+oC,EAAU10C,MAAMwrB,SACfjf,GAAmB3B,YACnB2B,GAAmB3B,YAAYe,KAC/B,QAAQY,GAAmB1B,MAAMZ,OAAS,KAGlDlI,EAAQ,GACR6K,EAAe,GAErBnC,EAAS5N,iBAAiB,0BAA0BC,SAAQ6P,IAC1D,MAAMqZ,EAAOrZ,EAAKrT,cAAc,gBAAgBuF,YAAY2sB,OACtD0L,EAAcvqB,EAAKrT,cAAc,gBAAgB0G,MAAMwrB,OAEzDxF,GAAQkR,IACVn1B,EAAMxH,KAAKyrB,GACXpZ,EAAarS,KAAK28B,GACpB,IAIF,MAAM7nB,EAAS9C,GAAmBsC,gBAClC,GAAI9M,EAAMkI,OAASoF,EAAON,SAExB,YADA8C,GAAiB,wCAAwCxC,EAAON,iBAAkB,SAKpF,IAAI4lC,EACJ,MAAMC,EAA+C,OAAnCroC,GAAmB3B,YAErC,IAAKgqC,IAAcroC,GAAmB6C,qBAEpC,YADAyC,GAAiB,8BAA+B,SAKhD8iC,EADEC,EACW,IACRroC,GAAmB3B,YACtBe,KAAMA,EACN5J,MAAOA,EACP6K,aAAcA,GAGH,CACXgB,OAAQjE,KAAKrL,MACbqN,KAAMA,EACN5J,MAAOA,EACP6K,aAAcA,SAKML,GAAmBa,KAAKunC,IAI9CD,EAAU10C,MAAQ,GAClByK,EAASC,UAAY,GACrB7R,SAASI,eAAe,uBAAuB6B,MAAMiC,QAAU,OAC/DwP,GAAmB3B,YAAc,KAG7B1N,kBACIqP,GAAmBC,mBAEzBD,GAAmBE,uBAGrBoF,GAAiB,0BAA2B,WAC5C1K,EAAW,0BACX0tC,MAEAhjC,GAAiB,sBAAuB,QAE5C,CAEA,SAASijC,GAAehnC,GACpB,MAAMT,EAAOd,GAAmB1B,MAAMsD,MAAKd,GAAQA,EAAKzP,KAAOkQ,IAC/D,IAAKT,EAAM,OAAOwE,GAAiB,iBAAkB,SAGrD1K,EAAW,0BAGX,MAAMutC,EAAY77C,SAASI,eAAe,oBACtCy7C,IACAA,EAAU10C,MAAQqN,EAAK1B,MAAQ,IAInC,MAAMnB,EAAqB3R,SAASI,eAAe,uBAC7C87C,EAAsBl8C,SAASI,eAAe,yBAEhD87C,IACAA,EAAoBrqC,UAAY,GAG5BrB,MAAMC,QAAQ+D,EAAKtL,QACnBsL,EAAKtL,MAAMjF,SAAQ,CAACkpB,EAAMvY,KACtB,MAAMypB,EAAc7pB,EAAKT,cAAgBa,EAAQJ,EAAKT,aAAa3C,OAC7DoD,EAAKT,aAAaa,GAClB,GAEAilC,EAAW75C,SAASwB,cAAc,OACxCq4C,EAASp4C,UAAY,wBACrBo4C,EAASM,WAAY,EACrBN,EAAShoC,UAAY,mNAIkCsb,+EACHkR,wPAMpD6d,EAAoB14C,YAAYq2C,GAChCG,GAAsBH,EAAS,IAKvCI,KAGItoC,IACAA,EAAmB1P,MAAMiC,QAAU,UAK3CwP,GAAmB3B,YAAcyC,CACrC,CAEA/L,eAAeslB,GAAiBhpB,SACR2O,GAAmByB,OAAOpQ,IAG9CiU,GAAiB,4BAA6B,WAC9CgjC,MAEAhjC,GAAiB,wBAAyB,QAE9C,CAMA,SAASiW,GAAelqB,GAItB,MAAMmqB,EAAgBlvB,SAASS,cAAc,gBACvC0uB,EAAmBnvB,SAASS,cAAc,mBAC5CyuB,GAAeA,EAAclkB,SAC7BmkB,GAAkBA,EAAiBnkB,SAGvC,MAAM+jB,EAAW/uB,SAASwB,cAAc,OACxCutB,EAASttB,UAAY,iBACrBstB,EAAShnB,QAAU4mB,EACnB3uB,SAASuD,KAAKC,YAAYurB,GAG1B,MAAMvkB,EAAQxK,SAASwB,cAAc,OACrCgJ,EAAM/I,UAAY,cAClB+I,EAAMqH,UAAY,yMAKlB7R,SAASuD,KAAKC,YAAYgH,GAG5B,MAAM4kB,EAAY5kB,EAAM/J,cAAc,eAkDrC,SAASkuB,IACR,MAAMnkB,EAAQxK,SAASS,cAAc,gBAC/BsuB,EAAW/uB,SAASS,cAAc,mBAEpC+J,GAAOA,EAAMQ,SACb+jB,GAAUA,EAAS/jB,QACzB,CAtDArG,EACGC,KAAK,iBACLC,OAAO,gBACPwqB,IAAI,KAAMhrB,YAAYU,IACtB4B,MAAK,EAAGlC,OAAMC,YACTA,EAEF0qB,EAAUvd,UAAY,gEAIpBpN,GAAQA,EAAK2M,OAAS,GACxBge,EAAUvd,UAAYpN,EAAK2N,KAAIlG,GAAQ,sDAE3BA,EAAKhB,UAAY,+GACoDgB,EAAKnH,0GAInF4Z,KAAK,IAGRnU,EAAMxG,iBAAiB,wBAAwBC,SAAQ6D,IACrDA,EAAOC,QAAUU,UACf,MAAMoH,EAAS/H,EAAOwnB,aAAa,gBACnCxnB,EAAO8R,UAAW,EAElB,MAAMuiC,EAAer0C,EAAO+J,UAC5B/J,EAAO+J,UAAY,0DAEG6B,GAAmB0B,MAAMrQ,EAAI8K,IAKjDmJ,GAAiB,4BAA6B,WAC9C2V,MAJA7mB,EAAO8R,UAAW,EAClB9R,EAAO+J,UAAYsqC,EAIrB,CACD,KAGH/sB,EAAUvd,UAAY,wEACxB,GAuxBJ,CAKC,SAASuqC,KAER9tC,EAAW,0BAGXxF,QAAQuzC,QAAQ3oC,GAAmB5P,cAAc6C,MAAK,KACpDq1C,IAAoB,IACnBvoC,OAAM/O,IAEPsU,GAAiB,8BAA+B,QAAQ,GAE5D,CAEA,SAASgjC,KACL,MAAMh/B,EAAYhd,SAASI,eAAe,0BAC1C,IAAK4c,EAAW,OAEhB,MAAMxG,EAAS9C,GAAmBsC,gBAC5BiN,EAAa5e,aAAa8H,QAAU,eAE1C6Q,EAAUnL,UAAY,GAElB6B,GAAmB1B,OAASxB,MAAMC,QAAQiD,GAAmB1B,QAA8C,IAApC0B,GAAmB1B,MAAMZ,OAChGsC,GAAmB1B,MAAM/N,SAAQuQ,IAC7B,IAAKA,IAASA,EAAKzP,GAAI,OAEvB,MAAM6B,EAAY4N,EAAKtL,OAAOkI,QAAU,EAClCkrC,EAAqB11C,GAAa,EAGlC21C,EAAoC,YAAft5B,EACvB,GACA,oCAAoCzM,EAAOH,qCAEzCmmC,EAAWx8C,SAASwB,cAAc,OACxCg7C,EAAS/6C,UAAY,+BAAiC+S,EAAKR,SAAW,cAAgB,IACtFwoC,EAASh+B,QAAQvJ,OAAST,EAAKzP,GAE/By3C,EAAS3qC,UAAY,iHAEiCyqC,EAAqB,GAAK,wCAClEA,EAAqB,WAAa,QAAQ,EAAI11C,0NAInC,YAAfqc,EAA2B,mMAIzB,kGAGEzO,EAAK1B,MAAQ,wHAEWwpC,EAAqB,GAAK,mBAAmB11C,2CACrE01C,EAAqB,GAAK,mFAC1BC,sDACwB/rC,MAAMC,QAAQ+D,EAAKtL,OAASsL,EAAKtL,MAAM0O,MAAM,EAAG,GAAG+G,KAAK,MAAQ,KAAKnK,EAAKtL,OAASsL,EAAKtL,MAAMkI,OAAS,EAAI,MAAQ,2EAKzJ4L,EAAUxZ,YAAYg5C,GAEtB,MAAMC,EAAiBD,EAAS/7C,cAAc,oBAC1Cg8C,IACIH,EACAG,EAAe10C,QAAU,WACrB20C,GAAwBloC,EAAKzP,GACjC,GAEA03C,EAAex6C,MAAM4G,QAAU,MAC/B4zC,EAAex6C,MAAMglC,OAAS,gBAItC,MAAM0V,EAAaH,EAAS/7C,cAAc,gBACtCk8C,IACAA,EAAW50C,QAAU,WACjBk0C,GAAeznC,EAAKzP,GACxB,GAGJ,MAAM63C,EAAeJ,EAAS/7C,cAAc,kBACxCm8C,IACAA,EAAa70C,QAAU,WACnBgmB,GAAiBvZ,EAAKzP,GAC1B,GAGJ,MAAM83C,EAAcL,EAAS/7C,cAAc,iBACvCo8C,IACAA,EAAY90C,QAAU,WAClBknB,GAAeza,EAAKzP,GACxB,GAGJ,MAAM+3C,EAAaN,EAAS/7C,cAAc,gBACtCq8C,IACAA,EAAW/0C,QAAU,WACjBg1C,GAAmBvoC,EAAKzP,GAC5B,EACJ,IAGJiY,EAAUnL,UAAY,uGAE9B,CAGA,SAASkrC,GAAmBh4C,GAC1B,MAAMy3C,EAAWx8C,SAASS,cAAc,mCAAmCsE,OACvEy3C,GACFA,EAASn8C,UAAU8Z,OAAO,YAE9B,CAMC,SAASuiC,GAAwB33C,GAEhC,MAAMyP,EAAOd,GAAmB1B,MAAMsD,MAAKd,GAAQA,EAAKzP,KAAOA,IAC/D,IAAKyP,EAEH,YADAwE,GAAiB,iBAAkB,SAKrC,MAAMgkC,EAAatpC,GAAmBulC,wBAAwBzkC,GAC9D,IAAKwoC,EAAW9D,MAEd,YADAlgC,GAAiBgkC,EAAWzuC,QAAS,SAKvC,MAAMiI,EAAS9C,GAAmBsC,gBAClC,GAAIQ,EAAOL,WAAaG,IAAU,CAChC,MAAM2mC,EAAe,aAAal4C,IAClC,IAAIm4C,EAAY54C,SAASC,aAAaC,QAAQy4C,IAAiB,KAG/D,GAFAC,IAEIA,EAAY1mC,EAAOL,SAErB,YADA6C,GAAiB,iDAAkD,SAIrEzU,aAAa6B,QAAQ62C,EAAcC,EACrC,CAGIlN,GAAgBoJ,mBAAmB5kC,GAErCyV,GAAiB,GAEjBjR,GAAiB,gCAAiC,QAEtD,CAMA,SAASiR,GAAiBpd,GAExB,MAAMiW,EAAoB9iB,SAASS,cAAc,uBAC7CqiB,IACFA,EAAkB7gB,MAAMiC,QAAU,QAIF,mBAAvBy0C,IACTA,KAIF,MAAMQ,EAAYnJ,GAAgBI,iBAAiBvjC,GACnD,IAAKssC,IAAcA,EAAUjwC,MAAMkI,OAGjC,OAFA4H,GAAiB,sBAAuB,gBACxC1K,EAAW,0BAKb0hC,GAAgBhiC,aAAenB,EAG/BwM,EAAc,CACZnQ,MAAOiwC,EAAUjwC,MACjB6K,aAAcolC,EAAUplC,aACxBwF,aAAc,EACdc,eAAgB,EAChBC,cAAc,EACdhB,oBAAmB6/B,EAAUG,QAASxzC,KAAK6T,SAAW,GACtDY,MAAO4+B,EAAUG,OACjB9+B,gBAAgB,EAChB0M,kBAAkB,EAClB8oB,iBAAiB,EACjBlsB,cAAeze,EAAUJ,MACzB8e,cAAe,IAAK1e,EAAUyH,OAC9B4N,UAAW,EACXkB,qBAAsB,KACtBjB,aAAa,EACbF,eAAgB3J,KAAKrL,MACrBmV,kBAAmB,EACnBC,YAAa,EACbC,aAAc,EACdqiC,WAAYnN,GAAgBj+B,YAC5Bw+B,YAAa1jC,EACbuwC,aAAcjE,EAAUI,SAI1Bv1B,GAAenX,GAAO,KACpByB,EAAW,mBACX8V,KACAC,KACA5I,EAAW,GAAKpC,EAAYnQ,MAAMkI,OAAO,GAE7C,CAMA3I,eAAeuB,KACb,UAIQ0J,GAAmB5P,aAGzB,MAAMu5C,EAAuBr9C,SAASI,eAAe,0BASrD,OARIi9C,GACwC,UAAvCA,EAAqBp7C,MAAMiC,SACsB,2BAAjDlE,SAASS,cAAc,mBAAmBsE,IAE7Ci3C,KAIKtoC,GAAmB1B,KAC5B,CAAE,MAAOtN,GAGP,OADAsU,GAAiB,8BAA+B,QAAS,KAClD,EACT,CACF,CAQCvQ,eAAe60C,GAAgBroC,EAAQ8jC,GAGtC,IAAK10C,aAAaU,GAEhB,OADAiU,GAAiB,uCAAwC,UAClD,EAGT,IAEE,IAAIxE,EAAOd,GAAmB1B,MAAMsD,MAAKR,GAAKwH,OAAOxH,EAAE/P,MAAQuX,OAAOrH,KAGtE,IAAKT,EAAM,CACT,MAAM/P,KAAEA,EAAIC,MAAEA,SAAgBC,EAC3BC,KAAK,gBACLC,OAAO,KACPC,GAAG,KAAMmQ,GACTjQ,SAEH,GAAIN,IAAUD,EAEZ,OAAO,EAGT+P,EAAO/P,CACT,CAKA,MAAM84C,EAAcl5C,YAAY8G,eAAe2H,MAC5BzO,YAAY8G,eAAeD,UAC3B7G,YAAY+G,OACZ,OACboyC,EAAiB,GAAGhpC,EAAK1B,mBAAmByqC,KAG5Cr0C,EAAQsH,MAAMC,QAAQ+D,EAAKtL,OAASsL,EAAKtL,MAAQ,GACjD6K,EAAevD,MAAMC,QAAQ+D,EAAKT,cAAgBS,EAAKT,aAAe,IAGtErP,MAAEA,SAAgBC,EACrBC,KAAK,gBACLwI,OAAO,CACN0F,KAAM0qC,EACNt0C,MAAOA,EACP6K,aAAcA,EACdrH,QAASqsC,EACT9kC,WAAW,EACXE,UAAW9P,YAAYU,KAG3B,OAAIL,IAMJsU,GAAiB,4BAA6B,YACvC,EACT,CAAE,MAAOtU,GAGP,OADAsU,GAAiB,uBAAwB,UAClC,CACT,CACF,CAMA,SAASiW,GAAeha,GAItB,MAAMia,EAAgBlvB,SAASS,cAAc,0BACzCyuB,GAAeA,EAAclkB,SAGjC,MAAMyyC,EAAiBz9C,SAASwB,cAAc,OAC9Ci8C,EAAeh8C,UAAY,wBAC3Bg8C,EAAex7C,MAAMib,SAAW,QAChCugC,EAAex7C,MAAME,IAAM,IAC3Bs7C,EAAex7C,MAAMC,KAAO,IAC5Bu7C,EAAex7C,MAAMob,MAAQ,OAC7BogC,EAAex7C,MAAMqb,OAAS,OAC9BmgC,EAAex7C,MAAMgb,gBAAkB,kBACvCwgC,EAAex7C,MAAMiC,QAAU,OAC/Bu5C,EAAex7C,MAAMynB,eAAiB,SACtC+zB,EAAex7C,MAAM0nB,WAAa,SAClC8zB,EAAex7C,MAAM0sC,OAAS,OAG9B,MAAMnkC,EAAQxK,SAASwB,cAAc,OACrCgJ,EAAM/I,UAAY,cAClB+I,EAAMvI,MAAMgb,gBAAkB,UAC9BzS,EAAMvI,MAAM2jC,aAAe,OAC3Bp7B,EAAMvI,MAAMy7C,QAAU,OACtBlzC,EAAMvI,MAAM07C,SAAW,QACvBnzC,EAAMvI,MAAMob,MAAQ,MACpB7S,EAAMvI,MAAM27C,UAAY,OACxBpzC,EAAMvI,MAAM47C,UAAY,OAExBrzC,EAAMqH,UAAY,wXAMlB4rC,EAAej6C,YAAYgH,GAC3BxK,SAASuD,KAAKC,YAAYi6C,GAG1Bz9C,SAASI,eAAe,qBAAqB2H,QAAU,WACrD01C,EAAezyC,QACjB,EAGAyyC,EAAex9C,iBAAiB,SAAS,SAASC,GAC5CA,EAAMY,SAAW28C,GACnBA,EAAezyC,QAEnB,IAGA,MAAMokB,EAAYpvB,SAASI,eAAe,oBAErCiE,YAMLM,EACGC,KAAK,iBACLC,OAAO,uBACPwqB,IAAI,KAAMhrB,YAAYU,IACtB4B,MAAK,EAAGlC,OAAMC,YACb,GAAIA,EAGF,YADA0qB,EAAUvd,UAAY,uEAIxB,IAAKpN,GAAwB,IAAhBA,EAAK2M,OAEhB,YADAge,EAAUvd,UAAY,wEAKxB,IAAIisC,EAAO,GACXr5C,EAAKR,SAAQiI,IACX,MAAMqxC,EAAcrxC,EAAKhB,UAAYgB,EAAKd,OAASc,EAAKnH,GAAGg5C,UAAU,EAAG,GACxED,GAAQ,iMAEIP,2GAGUrxC,EAAKnH,qNAK1B,IAGHqqB,EAAUvd,UAAYisC,EAGtB99C,SAASgE,iBAAiB,wBAAwBC,SAAQ6D,IACxDA,EAAOC,QAAUU,iBACf,MAAMoH,EAASvO,KAAKguB,aAAa,gBAC3BC,EAAejuB,KAAK08C,UAE1B18C,KAAK08C,UAAY,aACjB18C,KAAKsY,UAAW,QAEM0jC,GAAgBroC,EAAQpF,IAG5CvO,KAAK08C,UAAY,WACjB18C,KAAKW,MAAMgb,gBAAkB,YAE7B3b,KAAK08C,UAAYzuB,EACjBjuB,KAAKsY,UAAW,EAEpB,CAAC,GACD,IA3DJwV,EAAUvd,UAAY,sFA6D1B,CAMC,SAASosC,KAIR,MAAMj0B,EAAUhqB,SAASS,cAAc,uBACnCupB,GACFA,EAAQhf,SAINglC,IACFA,GAAgB1b,QAIlBjb,EAAc,KAGd/K,EAAW,0BAGuB,mBAAvB4vC,oBACTA,oBAEJ,CAEA,SAASC,GAAsB/kC,GAC7B,MAAM2M,EAAmB/lB,SAASS,cAAc,YAChD,IAAKslB,EAAkB,OAEvBA,EAAiBlU,UAAY,GAG7B,IAAI/F,EAAU,CAACsN,GACf,MAAMglC,EAAiBC,aAAajlC,GAG9BklC,EAAoBC,uBAAuBnlC,EAAeglC,EAAgB,GAChFtyC,EAAUA,EAAQ0yC,OAAOF,GAGzBxyC,EAAU2yC,aAAa3yC,GAGvBA,EAAQ7H,SAAQ28B,IACd,MAAM94B,EAAS9H,SAASwB,cAAc,UACtCsG,EAAO9B,YAAc46B,EACrB94B,EAAOrG,UAAY28C,EAAiB,cAAgB,GACpDt2C,EAAOC,QAAU,SAAS7H,GACxBgZ,GAAahZ,EACf,EACA6lB,EAAiBviB,YAAYsE,EAAO,GAExC,CAEAW,eAAei2C,GAAyB7uC,GACtC,IAIE,MAAQpL,KAAMwwB,EAAWvwB,MAAO6yB,SAAqB5yB,EAClDC,KAAK,gBACLC,OAAO,WACPC,GAAG,UAAW+K,GACd7K,SAGH,GAAIuyB,GAAkC,aAApBA,EAAW/qB,KAAqB,CAEhD,MAAQ9H,MAAOi6C,SAA2Bh6C,EACvCC,KAAK,gBACLwI,OAAO,CAAC,CACPV,QAASmD,EACTrC,uBAAwB,EACxB3G,uBAAwB,IAM9B,CAGA,MAAQpC,KAAM2K,EAAc1K,MAAOk6C,SAAwBj6C,EACxDC,KAAK,iBACLC,OAAO,WACPC,GAAG,UAAW+K,GACd7K,SAGH,GAAI45C,GAAwC,aAAvBA,EAAcpyC,KAAqB,CAEtD,MAAQ9H,MAAOm6C,SAA8Bl6C,EAC1CC,KAAK,iBACLwI,OAAO,CAAC,CACPV,QAASmD,EACTlD,MAAO,EACPC,WAAY,EACZC,MAAO,EACP5H,MAAO,EACP6H,MAAO,CAAC,EACRC,cAAe,CAAC,EAAG,CAAC,IACpBC,gBAAiB,CAAC,MAAO,CAAC,IAC1BC,eAAgB,GAChBC,iBAAkB,KAMxB,CAEA,OAAO,CACT,CAAE,MAAOxI,GAEP,OAAO,CACT,CACF,CAEA,SAAS02B,KAEqB,mBAAjBqjB,eACT38C,OAAO28C,aAAe,SAASK,GAC7B,MAAMC,EAAW,IAAID,GACrB,IAAK,IAAIz9C,EAAI09C,EAAS3tC,OAAS,EAAG/P,EAAI,EAAGA,IAAK,CAC5C,MAAMwgB,EAAI/b,KAAK4T,MAAM5T,KAAK6T,UAAYtY,EAAI,KACzC09C,EAAS19C,GAAI09C,EAASl9B,IAAM,CAACk9B,EAASl9B,GAAIk9B,EAAS19C,GACtD,CACA,OAAO09C,CACT,GAIF,MAAMC,EAAgBh/C,SAASI,eAAe,0BACxC6+C,EAAgBj/C,SAASI,eAAe,uBACxC8+C,EAAel/C,SAASI,eAAe,sBACvC++C,EAAen/C,SAASI,eAAe,sBAE7C,IAAK4+C,EAEH,OAGF,IAAKC,EAEH,OAGF,IAAKC,EAEH,OAIF,IAAKC,EAAc,CACjB,MAAMC,EAAWp/C,SAASwB,cAAc,OACxC49C,EAASr6C,GAAK,qBACdq6C,EAASn9C,MAAMuhB,QAAU,kGACzB47B,EAASp5C,YAAc,SACvBg5C,EAAcx7C,YAAY47C,EAC5B,CAGAJ,EAAc/8C,MAAMiC,QAAU,QAG9B,IAAIm7C,EAAY,GAChB,IACE,IAAK,MAAMhsB,KAAOxP,eAChB,GAAIwP,EAAIzc,WAAW,MAAO,CACxB,MAAM1N,EAAQ2a,eAAewP,GAAKnqB,MAC5B6K,EAAe8P,eAAewP,GAAKtf,aACzC,IAAK,IAAI1S,EAAI,EAAGA,EAAI6H,EAAMkI,QAAU/P,EAAI0S,EAAa3C,OAAQ/P,IAC3Dg+C,EAAU39C,KAAK,CACb49C,OAAQp2C,EAAM7H,GACdk+C,QAASxrC,EAAa1S,IAG5B,CAEJ,CAAE,MAAOV,GAGP0+C,EAAY,CACV,CAAEC,OAAQ,MAAOC,QAAS,OAC1B,CAAED,OAAQ,OAAQC,QAAS,OAC3B,CAAED,OAAQ,MAAOC,QAAS,SAC1B,CAAED,OAAQ,OAAQC,QAAS,QAC3B,CAAED,OAAQ,MAAOC,QAAS,SAC1B,CAAED,OAAQ,MAAOC,QAAS,QAC1B,CAAED,OAAQ,KAAMC,QAAS,QACzB,CAAED,OAAQ,MAAOC,QAAS,QAC1B,CAAED,OAAQ,MAAOC,QAAS,SAC1B,CAAED,OAAQ,OAAQC,QAAS,SAE/B,CAGAF,EAAYv9C,OAAO28C,aAAa,IAAIY,IAGpC,IAAIG,GAAa,EACbC,EAAQ,EACRC,EAAQ,EACRC,EAAe,GACfC,EAAoB,GACpBC,EAAiBb,EAAcxG,YAAc,EAC7CsH,EAAa,KACbC,EAAkB,KAClBC,EAAQ,EACRC,EAAgB,EAIpB,SAASC,IACP,MAAMC,EAAad,EAAUv5C,KAAK4T,MAAM5T,KAAK6T,SAAW0lC,EAAUjuC,SAClEwuC,EAAoBO,EAAWb,OAC/BL,EAAcj5C,YAAc45C,CAC9B,CAEA,SAASQ,IACP,IAAKZ,EAAY,OAGjB,MAAMa,EAAehB,EAAU/pC,MAAKgrC,GAAQA,EAAKhB,SAAWM,KAAoBL,QAC1EgB,EAAmBlB,EACtBnqC,QAAOorC,GAAQA,EAAKhB,SAAWM,IAC/BxtC,KAAIkuC,GAAQA,EAAKf,UAGdiB,EAAa16C,KAAK6T,SAAW,GAG7B8mC,EAAczgD,SAASwB,cAAc,OAI3C,GAHAi/C,EAAYh/C,UAAY,eAGpB++C,GAAcH,EAChBI,EAAYz6C,YAAcq6C,EAC1BI,EAAYjiC,QAAQkiC,SAAW,WAC1B,CACL,MAAMC,EAAoBJ,EAAiBz6C,KAAK4T,MAAM5T,KAAK6T,SAAW4mC,EAAiBnvC,SACvFqvC,EAAYz6C,YAAc26C,GAAqB,OAC/CF,EAAYjiC,QAAQkiC,SAAW,OACjC,CAGAD,EAAYx+C,MAAMuhB,QAAU,+DAGlB1d,KAAK6T,UAAYqlC,EAAcxG,YAAc,IAAM,0KAQ7DwG,EAAcx7C,YAAYi9C,GAG1Bd,EAAaj+C,KAAK,CAChBqd,QAAS0hC,EACT5+C,GAAI,GACJD,EAAGmc,WAAW0iC,EAAYx+C,MAAMC,MAChCmb,MAAO,EACPmjC,WAA6C,SAAjCC,EAAYjiC,QAAQkiC,UAEpC,CAEA,SAASE,IACP,IAAKpB,EAAY,OAEjB,MAAMqB,EAAkB7B,EAAcxyB,aAChCs0B,EAAYD,EAAkB,GAGpC,IAAK,IAAIx/C,EAAIs+C,EAAavuC,OAAS,EAAG/P,GAAK,EAAGA,IAAK,CACjD,MAAM8rB,EAAOwyB,EAAat+C,GAY1B,GATmB,IAAf8rB,EAAK9P,QACP8P,EAAK9P,MAAQ8P,EAAKpO,QAAQy5B,aAI5BrrB,EAAKtrB,GAAK69C,EACVvyB,EAAKpO,QAAQ9c,MAAME,IAAM,GAAGgrB,EAAKtrB,MAG7BsrB,EAAKtrB,EAAIg/C,EAAiB,CAE5B,GAAI1zB,EAAKqzB,WAAY,CACnBP,IAGA,MAAMc,EAAgB/gD,SAASwB,cAAc,OAC7Cu/C,EAAc/6C,YAAc,kBAAkBi6C,OAC9Cc,EAAc9+C,MAAMuhB,QAAU,wDAEpB2J,EAAKvrB,uLAOfo9C,EAAcx7C,YAAYu9C,GAC1B3+C,YAAW,KACT48C,EAAcrhC,YAAYojC,EAAc,GACvC,KAGH,MAAMC,EAAehhD,SAASI,eAAe,sBACzC4gD,IACFA,EAAah7C,YAAc,KAAKi7C,OAAOn7C,KAAKmW,IAAI,EAAG,EAAIgkC,KAIrDA,GA5GM,GA6GRiB,GAEJ,CAGAlC,EAAcrhC,YAAYwP,EAAKpO,SAC/B4gC,EAAa7e,OAAOz/B,EAAG,GACvB,QACF,CAGmB49C,EAAcxgC,wBAChB0O,EAAKpO,QAAQN,wBAE9B,GAAI0O,EAAKtrB,EAAIsrB,EAAKpO,QAAQyN,cAAgBs0B,GACtC3zB,EAAKvrB,EAAIurB,EAAK9P,OAASwiC,EAAiBZ,EAAczG,YAAY,GAClErrB,EAAKvrB,GAAKi+C,EAAiBZ,EAAczG,YAAY,EAAG,CAG1D,GAAIrrB,EAAKqzB,WAAY,CAEnBf,GAAS,GACTP,EAAal5C,YAAc,UAAUy5C,IAGrC,MAAM0B,EAAiBnhD,SAASwB,cAAc,OAC9C2/C,EAAen7C,YAAc,MAC7Bm7C,EAAel/C,MAAMuhB,QAAU,wDAErB2J,EAAKvrB,0BACNurB,EAAKtrB,2JAMdm9C,EAAcx7C,YAAY29C,GAC1B/+C,YAAW,KACT48C,EAAcrhC,YAAYwjC,EAAe,GACxC,KAGHzB,GAAS,IAGTQ,GACF,KAAO,CAELT,EAAQ35C,KAAKmW,IAAI,EAAGwjC,EAAQ,GAC5BP,EAAal5C,YAAc,UAAUy5C,IAErCO,IAGA,MAAMgB,EAAehhD,SAASI,eAAe,sBACzC4gD,IACFA,EAAah7C,YAAc,KAAKi7C,OAAOjB,IAIzC,MAAMmB,EAAiBnhD,SAASwB,cAAc,OAC9C2/C,EAAen7C,YAAc,KAC7Bm7C,EAAel/C,MAAMuhB,QAAU,wDAErB2J,EAAKvrB,0BACNurB,EAAKtrB,4JAMdm9C,EAAcx7C,YAAY29C,GAC1B/+C,YAAW,KACT48C,EAAcrhC,YAAYwjC,EAAe,GACxC,KAGCnB,GAAS,GACXkB,GAEJ,CAGAlC,EAAcrhC,YAAYwP,EAAKpO,SAC/B4gC,EAAa7e,OAAOz/B,EAAG,EACzB,CACF,CAGAy+C,EAAa18C,sBAAsBw9C,EACrC,CAEA,SAASM,IACP1B,GAAa,EACbhjC,cAAcujC,GAGd,MAAMqB,EAAcphD,SAASwB,cAAc,OAC3C4/C,EAAYn/C,MAAMuhB,QAAU,6PAW5B49B,EAAYvvC,UAAY,iIAEmB4tC,6IAI3CT,EAAcx7C,YAAY49C,GAG1BphD,SAASI,eAAe,oBAAoBH,iBAAiB,SAAS,KACpE++C,EAAcrhC,YAAYyjC,GAC1BphC,GAAW,GAEf,CAGA,IAAIqhC,GAAa,EAEjB,SAASC,EAAY3gD,GACnB0gD,GAAa,EACb,MAAME,EAAQ5gD,EAAEmsB,KAAKte,SAAS,SAAW7N,EAAE6gD,QAAQ,GAAGD,MAAQ5gD,EAAE4gD,MAC1DE,EAAgBzC,EAAcvgC,wBACpCohC,EAAiB0B,EAAQE,EAAcv/C,KACvCw/C,IAEI/gD,EAAEmsB,KAAKte,SAAS,UAClB7N,EAAEksB,gBAEN,CAEA,SAAS80B,EAAWhhD,GAClB,IAAK0gD,EAAY,OAEjB,MAAME,EAAQ5gD,EAAEmsB,KAAKte,SAAS,SAAW7N,EAAE6gD,QAAQ,GAAGD,MAAQ5gD,EAAE4gD,MAC1DE,EAAgBzC,EAAcvgC,wBACpCohC,EAAiB0B,EAAQE,EAAcv/C,KACvCw/C,IAEI/gD,EAAEmsB,KAAKte,SAAS,UAClB7N,EAAEksB,gBAEN,CAEA,SAAS+0B,IACPP,GAAa,CACf,CAEA,SAASK,IAEP7B,EAAiB/5C,KAAKmW,IAAIgjC,EAAczG,YAAY,EACnC1yC,KAAKC,IAAIi5C,EAAcxG,YAAcyG,EAAczG,YAAY,EAC/DqH,IAEjBZ,EAAch9C,MAAMC,KAAO,GAAG29C,KAChC,CAGA,MAAMgC,EAAU,sBAChB,IAAK7hD,SAASI,eAAeyhD,GAAU,CACrC,MAAM5/C,EAAQjC,SAASwB,cAAc,SACrCS,EAAM8C,GAAK88C,EACX5/C,EAAM+D,YAAc,+YAepBhG,SAAS0wB,KAAKltB,YAAYvB,EAC5B,CAYA,SAAS+d,IAEPw/B,GAAa,EACbC,EAAQ,EACRC,EAAQ,EACRM,EAAQ,EACRC,EAAgB,EAGhB,MAAMe,EAAehhD,SAASI,eAAe,sBACzC4gD,IACFA,EAAah7C,YAAc,UAI7B25C,EAAa17C,SAAQkpB,IACfA,EAAKpO,QAAQ8R,YACfmuB,EAAcrhC,YAAYwP,EAAKpO,QACjC,IAEF4gC,EAAe,GAGfT,EAAal5C,YAAc,UAAUy5C,IAGrCS,IAGAJ,EAAa18C,sBAAsBw9C,GAGnCb,EAAkB/jC,YAAYokC,EAAmB,IACnD,CA1CAnB,EAAch/C,iBAAiB,YAAaqhD,GAC5CthD,SAASC,iBAAiB,YAAa0hD,GACvC3hD,SAASC,iBAAiB,UAAW2hD,GAGrC3C,EAAch/C,iBAAiB,aAAcqhD,EAAa,CAAEtN,SAAS,IACrEh0C,SAASC,iBAAiB,YAAa0hD,EAAY,CAAE3N,SAAS,IAC9Dh0C,SAASC,iBAAiB,WAAY2hD,GA0DtC,MAAME,EAAgB9lC,aApBtB,WACMsC,IAAuD,WAA/BA,GAAqB1b,QAE/C4Z,cAAcujC,GACdgC,qBAAqBjC,GACrBd,EAAc/8C,MAAMiC,QAAU,OAG9B+6C,EAAc3nC,oBAAoB,YAAagqC,GAC/CthD,SAASsX,oBAAoB,YAAaqqC,GAC1C3hD,SAASsX,oBAAoB,UAAWsqC,GACxC3C,EAAc3nC,oBAAoB,aAAcgqC,GAChDthD,SAASsX,oBAAoB,YAAaqqC,GAC1C3hD,SAASsX,oBAAoB,WAAYsqC,GAGzCplC,cAAcslC,GAElB,GAEqD,KAKrD,OAFA9hC,IAEO,CACL+Z,KAAM,WACJylB,GAAa,EACbhjC,cAAcujC,GACdgC,qBAAqBjC,GACrBtjC,cAAcslC,EAChB,EAEJ,CAEA,SAAShjC,KACP,IAAKR,KAAyBA,GAAqBrb,WAAY,OAG/D,IAAI++C,GAAY,EACZvkB,GAAe,EAEnB,IAAK,IAAIp8B,EAAI,EAAGA,EAAIid,GAAqB7b,aAAa2O,OAAQ/P,IAC5D,GAAIid,GAAqB7b,aAAapB,GAAG6J,WAAaoT,GAAqBrb,WAAY,CACrF++C,GAAY,EACZvkB,EAAcp8B,EACd,KACF,EAIG2gD,GAAa3oC,EAChBiF,GAAqB7b,aAAaf,KAAK,CACrCwJ,SAAUoT,GAAqBrb,WAC/Bsb,eAAgBlF,EAAYkF,gBAAkB,EAC9CtZ,MAAOoU,EAAYpU,OAAS,IAErB+8C,GAAa3oC,IAEtBiF,GAAqB7b,aAAag7B,GAAalf,eAAiBlF,EAAYkF,gBAAkB,EAC9FD,GAAqB7b,aAAag7B,GAAax4B,MAAQoU,EAAYpU,OAAS,GAI9E,MAAM43B,EAAqB,IAAIve,GAAqB7b,cACjDic,MAAK,CAACR,EAAGmN,IACJA,EAAE9M,iBAAmBL,EAAEK,eAClB8M,EAAE9M,eAAiBL,EAAEK,eAEvB8M,EAAEpmB,MAAQiZ,EAAEjZ,QAIvB,IAAIwzB,EAAa,EACbwpB,GAAa,EACbC,GAAa,EACbC,EAAc,EAElB,IAAK,IAAI9gD,EAAI,EAAGA,EAAIw7B,EAAmBzrB,OAAQ/P,IAAK,CAClD,MAAM43B,EAAI4D,EAAmBx7B,GAU7B,GAPI43B,EAAE1a,iBAAmB0jC,GAAahpB,EAAEh0B,QAAUi9C,IAChDC,EAAc9gD,EAAI,EAClB4gD,EAAYhpB,EAAE1a,eACd2jC,EAAYjpB,EAAEh0B,OAIZg0B,EAAE/tB,WAAaoT,GAAqBrb,WAAY,CAClDw1B,EAAa0pB,EACb,KACF,CACF,CAGmB,IAAf1pB,IAAkBA,EAAa,GAGnC,MAYM2pB,EAZY,CAACC,IACjB,GAAIA,GAAO,IAAMA,GAAO,GAAI,MAAO,KAGnC,OADkBA,EAAM,IAEtB,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,KACf,QAAS,MAAO,KAClB,EAGaC,CAAU7pB,GAGzB,IAAI8pB,EAAcviD,SAASS,cAAc,wBAEzC,GAAK8hD,EAaE,CACL,MAAMC,EAAqBD,EAAY9hD,cAAc,gBACrC6D,SAASi+C,EAAY/jC,QAAQ2jC,aAAe,OAG5C1pB,IAEd8pB,EAAY/jC,QAAQikC,UAAY,OAGhCD,EAAmBniD,UAAU8D,IAAI,WAGjC/B,YAAW,KACT,GAAImgD,EAAa,CACf,MAAMG,EAAiB1iD,SAASwB,cAAc,OAC9CkhD,EAAejhD,UAAY,uBAC3BihD,EAAe7wC,UAAY,GAAG4mB,8BAAuC2pB,WAErEG,EAAY1wC,UAAY,GACxB0wC,EAAY/+C,YAAYk/C,GACxBH,EAAY/jC,QAAQ2jC,YAAc1pB,EAGlCr2B,YAAW,KACT,GAAImgD,EAAa,CACfA,EAAY/jC,QAAQikC,UAAY,QAChC,MAAMh8C,EAAK87C,EAAY9hD,cAAc,gBACjCgG,GAAIA,EAAGpG,UAAU2K,OAAO,WAC9B,IACC,IACL,IACC,KAEP,KA/CkB,CAEhBu3C,EAAcviD,SAASwB,cAAc,OACrC+gD,EAAY9gD,UAAY,sBACxB8gD,EAAY/jC,QAAQ2jC,YAAc1pB,EAClC8pB,EAAY1wC,UAAY,6CACc4mB,8BAAuC2pB,uBAG7E,MAAMh8B,EAAiBpmB,SAASI,eAAe,mBAC3CgmB,GACFA,EAAe5iB,YAAY++C,EAE/B,CAqCAA,EAAYliD,UAAU2K,OAAO,SAAU,SAAU,UAC7CytB,GAAc,GAAKA,GAAc,GACnC8pB,EAAYliD,UAAU8D,IAAI,QAAQs0B,IAEtC,CAEA,SAASkqB,GAAiB1tC,GACxB,MAAMunC,EAAWx8C,SAASS,cAAc,mCAAmCwU,OAC3E,IAAKunC,EAAU,OAGGA,EAASn8C,UAAUC,SAAS,WAI5CsiD,GAAe3tC,GAGf4tC,GAAoB5tC,EAAQunC,EAEhC,CAEA,SAASqG,GAAoB5tC,EAAQunC,GAEnC,IADa9oC,GAAmB1B,MAAMsD,MAAKd,GAAQA,EAAKzP,KAAOkQ,IACpD,OAEXunC,EAASn8C,UAAU8D,IAAI,WAGvB,MAAMw4C,EAAaH,EAAS/7C,cAAc,gBACtCk8C,IACFA,EAAW32C,YAAc,QAI3B,MAAM82C,EAAaN,EAAS/7C,cAAc,mBACpCqiD,EAAehG,EAAW92C,YAGhC82C,EAAWjrC,UAAY,oDAAoDixC,8BAG3E,IAAIC,EAAgBvG,EAAS/7C,cAAc,0BAE3C,IAAKsiD,EAAe,CAClBA,EAAgB/iD,SAASwB,cAAc,OACvCuhD,EAActhD,UAAY,wBAG1B,MAAMuhD,EAAYhjD,SAASwB,cAAc,OACzCwhD,EAAUvhD,UAAY,+BACtBshD,EAAcv/C,YAAYw/C,GAG1B,MAAMC,EAAYjjD,SAASwB,cAAc,UACzCyhD,EAAUxhD,UAAY,8BACtBwhD,EAAUpxC,UAAY,uCACtBoxC,EAAUl7C,QAAU,WAAam7C,GAAcjuC,EAAS,EACxD8tC,EAAcv/C,YAAYy/C,GAG1BzG,EAASh5C,YAAYu/C,EACvB,CAGAI,GAAuBluC,EAAQ8tC,EAActiD,cAAc,kCAGvD+7C,EAASn8C,UAAUC,SAAS,cAC9Bk8C,EAASn8C,UAAU2K,OAAO,YAE9B,CAEA,SAASm4C,GAAuBluC,EAAQ+H,GACtC,MAAMxI,EAAOd,GAAmB1B,MAAMsD,MAAKd,GAAQA,EAAKzP,KAAOkQ,IAC1DT,GAASwI,IAEdA,EAAUnL,UAAY,GAElBrB,MAAMC,QAAQ+D,EAAKtL,QACrBsL,EAAKtL,MAAMjF,SAAQ,CAACkpB,EAAMvY,KACxB,MAAMypB,EAAc7pB,EAAKT,cAAgBa,EAAQJ,EAAKT,aAAa3C,OAASoD,EAAKT,aAAaa,GAAS,GAEjGilC,EAAW75C,SAASwB,cAAc,OACxCq4C,EAASp4C,UAAY,+BACrBo4C,EAASM,WAAY,EACrBN,EAAShoC,UAAY,iKAIgCsb,mEACHkR,8MAMlDrhB,EAAUxZ,YAAYq2C,GACtBuJ,GAA4BvJ,EAAS,IAIzCwJ,GAA4BrmC,GAC9B,CAEA,SAASomC,GAA4BrkC,GACnC,IAAKA,EAAS,OAEd,MAAM07B,EAAQ17B,EAAQyvB,WAAU,GAC5BzvB,EAAQ8R,YACV9R,EAAQ8R,WAAW6pB,aAAaD,EAAO17B,IAGzCA,EAAU07B,GACFtJ,aAAa,YAAa,QAElCpyB,EAAQ9e,iBAAiB,aAAcU,IACrCA,EAAEkxB,kBACF9S,EAAQ1e,UAAU8D,IAAI,YACtBxD,EAAEg6C,aAAaC,QAAQ,aAAc,GAAG,IAG1C77B,EAAQ9e,iBAAiB,WAAYU,IACnCA,EAAEkxB,kBACF9S,EAAQ1e,UAAU2K,OAAO,WAAW,IAGtC,MAAMovC,EAAYr7B,EAAQte,cAAc,oBAKxC,OAJI25C,IACFA,EAAUryC,QAAU,IAAMu7C,GAAiBlJ,IAGtCr7B,CACT,CAEA,SAASskC,GAA4BrmC,GAC9BA,IAELA,EAAU/c,iBAAiB,YAAaU,IACtCA,EAAEksB,iBACF,MAAMguB,EAAkB79B,EAAUvc,cAAc,aAChD,IAAKo6C,EAAiB,OAEtB,MAAMC,EAAeyI,GAA0BvmC,EAAWrc,EAAEq6C,SACxDF,EACF99B,EAAUzR,aAAasvC,EAAiBC,GAExC99B,EAAUxZ,YAAYq3C,EACxB,IAGF79B,EAAUhZ,iBAAiB,iCAAiCC,SAAQ6P,IAClEsvC,GAA4BtvC,EAAK,IAErC,CAEA,SAASyvC,GAA0BvmC,EAAWnb,GAC5C,IAAKmb,EAAW,OAAO,KAEvB,MAAMi+B,EAAoB,IAAIj+B,EAAUhZ,iBAAiB,iDAEzD,OAAOi3C,EAAkB7pC,OAAS6pC,EAAkBC,QAAO,CAACnwC,EAASgU,KACnE,MAAMq8B,EAAMr8B,EAAQN,wBACd48B,EAASx5C,EAAIu5C,EAAIj5C,IAAMi5C,EAAI99B,OAAS,EAC1C,OAAI+9B,EAAS,GAAKA,EAAStwC,EAAQswC,OAC1B,CAAEA,OAAQA,EAAQt8B,QAASA,GAE3BhU,CACT,GACC,CAAEswC,OAAQt0B,OAAOu0B,oBAAqBv8B,QAAU,IACrD,CAEA,SAASmkC,GAAcjuC,GACrB,MAAMunC,EAAWx8C,SAASS,cAAc,mCAAmCwU,OAC3E,IAAKunC,EAAU,OAEf,MAAMx/B,EAAYw/B,EAAS/7C,cAAc,iCACzC,IAAKuc,EAAW,OAEhB,MAAM68B,EAAW75C,SAASwB,cAAc,OACxCq4C,EAASp4C,UAAY,+BACrBo4C,EAASM,WAAY,EACrBN,EAAShoC,UAAY,6XAWrB,MAAM0oC,EAAUv9B,EAAUxZ,YAAYq2C,GACtCuJ,GAA4B7I,GAEM,IAA9Bv9B,EAAUoZ,SAAShlB,QACrBiyC,GAA4BrmC,GAG9Bu9B,EAAQ95C,cAAc,gBAAgBwK,OACxC,CAEA,SAASq4C,GAAiBx7C,GACxB,IAAKA,EAAQ,OACb,MAAM+xC,EAAW/xC,EAAOiD,QAAQ,iCAC5B8uC,GACFA,EAAS7uC,QAEb,CAEA,SAAS43C,GAAe3tC,GACtB,MAAMunC,EAAWx8C,SAASS,cAAc,mCAAmCwU,OAC3E,IAAKunC,EAAU,OAEf,MAAMhoC,EAAOd,GAAmB1B,MAAMsD,MAAKd,GAAQA,EAAKzP,KAAOkQ,IAC/D,IAAKT,EAAM,OAGX,MAAMqnC,EAAYW,EAAS/7C,cAAc,mBACnC+iD,EAAU3H,EAAYA,EAAU10C,MAAMwrB,OAASne,EAAK1B,KAGpD5J,EAAQ,GACR6K,EAAe,GAErByoC,EAASx4C,iBAAiB,iCAAiCC,SAAQ6P,IACjE,MAAMqZ,EAAOrZ,EAAKrT,cAAc,gBAAgBuF,YAAY2sB,OACtD0L,EAAcvqB,EAAKrT,cAAc,gBAAgB0G,MAAMwrB,OAEzDxF,GAAQkR,IACVn1B,EAAMxH,KAAKyrB,GACXpZ,EAAarS,KAAK28B,GACpB,IAIF,MAAMolB,EAAc,IACfjvC,EACH1B,KAAM0wC,EACNt6C,MAAOA,EACP6K,aAAcA,GAIhBL,GAAmBa,KAAKkvC,GAAa98C,MAAK+8C,IACxC,GAAIA,EAAW,CAEblH,EAASn8C,UAAU2K,OAAO,WAG1B,MAAM2xC,EAAaH,EAAS/7C,cAAc,gBACtCk8C,IACFA,EAAW32C,YAAc,QAI3B,MAAM82C,EAAaN,EAAS/7C,cAAc,mBACtCq8C,IACFA,EAAW92C,YAAcw9C,GAI3B,MAAMG,EAAcnH,EAAS/7C,cAAc,iBACvCkjD,IACFA,EAAY39C,YAAckD,EAAM0O,MAAM,EAAG,GAAG+G,KAAK,OAASzV,EAAMkI,OAAS,EAAI,MAAQ,KAIvF,MAAMxK,EAAY41C,EAAS/7C,cAAc,eACrCmG,IACFA,EAAUZ,YAAckD,EAAMkI,OAAS,SACvCxK,EAAUvG,UAAU8Z,OAAO,eAAgBjR,EAAMkI,OAAS,IAI5D,MAAMwyC,EAAcpH,EAAS/7C,cAAc,iBACvCmjD,IACFA,EAAY3hD,MAAMiC,QAAUgF,EAAMkI,OAAS,EAAI,GAAK,QAItD,MAAMqrC,EAAiBD,EAAS/7C,cAAc,oBAC9C,GAAIg8C,EAAgB,CAClB,MAAMoH,EAAc36C,EAAMkI,QAAU,EACpCqrC,EAAe7iC,UAAYiqC,EAC3BpH,EAAez2C,YAAc69C,EAAc,WAAa,QAAQ,EAAI36C,EAAMkI,cAC1EqrC,EAAex6C,MAAM4G,QAAUg7C,EAAc,IAAM,MACnDpH,EAAex6C,MAAMglC,OAAS4c,EAAc,UAAY,cAGtDpH,EAAe10C,QADb87C,EACuB,WACvBnH,GAAwBznC,EAC1B,EAEyB,IAE7B,CAEA+D,GAAiB,0BAA2B,UAC9C,MACEA,GAAiB,sBAAuB,QAC1C,GAEJ,CAGA,SAAS8qC,GAAyB5jD,GAK5BA,GACFA,EAAM2sB,iBAIRk3B,GAAoB7jD,EACtB,CAEAuI,eAAes7C,GAAoBpjD,GAG3BA,GACAA,EAAEksB,iBAGN,MAAMmE,EAAUhxB,SAASI,eAAe,WAAW6wB,QAEnD,IAEI,GAAID,EAAS,CACT,MAAMgzB,EAAWhkD,SAASI,eAAe,YACnC6jD,EAAQjkD,SAASI,eAAe,SAEtC,IAAK4jD,EAAS78C,MAAMwrB,OAGhB,OAFAqxB,EAAS/hD,MAAMiiD,OAAS,oBACxBz1C,MAAM,gCACC,EAGX,IAAKw1C,EAAM98C,MAAMwrB,OAGb,OAFAsxB,EAAMhiD,MAAMiiD,OAAS,oBACrBz1C,MAAM,mCACC,CAEf,KAAO,CACH,MAAM01C,EAAankD,SAASI,eAAe,cACrCgkD,EAAcpkD,SAASI,eAAe,eAE5C,IAAK+jD,EAAWh9C,MAAMwrB,OAGlB,OAFAwxB,EAAWliD,MAAMiiD,OAAS,oBAC1Bz1C,MAAM,yCACC,EAGX,IAAK21C,EAAYj9C,MAAMwrB,OAGnB,OAFAyxB,EAAYniD,MAAMiiD,OAAS,oBAC3Bz1C,MAAM,4CACC,CAEf,CAGA,IAAI41C,EAAc,CACd33C,QAASrI,YAAYU,GACrBu/C,SAAUtzB,EACVjlB,UAAWilB,EAAUhxB,SAASI,eAAe,YAAY+G,MAAQnH,SAASI,eAAe,cAAc+G,MACvG88C,MAAOjzB,EAAUhxB,SAASI,eAAe,SAAS+G,MAAQnH,SAASI,eAAe,eAAe+G,MACjGo9C,YAAavzB,EAAU,KAAOhxB,SAASI,eAAe,cAAc+G,MACpEq9C,aAAcxzB,EAAU,KAAOhxB,SAASI,eAAe,eAAe+G,MACtEs9C,gBAAiBzkD,SAASI,eAAe,kBAAkB+G,OAI/D,IACI,MAAM1C,KAAEA,EAAIC,MAAEA,SAAgBC,EACzBC,KAAK,oBACLwI,OAAO,CAACi3C,IACRx/C,QAKT,CAAE,MAAOiC,GAET,CAGA,MAAQpC,MAAOsK,SAAsBrK,EAChCC,KAAK,iBACLuB,OAAO,CAAEgG,OAAQ,YACjBrH,GAAG,KAAMT,YAAYU,IAE1B,GAAIiK,EAAa,MAAMA,EAO/B,OAHAzK,aAAa6B,QAAQ,oBAAoB/B,YAAYU,KAAM,QAC3DoL,GAAwB,WACxBu0C,MACO,CACH,CAAE,MAAOhgD,GAGL,OADA+J,MAAM,gDACC,CACX,CACJ,CAGA,SAASk2C,GAAa3zB,GACpB,IACE,OAAIA,EACKhxB,SAASI,eAAe,YAAY+G,MAAMwrB,QAC1C3yB,SAASI,eAAe,SAAS+G,MAAMwrB,OAEvC3yB,SAASI,eAAe,cAAc+G,MAAMwrB,QAC5C3yB,SAASI,eAAe,eAAe+G,MAAMwrB,MAExD,CAAE,MAAOhyB,GAEP,OAAO,CACT,CACF,CAkCA,SAAS+jD,KAEP1kD,SAASgE,iBAAiB,oDAAoDC,SAAQ4rB,GAASA,EAAM7kB,WAGrG,MAAM45C,EAAe5kD,SAASwB,cAAc,OAC5CojD,EAAanjD,UAAY,+BACzBmjD,EAAa3iD,MAAMuhB,QAAU,kOAc7B,MAAMqhC,EAAe7kD,SAASwB,cAAc,OAC5CqjD,EAAapjD,UAAY,+BACzBojD,EAAa5iD,MAAMuhB,QAAU,iRAa7BqhC,EAAahzC,UAAY,4tBAsBzB+yC,EAAaphD,YAAYqhD,GACzB7kD,SAASuD,KAAKC,YAAYohD,GAG1BxiD,YAAW,KACT,MAAM0iD,EAAiB9kD,SAASI,eAAe,2BAE3C0kD,IAIFA,EAAe/8C,QAAU,SAASpH,GAKhC,OAJAA,EAAEksB,iBACFlsB,EAAEkxB,kBAEFkzB,MACO,CACT,EAEAD,EAAe7kD,iBAAiB,SAAS,SAASU,GAChDA,EAAEksB,iBACFlsB,EAAEkxB,kBAEFkzB,IACF,IAAG,GAGHD,EAAe7kD,iBAAiB,aAAa,WAC3CqB,KAAKW,MAAM8X,WAAa,mDACxBzY,KAAKW,MAAMmyB,UAAY,mBACvB9yB,KAAKW,MAAMyqB,UAAY,mCACzB,IAEAo4B,EAAe7kD,iBAAiB,YAAY,WAC1CqB,KAAKW,MAAM8X,WAAa,cACxBzY,KAAKW,MAAMmyB,UAAY,gBACvB9yB,KAAKW,MAAMyqB,UAAY,mCACzB,KAMFk4B,EAAa3kD,iBAAiB,SAAS,SAASU,GAC1CA,EAAEG,SAAWQ,MACfyjD,IAEJ,GAAE,GAED,IAGL,CAEA,SAASA,KAEP,MAAM/6B,EAAUhqB,SAASS,cAAc,iCACnCupB,IACFA,EAAQ/nB,MAAM4G,QAAU,IACxBmhB,EAAQ/nB,MAAM2uC,WAAa,oBAC3BxuC,YAAW,KACL4nB,EAAQ6G,YACV7G,EAAQ6G,WAAWlT,YAAYqM,EACjC,GACC,MAGLhqB,SAASgE,iBAAiB,uBAAuBC,SAAQ4rB,IACnDA,EAAMgB,YACRhB,EAAMgB,WAAWlT,YAAYkS,EAC/B,IAGF,MAAMC,EAAgB9vB,SAASI,eAAe,kBAC1C0vB,GACFA,EAAczvB,UAAU2K,OAAO,WAGjC,MAAMqpB,EAAcr0B,SAASI,eAAe,eACxCi0B,GACFA,EAAYC,QAId/vB,aAAakb,WAAW,eAGxBmQ,KACAthB,EAAW,iBAGb,CAEA,SAAS6lB,KAGP,MAAMtE,EAAQ7vB,SAASS,cAAc,uBACjCovB,IACFA,EAAM5tB,MAAM4G,QAAU,IACtBgnB,EAAM5tB,MAAMmyB,UAAY,mCAExBhyB,YAAW,KACLytB,EAAMgB,YACRhB,EAAMgB,WAAWlT,YAAYkS,EAC/B,GACC,MAGL,MAAMC,EAAgB9vB,SAASI,eAAe,kBAC1C0vB,GACFA,EAAczvB,UAAU2K,OAAO,WAGjC,MAAMqpB,EAAcr0B,SAASI,eAAe,eACxCi0B,GACFA,EAAYC,QAId,MAAMtmB,EAAe3I,EAAU2I,aAE/B4hB,KAGI5hB,GAEF5L,YAAW,KAET,MAAMwgB,EAAcre,aAAaC,QAAQ,eACzC,GAAIoe,EACF,IACE,MAAM/R,EAAUxB,KAAKC,MAAMsT,GACvB/R,EAAQhE,QACVxH,EAAU2I,aAAe6C,EAAQhE,MACjCuU,GAAWvQ,EAAQhE,OAEvB,CAAE,MAAOlM,GAET,CACF,GACC,IAIP,CA0BA,SAAS2pB,KACL,MAAM06B,EAAOhlD,SAASwqB,gBAChBy6B,EAAiBjlD,SAASS,cAAc,yBAE1CT,SAAS0qB,kBACL1qB,SAAS2qB,gBACT3qB,SAAS2qB,iBAAiBhkB,MAAK,KACvBs+C,IACAA,EAAexjD,UAAY,gBAC/B,IACDgS,OAAM3M,IAC6D,IAGnEk+C,EAAKp6B,mBACZo6B,EAAKp6B,oBAAoBjkB,MAAK,KACtBs+C,IACAA,EAAexjD,UAAY,kBAC/B,IACDgS,OAAM3M,IAC+D,GAGhF,CAaA,SAASiR,KAEL,MAAMmtC,EAAellD,SAASS,cAAc,oBACxCykD,GACAA,EAAal6C,SAIjB,IAAI+Z,EAAe/kB,SAASS,cAAc,2BAG1C,IAAKskB,EAAc,CACfA,EAAe/kB,SAASwB,cAAc,OACtCujB,EAAatjB,UAAY,yBACzBzB,SAASuD,KAAKC,YAAYuhB,GAG1B,MAAMuf,EAAetkC,SAASwB,cAAc,UAC5C8iC,EAAa7iC,UAAY,mBACzB6iC,EAAav/B,GAAK,oBAClBu/B,EAAazyB,UAAY,8BACzByyB,EAAav8B,QAAUhH,GACvBgkB,EAAavhB,YAAY8gC,GAGzB,MAAMC,EAAUvkC,SAASwB,cAAc,UACvC+iC,EAAQ9iC,UAAY,yBACpB8iC,EAAQx/B,GAAK,eACbw/B,EAAQ1yB,UAAY,8BACpB0yB,EAAQx8B,QAAU8tB,IAAgB,WAAavnB,EAAW,iBAAmB,EAC7EyW,EAAavhB,YAAY+gC,GAGzB,MAAMC,EAAgBxkC,SAASwB,cAAc,UAC7CgjC,EAAc/iC,UAAY,+BAC1B+iC,EAAcz/B,GAAK,qBACnBy/B,EAAc3yB,UAAY,gCAC1B2yB,EAAcz8B,QAAUuiB,GACxBvF,EAAavhB,YAAYghC,GAGzB,MAAMC,EAAWzkC,SAASwB,cAAc,UACxCijC,EAAShjC,UAAY,0BACrBgjC,EAAS1/B,GAAK,gBACd0/B,EAAS5yB,UAAY,mCACrB4yB,EAAS18B,QAAUqiB,GACnBrF,EAAavhB,YAAYihC,GAGzB,MAAMC,EAAc1kC,SAASwB,cAAc,UAC3CkjC,EAAYjjC,UAAY,6BACxBijC,EAAY3/B,GAAK,mBACjB2/B,EAAY7yB,UAAY,6BACxB6yB,EAAY38B,QAAU,WAClB,MAAM48B,EAAqB3kC,SAASS,cAAc,wBAC9CkkC,GACAA,EAAmBtkC,UAAU8D,IAAI,OAEzC,EACA4gB,EAAavhB,YAAYkhC,GAGzB,MAAME,EAAY5kC,SAASwB,cAAc,UACzCojC,EAAUnjC,UAAY,kCACtBmjC,EAAU7/B,GAAK,wBACf6/B,EAAU/yB,UAAY,0CACtB+yB,EAAU78B,QAAU,WAChB,MAAM48B,EAAqB3kC,SAASS,cAAc,wBAC9CkkC,GACAA,EAAmBtkC,UAAU8D,IAAI,OAEzC,EACA4gB,EAAavhB,YAAYohC,EAC7B,CAGA,MAAMZ,EAAkB,CACpBC,UAAWjkC,SAASS,cAAc,oEAClCyjC,KAAMlkC,SAASS,cAAc,0DAC7B0jC,WAAYnkC,SAASS,cAAc,sEACnC6zB,MAAOt0B,SAASS,cAAc,4DAC9B2jC,SAAUpkC,SAASS,cAAc,kEACjC4jC,cAAerkC,SAASS,cAAc,0BAG1CkH,OAAOk9B,OAAOb,GAAiB//B,SAAQ6D,IAC/BA,GAAUA,EAAO+oB,YACjB/oB,EAAO+oB,WAAWlT,YAAY7V,EAClC,GAER,CAGA,SAASq9C,KACP,MAAM/+B,EAAiBpmB,SAASI,eAAe,mBAC1CgmB,GAED,4BAA4BlP,KAAKC,UAAUC,YAC7CgP,EAAe/lB,UAAU8D,IAAI,mBAEjC,CA3YAnE,SAASC,iBAAiB,oBAAoB,WAC7B,CAAC,WAAY,QAAS,aAAc,eAE5CgE,SAAQyO,IACb,MAAMjM,EAAKzG,SAASI,eAAesS,GAC/BjM,GACFA,EAAGxG,iBAAiB,SAAS,WAC3BqB,KAAKW,MAAMiiD,OAAS,oCACtB,GACF,IAIF,MAAMkB,EAAOplD,SAASI,eAAe,eACjCglD,GACFA,EAAKnlD,iBAAiB,UAAU,SAASU,GAEvCojD,GAAoBpjD,EACtB,GAEJ,IAIAmB,OAAO02B,aAAe,WACpBjE,IAIF,EA+MAzyB,OAAO02B,aAAe,WACpB,MAAMhE,EAASx0B,SAASgE,iBAAiB,uBAEnB,IAAlBwwB,EAAOpjB,QAGTojB,EAAOvwB,SAAQ,CAAC4rB,EAAOjb,KAQnB,GAOR,EA2BA5U,SAASC,iBAAiB,oBAAoB,WAC1C,MAAMglD,EAAiBjlD,SAASS,cAAc,yBAC1CwkD,IACIjlD,SAAS0qB,kBACTu6B,EAAexjD,UAAY,kBAE3BwjD,EAAexjD,UAAY,gBAGvC,IAyGAzB,SAASC,iBAAiB,oBAAoB,WAE5C,MAAMolD,EAAqBvjD,OAAOwM,WACA,mBAAvB+2C,IACTvjD,OAAOwM,WAAa,SAASgR,EAAUC,GACrC8lC,EAAmB/lC,EAAUC,GACZ,oBAAbD,GACF6lC,IAEJ,GAIEnlD,SAASI,eAAe,oBAAoBC,UAAUC,SAAS,YACjE6kD,IAEJ","ignoreList":[],"sourcesContent":["\r\n    \r\n    document.addEventListener('progressSaved', (event) => {\r\n  // If the stage-cascade screen is currently visible, refresh it\r\n  const stageCascadeScreen = document.getElementById(\"stage-cascade-screen\");\r\n  if (stageCascadeScreen && stageCascadeScreen.classList.contains(\"visible\")) {\r\n    console.log(\"Refreshing stage cascade screen after progress save\");\r\n    renderStageCascadeScreen();\r\n  }\r\n});\r\n   \r\n    document.addEventListener('DOMContentLoaded', () => {\r\n    const logoutButton = document.querySelector('.logout-button');\r\n    if (logoutButton) {\r\n        logoutButton.addEventListener('click', handleLogout);\r\n    }\r\n});\r\n\r\ndocument.addEventListener('click', (e) => {\r\n    const sidePanel = document.querySelector('.side-panel');\r\n    const hamburgerButton = document.querySelector('.hamburger-button');\r\n    \r\n    if (sidePanel.classList.contains('open') && \r\n        !sidePanel.contains(e.target) && \r\n        !hamburgerButton.contains(e.target)) {\r\n        toggleSidePanel();\r\n    }\r\n});\r\n\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n    const gameAssets = {\r\n        stages: {}, // Cache stage data\r\n        currentWords: [], // Cache current level words\r\n        particles: new Set() // Reuse particle elements\r\n    };\r\n});\r\n\r\nconst ParticleSystem = {\r\n    particlePool: [],\r\n    maxParticles: 20, // Reduced from 50\r\n    \r\n    init() {\r\n        // Pre-create fewer particles\r\n        for(let i = 0; i < this.maxParticles; i++) {\r\n            const particle = document.createElement('div');\r\n            particle.className = 'particle mobile-particle'; // Add mobile class\r\n            this.particlePool.push(particle);\r\n        }\r\n    },\r\n    \r\n    createParticle(x, y) {\r\n        // Check if mobile before creating\r\n        if (window.innerWidth <= 768) {\r\n            return; // Skip particle creation on mobile\r\n        }\r\n        \r\n        const particle = this.particlePool.pop();\r\n        if (!particle) return;\r\n        \r\n        particle.style.left = `${x}px`;\r\n        particle.style.top = `${y}px`;\r\n        \r\n        setTimeout(() => {\r\n            this.particlePool.push(particle);\r\n        }, 500); // Reduced timeout\r\n    }\r\n};\r\n\r\n\r\n\r\nconst currentArcadeSessionStructure = {\r\n    eventId: null,\r\n    otp: null,\r\n    wordPool: [],\r\n    participants: [], // Player data during game\r\n    teacherId: null,\r\n    wordGoal: 50,\r\n    state: 'pre-start',  // 'pre-start', 'started', 'active', 'ended'\r\n    completedPlayers: [], // Players who reached word goal, in order of completion\r\n    startTime: null,     // When the session started\r\n    endTime: null,       // When the session ended\r\n    \r\n    // Ranks determined by order of completion - only top 3 matter\r\n    podiumRanks: {\r\n        // username: { rank: 1-3, completionTime: timestamp }\r\n    },\r\n    \r\n    // Local player properties\r\n    playerName: null,    // Current player's username\r\n    winnerScreenShown: false // Flag to prevent multiple winner screens\r\n};\r\n\r\n// Use event delegation instead of multiple listeners\r\ndocument.addEventListener('click', (e) => {\r\n    const target = e.target;\r\n    \r\n    if (target.matches('.game-btn')) {\r\n        handleButtonClick(target);\r\n    } else if (target.matches('.level')) {\r\n        handleLevelClick(target);\r\n    }\r\n});\r\n\r\nfunction updateUI() {\r\n    // Batch DOM updates\r\n    requestAnimationFrame(() => {\r\n        const fragment = document.createDocumentFragment();\r\n        // Add elements to fragment\r\n        document.body.appendChild(fragment);\r\n    });\r\n}\r\n\r\nconst CoinsManager = {\r\n    displayElements: new Set(),\r\n    \r\n    initialize() {\r\n        this.displayElements.clear();\r\n        document.querySelectorAll('.coin-count').forEach(display => {\r\n            this.displayElements.add(display);\r\n        });\r\n    },\r\n    \r\n    async loadUserCoins() {\r\n        if (!currentUser) {\r\n            return parseInt(localStorage.getItem('simploxCustomCoins') || '0');\r\n        }\r\n\r\n        try {\r\n            const { data, error } = await supabaseClient\r\n                .from('game_progress')\r\n                .select('coins')\r\n                .eq('user_id', currentUser.id)\r\n                .single();\r\n\r\n            if (error) throw error;\r\n            return data.coins || 0;\r\n        } catch (error) {\r\n            console.error('Error loading coins:', error);\r\n            return 0;\r\n        }\r\n    },\r\n\r\n    async updateCoins(amount) {\r\n        try {\r\n            const oldTotal = gameState.coins;\r\n            const newTotal = oldTotal + amount;\r\n            gameState.coins = newTotal;\r\n\r\n            // Animate all displays\r\n            this.displayElements.forEach(display => {\r\n                let currentValue = oldTotal;\r\n                const duration = 1000;\r\n                const startTime = performance.now();\r\n                \r\n                function animate(currentTime) {\r\n                    const elapsed = currentTime - startTime;\r\n                    const progress = Math.min(elapsed / duration, 1);\r\n                    \r\n                    currentValue = oldTotal + (newTotal - oldTotal) * progress;\r\n                    display.textContent = Math.round(currentValue);\r\n                    \r\n                    if (amount > 0) {\r\n                        display.style.color = 'var(--success)';\r\n                    } else if (amount < 0) {\r\n                        display.style.color = 'var(--error)';\r\n                    }\r\n                    \r\n                    if (progress < 1) {\r\n                        requestAnimationFrame(animate);\r\n                    } else {\r\n                        display.textContent = newTotal;\r\n                        setTimeout(() => {\r\n                            display.style.color = 'var(--text)';\r\n                        }, 300);\r\n                    }\r\n                }\r\n                \r\n                requestAnimationFrame(animate);\r\n            });\r\n\r\n            // Save to database/localStorage\r\n            if (currentUser) {\r\n                const { error } = await supabaseClient\r\n                    .from('game_progress')\r\n                    .update({ coins: newTotal })\r\n                    .eq('user_id', currentUser.id);\r\n\r\n                if (error) throw error;\r\n            } else {\r\n                localStorage.setItem('simploxCustomCoins', newTotal.toString());\r\n            }\r\n\r\n            // Update perk buttons based on new coin total\r\n            updatePerkButtons();\r\n            return true;\r\n\r\n        } catch (error) {\r\n            console.error('Failed to update coins:', error);\r\n            this.displayElements.forEach(display => {\r\n                display.textContent = gameState.coins - amount;\r\n            });\r\n            updatePerkButtons();  // Also update buttons on error\r\n            return false;\r\n        }\r\n    },\r\n\r\n    updateDisplays() {\r\n        this.displayElements.forEach(display => {\r\n            display.textContent = gameState.coins;\r\n        });\r\n        updatePerkButtons();  // Update buttons whenever displays are updated\r\n    }\r\n};\r\n\r\nconst WordsManager = {\r\n  displayElements: new Set(),\r\n  \r\n  initialize() {\r\n    this.displayElements.clear();\r\n    document.querySelectorAll(\"#totalWords\").forEach(el => {\r\n      this.displayElements.add(el);\r\n    });\r\n    \r\n    // Initialize word counts for logged-in users\r\n    if (currentUser) {\r\n      this.loadUserWords().then(wordCount => {\r\n        this.updateDisplays(wordCount);\r\n      });\r\n    }\r\n  },\r\n  \r\n  async loadUserWords() {\r\n    if (!currentUser) return 0;\r\n    \r\n    try {\r\n      const { data, error } = await supabaseClient\r\n        .from(\"player_stats\")\r\n        .select(\"unique_words_practiced\")\r\n        .eq(\"user_id\", currentUser.id)\r\n        .single();\r\n        \r\n      if (error) throw error;\r\n      return data?.unique_words_practiced || 0;\r\n    } catch (err) {\r\n      console.error(\"Error loading words:\", err);\r\n      return 0;\r\n    }\r\n  },\r\n  \r\n  async updateWords(count) {\r\n    try {\r\n      const currentCount = parseInt(document.getElementById(\"totalWords\").textContent) || 0;\r\n      const newCount = currentCount + count;\r\n      \r\n      this.displayElements.forEach(el => {\r\n        let value = currentCount;\r\n        const startTime = performance.now();\r\n        \r\n        requestAnimationFrame(function updateValue(timestamp) {\r\n          const elapsed = timestamp - startTime;\r\n          const progress = Math.min(elapsed / 1000, 1);\r\n          \r\n          value = currentCount + (newCount - currentCount) * progress;\r\n          el.textContent = Math.round(value);\r\n          \r\n          if (progress < 1) {\r\n            requestAnimationFrame(updateValue);\r\n          } else {\r\n            el.textContent = newCount;\r\n          }\r\n        });\r\n      });\r\n      \r\n      if (currentUser) {\r\n        const { error } = await supabaseClient\r\n          .from(\"player_stats\")\r\n          .update({ unique_words_practiced: newCount })\r\n          .eq(\"user_id\", currentUser.id);\r\n          \r\n        if (error) throw error;\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Failed to update words:\", err);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  updateDisplays(count) {\r\n    this.displayElements.forEach(el => {\r\n      el.textContent = count;\r\n    });\r\n  }\r\n};\r\n\r\n\r\nconst perkButtons = {\r\n    timeFreeze: document.getElementById('timeFreezePerk'),\r\n    skip: document.getElementById('skipPerk'),\r\n    clue: document.getElementById('cluePerk'),\r\n    reveal: document.getElementById('revealPerk')\r\n};\r\n\r\n// REPLACE the perk button initialization\r\nObject.entries(perkButtons).forEach(([perkType, button]) => {\r\n    if (button) {\r\n        button.onclick = () => buyPerk(perkType);\r\n    }\r\n});\r\n\r\nconst GameTimer = {\r\n    lastTick: 0,\r\n    \r\n    update(timestamp) {\r\n        if (!this.lastTick) this.lastTick = timestamp;\r\n        const delta = timestamp - this.lastTick;\r\n        \r\n        if (delta >= 1000) { // Update every second\r\n            this.updateTimer();\r\n            this.lastTick = timestamp;\r\n        }\r\n        \r\n        requestAnimationFrame(this.update.bind(this));\r\n    }\r\n};\r\n\r\nfunction cleanupLevel() {\r\n    // Clear unused event listeners\r\n    document.querySelectorAll('.buttons button').forEach(btn => {\r\n        btn.onclick = null;\r\n    });\r\n    \r\n    // Clear particle effects\r\n    ParticleSystem.clear();\r\n    \r\n    // Clear timeouts\r\n    clearTimeout(levelTimeout);\r\n}\r\n\r\n\r\nasync function transitionScreen(screenType) {\r\n    const currentScreen = document.querySelector('.screen.visible');\r\n    if (currentScreen) {\r\n        currentScreen.style.opacity = 0;\r\n        await new Promise(r => setTimeout(r, 300));\r\n        currentScreen.style.display = 'none';\r\n    }\r\n    \r\n    const nextScreen = document.getElementById(`${screenType}-screen`);\r\n    nextScreen.style.display = 'flex';\r\n    requestAnimationFrame(() => {\r\n        nextScreen.style.opacity = 1;\r\n    });\r\n}\r\n\r\nconst GameCache = {\r\n    words: new Map(),\r\n    \r\n    async getWords(setId) {\r\n        if (this.words.has(setId)) {\r\n            return this.words.get(setId);\r\n        }\r\n        \r\n        const words = await loadWords(setId);\r\n        this.words.set(setId, words);\r\n        return words;\r\n    }\r\n};\r\n\r\nconst gameInit = {\r\n    async init() {\r\n        console.log(\"Game initialization starting\");\r\n        \r\n        // First check for existing session\r\n        await checkExistingSession();\r\n        \r\n        if (currentUser) {\r\n            console.log(\"User is logged in, checking database schema\");\r\n            // Check and fix database schema\r\n            const schemaOk = await ensureCorrectSchema();\r\n            \r\n            if (schemaOk) {\r\n                // Load progress from database\r\n                console.log(\"Schema is OK, loading progress from database\");\r\n                await loadUserGameProgress(currentUser.id);\r\n            } else {\r\n                console.log(\"Schema issues detected, loading from localStorage and initializing defaults\");\r\n                // Initialize from localStorage or defaults\r\n                initializeGame();\r\n            }\r\n        } else {\r\n            console.log(\"No user logged in, initializing local game state\");\r\n            // Initialize default game state\r\n            initializeGame();\r\n        }\r\n        \r\n        // Update UI elements\r\n        updatePerkButtons();\r\n        initializeParticles(document.getElementById(\"welcome-screen\"));\r\n        \r\n        // Load custom lists\r\n        await loadCustomLists();\r\n        \r\n        // Set up auto-save\r\n        setupAutoSave();\r\n        \r\n        // Log the final game state\r\n        console.log(\"Game initialization complete. Game state:\", {\r\n            currentStage: gameState.currentStage,\r\n            currentSet: gameState.currentSet, \r\n            currentLevel: gameState.currentLevel,\r\n            unlockedSets: Object.keys(gameState.unlockedSets || {}),\r\n            unlockedLevels: Object.keys(gameState.unlockedLevels || {})\r\n        });\r\n    }\r\n};\r\n\r\n// Replace window.onload with:\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    gameInit.init();\r\n});\r\n\r\nconst { createClient } = supabase;\r\nconst supabaseClient = createClient(\r\n    'https://mczfgzffyyyacisrccqb.supabase.co',\r\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1jemZnemZmeXl5YWNpc3JjY3FiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgzODYyMDQsImV4cCI6MjA1Mzk2MjIwNH0.rLga_B29Coz1LMeJzFTGLIhckdcojGXnD1ae1bw-QAI',\r\n    {\r\n        persistSession: true,\r\n        autoRefreshToken: true,\r\n        detectSessionInUrl: true\r\n    }\r\n);\r\n\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n   try {\r\n       // Define CustomListsManager first before any functions try to use it\r\n       if (!window.CustomListsManager) {\r\n           window.CustomListsManager = {\r\n               lists: [],\r\n               \r\n               async initialize() {\r\n                   if (currentUser) {\r\n                       await this.loadFromSupabase();\r\n                   } else {\r\n                       this.loadFromLocalStorage();\r\n                   }\r\n               },\r\n               \r\n               async loadFromSupabase() {\r\n                   try {\r\n                       const { data, error } = await supabaseClient\r\n                           .from('custom_lists')\r\n                           .select('*')\r\n                           .or(`user_id.eq.${currentUser.id},shared_with.cs.{${currentUser.id}}`);\r\n                           \r\n                       if (error) throw error;\r\n                       \r\n                       this.lists = data.map(item => ({\r\n                           id: item.id,\r\n                           name: item.name,\r\n                           words: item.words || [],\r\n                           translations: item.translations || [],\r\n                           isShared: item.is_shared,\r\n                           sharedBy: item.shared_by,\r\n                           userId: item.user_id,\r\n                           createdAt: item.created_at\r\n                       }));\r\n                       \r\n                       console.log('Loaded lists from Supabase:', this.lists.length);\r\n                   } catch (error) {\r\n                       console.error('Error loading lists from Supabase:', error);\r\n                       this.lists = [];\r\n                   }\r\n               },\r\n               \r\n               loadFromLocalStorage() {\r\n                   try {\r\n                       const savedLists = localStorage.getItem('simploxCustomLists');\r\n                       this.lists = savedLists ? JSON.parse(savedLists) : [];\r\n                       console.log('Loaded lists from localStorage:', this.lists.length);\r\n                   } catch (error) {\r\n                       console.error('Error loading lists from localStorage:', error);\r\n                       this.lists = [];\r\n                   }\r\n               },\r\n               \r\n               async save(list) {\r\n                   if (!list) return null;\r\n                   \r\n                   if (currentUser) {\r\n                       return await this.saveToSupabase(list);\r\n                   } else {\r\n                       return this.saveToLocalStorage(list);\r\n                   }\r\n               },\r\n               \r\n               async saveToSupabase(list) {\r\n                   try {\r\n                       const listData = {\r\n                           name: list.name,\r\n                           words: list.words || [],\r\n                           translations: list.translations || [],\r\n                           user_id: currentUser.id\r\n                       };\r\n                       \r\n                       if (list.id && typeof list.id === 'string' && list.id.length === 36) {\r\n                           const { data, error } = await supabaseClient\r\n                               .from('custom_lists')\r\n                               .update(listData)\r\n                               .eq('id', list.id)\r\n                               .select()\r\n                               .single();\r\n                               \r\n                           if (error) throw error;\r\n                           return data;\r\n                       } else {\r\n                           const { data, error } = await supabaseClient\r\n                               .from('custom_lists')\r\n                               .insert(listData)\r\n                               .select()\r\n                               .single();\r\n                               \r\n                           if (error) throw error;\r\n                           \r\n                           const index = this.lists.findIndex(l => \r\n                               l.id === list.id || \r\n                               (l.tempId && l.tempId === list.tempId));\r\n                               \r\n                           if (index !== -1) {\r\n                               this.lists[index] = {\r\n                                   ...data,\r\n                                   words: data.words || [],\r\n                                   translations: data.translations || []\r\n                               };\r\n                           } else {\r\n                               this.lists.push({\r\n                                   ...data,\r\n                                   words: data.words || [],\r\n                                   translations: data.translations || []\r\n                               });\r\n                           }\r\n                           \r\n                           return data;\r\n                       }\r\n                   } catch (error) {\r\n                       console.error('Error saving list to Supabase:', error);\r\n                       return null;\r\n                   }\r\n               },\r\n               \r\n               saveToLocalStorage(list) {\r\n                   try {\r\n                       const newList = {\r\n                           ...list,\r\n                           id: list.id || Date.now(),\r\n                           tempId: list.tempId || Date.now()\r\n                       };\r\n                       \r\n                       const index = this.lists.findIndex(l => \r\n                           l.id === list.id || \r\n                           (l.tempId && l.tempId === list.tempId));\r\n                           \r\n                       if (index !== -1) {\r\n                           this.lists[index] = newList;\r\n                       } else {\r\n                           this.lists.push(newList);\r\n                       }\r\n                       \r\n                       localStorage.setItem('simploxCustomLists', JSON.stringify(this.lists));\r\n                       return newList;\r\n                   } catch (error) {\r\n                       console.error('Error saving list to localStorage:', error);\r\n                       return null;\r\n                   }\r\n               },\r\n               \r\n               async delete(listId) {\r\n                   if (currentUser) {\r\n                       try {\r\n                           if (typeof listId === 'string' && listId.length === 36) {\r\n                               const { error } = await supabaseClient\r\n                                   .from('custom_lists')\r\n                                   .delete()\r\n                                   .eq('id', listId);\r\n                                   \r\n                               if (error) throw error;\r\n                           }\r\n                           \r\n                           this.lists = this.lists.filter(list => list.id !== listId);\r\n                           return true;\r\n                       } catch (error) {\r\n                           console.error('Error deleting list from Supabase:', error);\r\n                           return false;\r\n                       }\r\n                   } else {\r\n                       this.lists = this.lists.filter(list => list.id !== listId);\r\n                       localStorage.setItem('simploxCustomLists', JSON.stringify(this.lists));\r\n                       return true;\r\n                   }\r\n               },\r\n               \r\n               async share(listId, recipientId) {\r\n                   if (!currentUser) return false;\r\n                   \r\n                   try {\r\n                       const list = this.lists.find(l => l.id === listId);\r\n                       if (!list) return false;\r\n                       \r\n                       const result = await supabaseClient.rpc('insert_shared_list', {\r\n                           p_user_id: recipientId,\r\n                           p_name: `${list.name} (Shared by ${currentUser.user_metadata?.username || 'User'})`,\r\n                           p_words: list.words || [],\r\n                           p_translations: list.translations || [],\r\n                           p_is_shared: true,\r\n                           p_local_id: Date.now(),\r\n                           p_shared_with: [recipientId],\r\n                           p_shared_by: currentUser.id\r\n                       });\r\n                       \r\n                       return !result.error;\r\n                   } catch (error) {\r\n                       console.error('Error sharing list:', error);\r\n                       return false;\r\n                   }\r\n               },\r\n               \r\n               getListLimits() {\r\n                   if (!currentUser) {\r\n                       return {\r\n                           maxLists: 3,\r\n                           maxWords: 10,\r\n                           maxPlays: 5,\r\n                           canShare: false,\r\n                           playDisplay: '5'\r\n                       };\r\n                   }\r\n                   \r\n                   const userStatus = currentUser.status || 'free';\r\n                   \r\n                   switch(userStatus) {\r\n                       case 'premium':\r\n                           return {\r\n                               maxLists: 30,\r\n                               maxWords: 50,\r\n                               maxPlays: Infinity,\r\n                               canShare: true,\r\n                               playDisplay: '∞'\r\n                           };\r\n                       case 'pending':\r\n                           return {\r\n                               maxLists: 30,\r\n                               maxWords: 50,\r\n                               maxPlays: Infinity,\r\n                               canShare: false,\r\n                               playDisplay: '∞'\r\n                           };\r\n                       case 'free':\r\n                           return {\r\n                               maxLists: 5,\r\n                               maxWords: 20,\r\n                               maxPlays: 10,\r\n                               canShare: false,\r\n                               playDisplay: '10'\r\n                           };\r\n                       default:\r\n                           return {\r\n                               maxLists: 3,\r\n                               maxWords: 10,\r\n                               maxPlays: 5,\r\n                               canShare: false,\r\n                               playDisplay: '5'\r\n                           };\r\n                   }\r\n               },\r\n               \r\n               canCreateMoreLists() {\r\n                   const limits = this.getListLimits();\r\n                   return this.lists.length < limits.maxLists;\r\n               }\r\n           };\r\n       }\r\n       \r\n       // Next, check session and initialize the game\r\n       await checkExistingSession();\r\n       initializeGame();\r\n       updatePerkButtons();\r\n       updateGuestPlayButton();\r\n       \r\n       // Initialize managers in correct order\r\n       CoinsManager.initialize();\r\n       WordsManager.initialize();\r\n       await CustomListsManager.initialize();\r\n\r\n       // Load initial coins\r\n       if (currentUser) {\r\n           gameState.coins = await CoinsManager.loadUserCoins();\r\n           CoinsManager.updateDisplays();\r\n           \r\n           const words = await WordsManager.loadUserWords();\r\n           WordsManager.updateDisplays(words);\r\n       }\r\n       \r\n       // Handle QR code joining\r\n       window.addEventListener('hashchange', handleHashChange);\r\n       window.addEventListener('load', handleHashChange);\r\n       \r\n       // Check for join hash on initial load\r\n       if (window.location.hash.startsWith('#join=')) {\r\n           console.log('Initial join hash detected');\r\n           const otp = window.location.hash.replace('#join=', '');\r\n           history.pushState(\"\", document.title, window.location.pathname);\r\n           showJoinModal(otp);\r\n       }\r\n\r\n       // Ensure particles on welcome screen\r\n       const welcomeScreen = document.getElementById('welcome-screen');\r\n       initializeParticles(welcomeScreen);\r\n       \r\n       // Mobile fullscreen handling\r\n       if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\r\n           // Request on first touch\r\n           document.addEventListener('touchstart', function onFirstTouch() {\r\n               document.removeEventListener('touchstart', onFirstTouch);\r\n           }, { once: true });\r\n           \r\n           // Request when clicking any button\r\n           document.addEventListener('click', function(e) {\r\n               if (e.target.tagName === 'BUTTON') {\r\n               }\r\n           });\r\n           \r\n           // Screen orientation handling\r\n           if (screen.orientation) {\r\n               screen.orientation.lock('portrait')\r\n                   .catch(err => console.log('Failed to lock orientation:', err));\r\n           }\r\n       }\r\n\r\n       // OTP input handling\r\n       const otpInput = document.getElementById('otpInput');\r\n       if (otpInput) {\r\n           otpInput.addEventListener('input', function(e) {\r\n               // Remove any non-numeric characters\r\n               this.value = this.value.replace(/[^0-9]/g, '');\r\n               \r\n               // Limit to 4 digits\r\n               if (this.value.length > 4) {\r\n                   this.value = this.value.slice(0, 4);\r\n               }\r\n           });\r\n       }\r\n\r\n       // Initialize real-time channels if user is logged in\r\n       if (currentUser) {\r\n           setupUserStatusSubscription();\r\n           initializeStatusCheck();\r\n       }\r\n   } catch (error) {\r\n       console.error('Initialization error:', error);\r\n   }\r\n});\r\n\r\nfunction showJoinModal(otp = \"\") {\r\n  console.log(\"Opening join modal with OTP:\", otp);\r\n  const modal = document.getElementById(\"arcade-modal\");\r\n  const teacherView = document.getElementById(\"teacher-view\");\r\n  const playerView = document.getElementById(\"player-view\");\r\n  const otpInput = document.getElementById(\"otpInput\");\r\n  \r\n  if (modal) {\r\n    modal.style.display = \"block\";\r\n    if (teacherView) teacherView.style.display = \"none\";\r\n    if (playerView) playerView.style.display = \"block\";\r\n    \r\n    // Clear previous inputs and displays\r\n    if (otpInput) otpInput.value = \"\";\r\n    const usernameInput = document.getElementById(\"arcadeUsername\");\r\n    if (usernameInput) {\r\n      usernameInput.value = \"\";\r\n      usernameInput.readOnly = false;\r\n      usernameInput.style.display = \"block\";\r\n      \r\n      // Remove any previous username display element\r\n      const usernameDisplay = usernameInput.closest(\".input-group\")?.querySelector(\".username-display\");\r\n      if (usernameDisplay) {\r\n        usernameDisplay.remove();\r\n      }\r\n      \r\n      // Set new OTP if provided\r\n      if (otpInput && otp) {\r\n        otpInput.value = otp;\r\n        setTimeout(() => usernameInput.focus(), 300);\r\n      }\r\n    }\r\n    \r\n    // Check if currentUser exists before using it\r\n    if (typeof currentUser !== 'undefined' && currentUser) {\r\n      try {\r\n        const username = currentUser.user_metadata?.username || currentUser.email.split(\"@\")[0];\r\n        if (usernameInput && username) {\r\n          usernameInput.value = username;\r\n          usernameInput.readOnly = true;\r\n          usernameInput.style.display = \"none\";\r\n          \r\n          const inputGroup = usernameInput.closest(\".input-group\");\r\n          if (inputGroup && !inputGroup.querySelector(\".username-display\")) {\r\n            const usernameDisplay = document.createElement(\"div\");\r\n            usernameDisplay.className = \"username-display\";\r\n            usernameDisplay.textContent = `Joining as: ${username}`;\r\n            inputGroup.insertBefore(usernameDisplay, usernameInput);\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error setting username in arcade modal:\", e);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleSignup() {\r\n  const email = document.getElementById(\"signupEmail\").value;\r\n  const username = document.getElementById(\"signupUsername\").value;\r\n  const password = document.getElementById(\"signupPassword\").value;\r\n\r\n  if (email && username && password) {\r\n    try {\r\n      // 1. Sign up the user\r\n      const { data: authData, error: authError } = await supabaseClient.auth.signUp({\r\n        email: email,\r\n        password: password,\r\n        options: {\r\n          data: {\r\n            username: username,\r\n            full_name: username\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (authError) throw authError;\r\n      \r\n      // 2. Create the user profile\r\n      const { error: profileError } = await supabaseClient\r\n        .from(\"user_profiles\")\r\n        .upsert({\r\n          id: authData.user.id,\r\n          username: username,\r\n          email: email,\r\n          status: \"free\",\r\n          role: \"student\"\r\n        }, { onConflict: \"id\" });\r\n      \r\n      if (profileError) {\r\n        console.error(\"Profile upsert error:\", profileError);\r\n      }\r\n      \r\n      // 3. Check if game progress exists and create if needed\r\n      const { data: existingProgress, error: progressCheckError } = await supabaseClient\r\n        .from(\"game_progress\")\r\n        .select(\"user_id\")\r\n        .eq(\"user_id\", authData.user.id)\r\n        .single();\r\n      \r\n      // Only insert if record doesn't exist\r\n      if (progressCheckError && progressCheckError.code === \"PGRST116\") {\r\n        const gameProgressData = {\r\n          user_id: authData.user.id,\r\n          stage: 1,\r\n          set_number: 1,\r\n          level: 1,\r\n          coins: 0,\r\n          perks: {},\r\n          unlocked_sets: {1: [1]},\r\n          unlocked_levels: {\"1_1\": [1]},\r\n          perfect_levels: [],\r\n          completed_levels: []\r\n        };\r\n        \r\n        const { error: insertProgressError } = await supabaseClient\r\n          .from(\"game_progress\")\r\n          .insert([gameProgressData]);\r\n        \r\n        if (insertProgressError && insertProgressError.code !== \"23505\") {\r\n          // Log error but continue if it's not a duplicate key error\r\n          console.error(\"Game progress initialization error:\", insertProgressError);\r\n        }\r\n      }\r\n      \r\n      // 4. Check if player stats exists and create if needed\r\n      const { data: existingStats, error: statsCheckError } = await supabaseClient\r\n        .from(\"player_stats\")\r\n        .select(\"user_id\")\r\n        .eq(\"user_id\", authData.user.id)\r\n        .single();\r\n      \r\n      // Only insert if record doesn't exist\r\n      if (statsCheckError && statsCheckError.code === \"PGRST116\") {\r\n        const playerStatsData = {\r\n          user_id: authData.user.id,\r\n          total_levels_completed: 0,\r\n          unique_words_practiced: 0\r\n        };\r\n        \r\n        const { error: insertStatsError } = await supabaseClient\r\n          .from(\"player_stats\")\r\n          .insert([playerStatsData]);\r\n        \r\n        if (insertStatsError && insertStatsError.code !== \"23505\") {\r\n          // Log error but continue if it's not a duplicate key error\r\n          console.error(\"Player stats initialization error:\", insertStatsError);\r\n        }\r\n      }\r\n      \r\n      // 5. Sign in the user\r\n      const { data: signInData, error: signInError } = await supabaseClient.auth.signInWithPassword({\r\n        email: email,\r\n        password: password\r\n      });\r\n      \r\n      if (signInError) throw signInError;\r\n      \r\n      // 6. Update the UI and game state\r\n      hideAuthModal();\r\n      currentUser = signInData.user;\r\n      gameState.currentStage = 1;\r\n      gameState.currentSet = 1;\r\n      gameState.currentLevel = 1;\r\n      gameState.coins = 0;\r\n      gameState.perks = {};\r\n      gameState.unlockedSets = {1: new Set([1])};\r\n      gameState.unlockedLevels = {\"1_1\": new Set([1])};\r\n      gameState.perfectLevels = new Set;\r\n      gameState.completedLevels = new Set;\r\n      updateAuthUI();\r\n      showScreen(\"welcome-screen\");\r\n      \r\n    } catch (error) {\r\n      console.error(\"Detailed signup error:\", error);\r\n      if (error.message && error.message.includes(\"duplicate key\")) {\r\n        alert(\"This username or email is already taken. Please try another.\");\r\n      } else {\r\n        alert(\"Signup error: \" + error.message);\r\n      }\r\n    }\r\n  } else {\r\n    alert(\"All fields are required\");\r\n  }\r\n}\r\n\r\n// Add this helper function to safely upsert records\r\nasync function safeUpsertRecord(table, data, keyField = 'user_id') {\r\n  try {\r\n    // First check if the record exists\r\n    const { data: existingData, error: checkError } = await supabaseClient\r\n      .from(table)\r\n      .select(keyField)\r\n      .eq(keyField, data[keyField])\r\n      .single();\r\n    \r\n    if (checkError && checkError.code === \"PGRST116\") {\r\n      // Record doesn't exist, try to insert it\r\n      const { error: insertError } = await supabaseClient\r\n        .from(table)\r\n        .insert([data]);\r\n      \r\n      if (insertError) {\r\n        // If insert fails with a duplicate key error, try to update instead\r\n        if (insertError.code === \"23505\") {\r\n          const { error: updateError } = await supabaseClient\r\n            .from(table)\r\n            .update(data)\r\n            .eq(keyField, data[keyField]);\r\n          \r\n          if (updateError) {\r\n            console.error(`Error updating ${table}:`, updateError);\r\n            return false;\r\n          }\r\n        } else {\r\n          console.error(`Error inserting into ${table}:`, insertError);\r\n          return false;\r\n        }\r\n      }\r\n    } else if (!checkError) {\r\n      // Record exists, update it\r\n      const { error: updateError } = await supabaseClient\r\n        .from(table)\r\n        .update(data)\r\n        .eq(keyField, data[keyField]);\r\n      \r\n      if (updateError) {\r\n        console.error(`Error updating ${table}:`, updateError);\r\n        return false;\r\n      }\r\n    } else {\r\n      console.error(`Error checking ${table}:`, checkError);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Unexpected error in safeUpsertRecord for ${table}:`, error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function updateUserCoins(amount) {\r\n    // Update local game state\r\n    const previousCoins = gameState.coins;\r\n    gameState.coins += amount;\r\n    \r\n    // Update UI\r\n    updateAllCoinDisplays();\r\n    updatePerkButtons();\r\n    \r\n    // Save to database if logged in\r\n    if (currentUser) {\r\n        try {\r\n            const { error } = await supabaseClient\r\n                .from(\"game_progress\")\r\n                .update({ coins: gameState.coins })\r\n                .eq(\"user_id\", currentUser.id);\r\n                \r\n            if (error) {\r\n                console.error(\"Failed to update coins in database:\", error);\r\n                // Revert local change if database save fails\r\n                gameState.coins = previousCoins;\r\n                updateAllCoinDisplays();\r\n                updatePerkButtons();\r\n                return false;\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error updating coins:\", err);\r\n            // Revert local change\r\n            gameState.coins = previousCoins;\r\n            updateAllCoinDisplays();\r\n            updatePerkButtons();\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // Also save to localStorage\r\n    const progressData = JSON.parse(localStorage.getItem(\"simploxProgress\") || \"{}\");\r\n    progressData.coins = gameState.coins;\r\n    localStorage.setItem(\"simploxProgress\", JSON.stringify(progressData));\r\n    \r\n    return true;\r\n}\r\n\r\n// Add this function to handle database schema upgrade\r\nasync function checkAndFixDatabaseSchema() {\r\n    if (!currentUser) return false;\r\n    \r\n    try {\r\n        // First check the schema\r\n        const { data, error } = await supabaseClient\r\n            .from(\"game_progress\")\r\n            .select(\"*\")\r\n            .eq(\"user_id\", currentUser.id)\r\n            .single();\r\n            \r\n        if (error) {\r\n            console.error(\"Error checking database schema:\", error);\r\n            return false;\r\n        }\r\n        \r\n        // Check if we need to add the missing columns\r\n        const missingCompletedLevels = !('completed_levels' in data);\r\n        const missingPerfectLevels = !('perfect_levels' in data);\r\n        \r\n        if (!missingCompletedLevels && !missingPerfectLevels) {\r\n            console.log(\"Database schema is up to date\");\r\n            return true;\r\n        }\r\n        \r\n        console.log(\"Adding missing columns to database schema\");\r\n        \r\n        // Create a migration update with the minimal required fields\r\n        const updateData = {\r\n            user_id: currentUser.id,\r\n            stage: data.stage || 1,\r\n            set_number: data.set_number || 1,\r\n            level: data.level || 1\r\n        };\r\n        \r\n        // Try to preserve existing data\r\n        if ('coins' in data) updateData.coins = data.coins || 0;\r\n        if ('unlocked_sets' in data) updateData.unlocked_sets = data.unlocked_sets || {};\r\n        if ('unlocked_levels' in data) updateData.unlocked_levels = data.unlocked_levels || {};\r\n        \r\n        // Add the missing columns with default values\r\n        if (missingCompletedLevels) updateData.completed_levels = [];\r\n        if (missingPerfectLevels) updateData.perfect_levels = [];\r\n        \r\n        // Update the record\r\n        const { error: updateError } = await supabaseClient\r\n            .from(\"game_progress\")\r\n            .update(updateData)\r\n            .eq(\"user_id\", currentUser.id);\r\n            \r\n        if (updateError) {\r\n            console.error(\"Failed to update database schema:\", updateError);\r\n            return false;\r\n        }\r\n        \r\n        console.log(\"Database schema successfully updated\");\r\n        return true;\r\n    } catch (err) {\r\n        console.error(\"Error fixing database schema:\", err);\r\n        return false;\r\n    }\r\n}\r\n\r\nasync function initializeGameProgressForUser(userId) {\r\n    const { error } = await supabaseClient\r\n        .from('game_progress')\r\n        .insert({\r\n            user_id: userId,\r\n            stage: 1,\r\n            set_number: 1,\r\n            level: 1,\r\n            coins: 0,\r\n            perks: {},\r\n            unlocked_sets: { \"1\": [1] },\r\n            unlocked_levels: { \"1_1\": [1] },\r\n            perfect_levels: [],\r\n            completed_levels: []\r\n        });\r\n\r\n    if (error) {\r\n        console.error('Error initializing game progress:', error);\r\n    }\r\n}\r\n\r\nasync function handleLogin() {\r\n    const loginInput = document.getElementById('loginUsername').value;\r\n    const password = document.getElementById('loginPassword').value;\r\n    \r\n    if (!loginInput || !password) {\r\n        alert('Please enter both username/email and password');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Determine if input is an email or username\r\n        const isEmail = loginInput.includes('@');\r\n        \r\n        let loginMethod;\r\n        if (isEmail) {\r\n            // Login with email\r\n            loginMethod = supabaseClient.auth.signInWithPassword({\r\n                email: loginInput,\r\n                password: password\r\n            });\r\n        } else {\r\n            // Login with username\r\n            const { data: userProfile, error: profileError } = await supabaseClient\r\n                .from('user_profiles')\r\n                .select('email')\r\n                .eq('username', loginInput)\r\n                .single();\r\n\r\n            if (profileError || !userProfile) {\r\n                alert('Username not found');\r\n                return;\r\n            }\r\n\r\n            loginMethod = supabaseClient.auth.signInWithPassword({\r\n                email: userProfile.email,\r\n                password: password\r\n            });\r\n        }\r\n\r\n        const { data, error } = await loginMethod;\r\n\r\n        if (error) {\r\n            console.error('Login Error:', error);\r\n            alert(error.message);\r\n            return;\r\n        }\r\n\r\n        if (data.user) {\r\n            currentUser = data.user;\r\n            \r\n            // Hide auth modal first\r\n            hideAuthModal();\r\n            \r\n            // Then update UI and load data\r\n            const { data: profile } = await supabaseClient\r\n                .from('user_profiles')\r\n                .select('status')\r\n                .eq('id', currentUser.id)\r\n                .single();\r\n                \r\n            if (profile) {\r\n                currentUser.status = profile.status;\r\n                updateUserStatusDisplay(profile.status);\r\n            }\r\n\r\n            await Promise.all([\r\n                loadCustomLists(),\r\n                loadUserGameProgress(currentUser.id)\r\n            ]);\r\n\r\n            updateAuthUI();\r\n            updateGuestPlayButton();\r\n            showScreen('welcome-screen');\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Unexpected Login Error:', error);\r\n        alert('An unexpected error occurred during login');\r\n    }\r\n}\r\n\r\nfunction initializeGame() {\r\n    console.log(\"Initializing game state\");\r\n    \r\n    // Default initial values\r\n    gameState.currentStage = 1;\r\n    gameState.currentSet = 1;\r\n    gameState.currentLevel = 1;\r\n    gameState.coins = 0;\r\n    gameState.perks = {};\r\n    gameState.unlockedSets = {};\r\n    gameState.unlockedLevels = {};\r\n    gameState.perfectLevels = new Set();\r\n    gameState.completedLevels = new Set();\r\n    \r\n    // Check localStorage for saved progress (for guest users or as backup)\r\n    const savedProgress = localStorage.getItem(\"simploxProgress\");\r\n    if (savedProgress) {\r\n        try {\r\n            console.log(\"Found saved progress in localStorage\");\r\n            const progress = JSON.parse(savedProgress);\r\n            \r\n            // Load basic game state\r\n            if (progress.stage) gameState.currentStage = progress.stage;\r\n            if (progress.set_number) gameState.currentSet = progress.set_number;\r\n            if (progress.level) gameState.currentLevel = progress.level;\r\n            if (progress.coins) gameState.coins = progress.coins;\r\n            if (progress.perks) gameState.perks = progress.perks;\r\n            \r\n            // Load unlocked sets\r\n            if (progress.unlocked_sets) {\r\n                Object.entries(progress.unlocked_sets).forEach(([stage, sets]) => {\r\n                    gameState.unlockedSets[stage] = new Set(Array.isArray(sets) ? sets : []);\r\n                });\r\n            }\r\n            \r\n            // Load unlocked levels\r\n            if (progress.unlocked_levels) {\r\n                Object.entries(progress.unlocked_levels).forEach(([setKey, levels]) => {\r\n                    gameState.unlockedLevels[setKey] = new Set(Array.isArray(levels) ? levels : []);\r\n                });\r\n            }\r\n            \r\n            // Load perfect and completed levels\r\n            if (progress.perfect_levels) {\r\n                gameState.perfectLevels = new Set(progress.perfect_levels);\r\n            }\r\n            \r\n            if (progress.completed_levels) {\r\n                gameState.completedLevels = new Set(progress.completed_levels);\r\n            }\r\n            \r\n            console.log(\"Loaded progress from localStorage:\", {\r\n                currentStage: gameState.currentStage,\r\n                currentSet: gameState.currentSet,\r\n                currentLevel: gameState.currentLevel\r\n            });\r\n        } catch (e) {\r\n            console.error(\"Error parsing saved progress:\", e);\r\n        }\r\n    }\r\n    \r\n    // Check for game context which has precedence for the current level\r\n    const savedContext = localStorage.getItem(\"gameContext\");\r\n    if (savedContext) {\r\n        try {\r\n            const context = JSON.parse(savedContext);\r\n            const timeSinceContext = Date.now() - (context.timestamp || 0);\r\n            \r\n            // Only use context if it's less than 24 hours old\r\n            if (timeSinceContext < 24 * 60 * 60 * 1000) {\r\n                console.log(\"Found recent game context, updating current location:\", context);\r\n                if (context.stage) gameState.currentStage = context.stage;\r\n                if (context.set) gameState.currentSet = context.set;\r\n                if (context.level) gameState.currentLevel = context.level;\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error parsing saved context:\", e);\r\n        }\r\n    }\r\n    \r\n    // Ensure we have default unlocks regardless\r\n    setupDefaultUnlocks();\r\n    \r\n    updateAllCoinDisplays();\r\n    updatePerkButtons();\r\n    \r\n    console.log(\"Game initialized with state:\", {\r\n        currentStage: gameState.currentStage,\r\n        currentSet: gameState.currentSet,\r\n        currentLevel: gameState.currentLevel\r\n    });\r\n}\r\n\r\nfunction setupDefaultUnlocks() {\r\n    // Stage 1: Level 1 of all sets should be unlocked\r\n    if (!gameState.unlockedSets[1]) {\r\n        gameState.unlockedSets[1] = new Set();\r\n    }\r\n    for (let i = 1; i <= 9; i++) {\r\n        gameState.unlockedSets[1].add(i);\r\n        const setKey = `1_${i}`;\r\n        if (!gameState.unlockedLevels[setKey]) {\r\n            gameState.unlockedLevels[setKey] = new Set([1]);\r\n        }\r\n    }\r\n\r\n    // Stages 2-5: Level 1 of Set 1 should be unlocked\r\n    for (let stage = 2; stage <= 5; stage++) {\r\n        if (!gameState.unlockedSets[stage]) {\r\n            gameState.unlockedSets[stage] = new Set([1]);\r\n        }\r\n        const setKey = `${stage}_1`;\r\n        if (!gameState.unlockedLevels[setKey]) {\r\n            gameState.unlockedLevels[setKey] = new Set([1]);\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    currentUser = null;\r\n    checkExistingSession().then(() => {\r\n        initializeGame();\r\n        updatePerkButtons();\r\n        updateNavigationContainer();\r\n    });\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Immediately invoke an async function\r\n    (async () => {\r\n        await checkExistingSession();\r\n        initializeGame();\r\n        updatePerkButtons();\r\n        updateGuestPlayButton();\r\n        \r\n        CoinsManager.initialize();\r\n        WordsManager.initialize();\r\n        \r\n        // Load initial values if user is logged in\r\n        if (currentUser) {\r\n            const [coins, words] = await Promise.all([\r\n                CoinsManager.loadUserCoins(),\r\n                WordsManager.loadUserWords()\r\n            ]);\r\n            \r\n            gameState.coins = coins;\r\n            CoinsManager.updateDisplays();\r\n            WordsManager.updateDisplays(words);\r\n        }\r\n        \r\n        // Check for join hash on initial load\r\n        if (window.location.hash.startsWith('#join=')) {\r\n            console.log('Initial join hash detected');\r\n            const otp = window.location.hash.replace('#join=', '');\r\n            history.pushState(\"\", document.title, window.location.pathname);\r\n            showJoinModal(otp);\r\n        }\r\n\r\n        // Ensure particles on welcome screen\r\n        const welcomeScreen = document.getElementById('welcome-screen');\r\n        initializeParticles(welcomeScreen);\r\n        \r\n        await loadCustomLists();\r\n\r\n        // Mobile fullscreen handling\r\n        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\r\n            // Request on first touch\r\n            document.addEventListener('touchstart', function onFirstTouch() {\r\n                document.removeEventListener('touchstart', onFirstTouch);\r\n            }, { once: true });\r\n            \r\n            // Request when clicking any button\r\n            document.addEventListener('click', function(e) {\r\n                if (e.target.tagName === 'BUTTON') {\r\n                }\r\n            });\r\n            \r\n            // Screen orientation handling\r\n            if (screen.orientation) {\r\n                screen.orientation.lock('portrait')\r\n                    .catch(err => console.log('Failed to lock orientation:', err));\r\n            }\r\n        }\r\n\r\n        // Initialize real-time channels if user is logged in\r\n        if (currentUser) {\r\n            setupUserStatusSubscription();\r\n            initializeStatusCheck();\r\n        }\r\n    })().catch(error => {\r\n        console.error('Initialization error:', error);\r\n    });\r\n});\r\n\r\nasync function loadUserGameProgress(userId) {\r\n    console.log(\"Loading game progress for user:\", userId);\r\n    \r\n    try {\r\n        // Set up default values\r\n        gameState.currentStage = 1;\r\n        gameState.currentSet = 1;\r\n        gameState.currentLevel = 1;\r\n        gameState.coins = 0;\r\n        gameState.perks = {};\r\n        gameState.unlockedSets = { \"1\": new Set([1]) };\r\n        gameState.unlockedLevels = { \"1_1\": new Set([1]) };\r\n        gameState.perfectLevels = new Set();\r\n        gameState.completedLevels = new Set();\r\n        \r\n        // First try to load from localStorage (this includes extended fields)\r\n        const localProgress = localStorage.getItem(\"simploxProgress\");\r\n        if (localProgress) {\r\n            try {\r\n                const parsedProgress = JSON.parse(localProgress);\r\n                console.log(\"Found progress in localStorage:\", parsedProgress);\r\n                \r\n                // Load basic fields\r\n                if (parsedProgress.stage) gameState.currentStage = parsedProgress.stage;\r\n                if (parsedProgress.set_number) gameState.currentSet = parsedProgress.set_number;\r\n                if (parsedProgress.level) gameState.currentLevel = parsedProgress.level;\r\n                if (parsedProgress.coins) gameState.coins = parsedProgress.coins;\r\n                if (parsedProgress.perks) gameState.perks = parsedProgress.perks;\r\n                \r\n                // Load unlocked sets\r\n                if (parsedProgress.unlocked_sets) {\r\n                    gameState.unlockedSets = {};\r\n                    Object.entries(parsedProgress.unlocked_sets).forEach(([stage, sets]) => {\r\n                        gameState.unlockedSets[stage] = new Set(sets);\r\n                    });\r\n                }\r\n                \r\n                // Load unlocked levels\r\n                if (parsedProgress.unlocked_levels) {\r\n                    gameState.unlockedLevels = {};\r\n                    Object.entries(parsedProgress.unlocked_levels).forEach(([setKey, levels]) => {\r\n                        gameState.unlockedLevels[setKey] = new Set(levels);\r\n                    });\r\n                }\r\n                \r\n                // Load completed and perfect levels\r\n                if (parsedProgress.perfect_levels) {\r\n                    gameState.perfectLevels = new Set(parsedProgress.perfect_levels);\r\n                }\r\n                \r\n                if (parsedProgress.completed_levels) {\r\n                    gameState.completedLevels = new Set(parsedProgress.completed_levels);\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Error parsing localStorage progress:\", e);\r\n            }\r\n        }\r\n        \r\n        // Then try to load from database (this might not include all fields)\r\n        const { data, error } = await supabaseClient\r\n            .from(\"game_progress\")\r\n            .select(\"*\")\r\n            .eq(\"user_id\", userId)\r\n            .single();\r\n            \r\n        if (error) {\r\n            if (error.code === \"PGRST116\") {\r\n                console.log(\"No progress record found, creating initial progress\");\r\n                \r\n                // Create a new record with minimal fields\r\n                const initialProgress = {\r\n                    user_id: userId,\r\n                    stage: gameState.currentStage,\r\n                    set_number: gameState.currentSet,\r\n                    level: gameState.currentLevel,\r\n                    coins: gameState.coins\r\n                };\r\n                \r\n                const { error: insertError } = await supabaseClient\r\n                    .from(\"game_progress\")\r\n                    .insert([initialProgress]);\r\n                    \r\n                if (insertError) {\r\n                    console.error(\"Error creating initial game progress:\", insertError);\r\n                }\r\n            } else {\r\n                console.error(\"Error loading game progress:\", error);\r\n            }\r\n        } else if (data) {\r\n            // We found database data - prioritize this for core fields\r\n            console.log(\"Game progress loaded from database:\", data);\r\n            \r\n            // Core fields - always use database values if present\r\n            gameState.currentStage = data.stage || gameState.currentStage;\r\n            gameState.currentSet = data.set_number || gameState.currentSet;\r\n            gameState.currentLevel = data.level || gameState.currentLevel;\r\n            gameState.coins = data.coins || gameState.coins;\r\n            \r\n            // Extended fields - only use if present in database\r\n            try {\r\n                // Perks\r\n                if (data.perks && Object.keys(data.perks).length > 0) {\r\n                    gameState.perks = data.perks;\r\n                }\r\n                \r\n                // Unlocked sets\r\n                if (data.unlocked_sets && Object.keys(data.unlocked_sets).length > 0) {\r\n                    gameState.unlockedSets = {};\r\n                    Object.entries(data.unlocked_sets).forEach(([stage, sets]) => {\r\n                        gameState.unlockedSets[stage] = new Set(sets);\r\n                    });\r\n                }\r\n                \r\n                // Unlocked levels\r\n                if (data.unlocked_levels && Object.keys(data.unlocked_levels).length > 0) {\r\n                    gameState.unlockedLevels = {};\r\n                    Object.entries(data.unlocked_levels).forEach(([setKey, levels]) => {\r\n                        gameState.unlockedLevels[setKey] = new Set(levels);\r\n                    });\r\n                }\r\n                \r\n                // Perfect levels\r\n                if (data.perfect_levels && data.perfect_levels.length > 0) {\r\n                    gameState.perfectLevels = new Set(data.perfect_levels);\r\n                }\r\n                \r\n                // Completed levels\r\n                if (data.completed_levels && data.completed_levels.length > 0) {\r\n                    gameState.completedLevels = new Set(data.completed_levels);\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Error loading extended fields from database:\", e);\r\n            }\r\n        }\r\n        \r\n        // Always setup default unlocks to ensure valid state\r\n        setupDefaultUnlocks();\r\n        \r\n        console.log(\"Game state after loading progress:\", {\r\n            currentStage: gameState.currentStage,\r\n            currentSet: gameState.currentSet,\r\n            currentLevel: gameState.currentLevel\r\n        });\r\n        \r\n        updateAllCoinDisplays();\r\n        return true;\r\n    } catch (err) {\r\n        console.error(\"Unexpected error in loadUserGameProgress:\", err);\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction debugUnlockState() {\r\n    console.group('Current Game State');\r\n    console.log('Current Stage:', gameState.currentStage);\r\n    console.log('Current Set:', gameState.currentSet);\r\n    console.log('Current Level:', gameState.currentLevel);\r\n    \r\n    // Log unlocked sets\r\n    console.group('Unlocked Sets');\r\n    Object.entries(gameState.unlockedSets).forEach(([stageId, sets]) => {\r\n        console.log(`Stage ${stageId}:`, Array.from(sets).sort((a, b) => a - b));\r\n    });\r\n    console.groupEnd();\r\n    \r\n    // Log unlocked levels\r\n    console.group('Unlocked Levels');\r\n    Object.entries(gameState.unlockedLevels).forEach(([setKey, levels]) => {\r\n        console.log(`Set ${setKey}:`, Array.from(levels).sort((a, b) => a - b));\r\n    });\r\n    console.groupEnd();\r\n    \r\n    // Log completed levels\r\n    console.log('Completed Levels:', Array.from(gameState.completedLevels));\r\n    console.log('Perfect Levels:', Array.from(gameState.perfectLevels));\r\n    console.groupEnd();\r\n}\r\n\r\nasync function handleLogout() {\r\n    try {\r\n        const { error } = await supabaseClient.auth.signOut();\r\n        \r\n        if (error) {\r\n            console.error('Supabase logout error:', error.message);\r\n        }\r\n\r\n        // Reset game state\r\n        gameState.coins = 0;\r\n        gameState.unlockedSets = {};\r\n        gameState.unlockedLevels = {};\r\n        gameState.perfectLevels = new Set();\r\n        gameState.completedLevels = new Set();\r\n\r\n\r\n        // Clear all input fields and UI state\r\n        clearCustomPracticeUI();\r\n\r\n        // Reset current user and update UI\r\n        currentUser = null;\r\n        updateAuthUI();\r\n        updateUserStatusDisplay(null);\r\n        updateGuestPlayButton(); // Add this line\r\n        \r\n        // Show welcome screen\r\n        showScreen('welcome-screen');\r\n\r\n    } catch (error) {\r\n        console.error('Unexpected error during logout:', error);\r\n        // Ensure UI is reset even if logout fails\r\n        currentUser = null;\r\n        updateAuthUI();\r\n        updateUserStatusDisplay(null);\r\n        updateGuestPlayButton(); // Add this line\r\n        showScreen('welcome-screen');\r\n    }\r\n}\r\n\r\nfunction clearCustomPracticeUI() {\r\n    // Clear list name input\r\n    const listNameInput = document.getElementById('custom-list-name');\r\n    if (listNameInput) {\r\n        listNameInput.value = '';\r\n    }\r\n\r\n    // Clear word input\r\n    const wordInput = document.getElementById('custom-word-input');\r\n    if (wordInput) {\r\n        wordInput.value = '';\r\n    }\r\n\r\n    // Clear translation results\r\n    const translationResults = document.getElementById('translation-results');\r\n    if (translationResults) {\r\n        translationResults.style.display = 'none';\r\n    }\r\n\r\n    // Clear word translation list\r\n    const wordList = document.getElementById('word-translation-list');\r\n    if (wordList) {\r\n        wordList.innerHTML = '';\r\n    }\r\n\r\n    // Reset current list\r\n    customPracticeLists.currentList = null;\r\n    customPracticeLists.lists = [];\r\n}\r\n\r\nfunction saveProgress() {\r\n    console.log(\"Saving game progress\");\r\n    \r\n    if (!gameState.currentStage) {\r\n        console.log(\"No game state to save\");\r\n        return;\r\n    }\r\n    \r\n    // Format the data for storage\r\n    const progressData = {\r\n        stage: gameState.currentStage || 1,\r\n        set_number: gameState.currentSet || 1,\r\n        level: gameState.currentLevel || 1,\r\n        coins: gameState.coins || 0\r\n    };\r\n    \r\n    // Prepare the extended data that might be affected by schema cache\r\n    const extendedData = {\r\n        perks: gameState.perks || {},\r\n        unlocked_sets: Object.fromEntries(\r\n            Object.entries(gameState.unlockedSets || {}).map(([stage, sets]) => \r\n                [stage, Array.from(sets || [])]\r\n            )\r\n        ),\r\n        unlocked_levels: Object.fromEntries(\r\n            Object.entries(gameState.unlockedLevels || {}).map(([setKey, levels]) => \r\n                [setKey, Array.from(levels || [])]\r\n            )\r\n        ),\r\n        perfect_levels: Array.from(gameState.perfectLevels || []),\r\n        completed_levels: Array.from(gameState.completedLevels || [])\r\n    };\r\n    \r\n    // Save full data to localStorage for backup\r\n    localStorage.setItem(\"simploxProgress\", JSON.stringify({\r\n        ...progressData,\r\n        ...extendedData\r\n    }));\r\n    \r\n    // Save current context for resuming\r\n    const contextData = {\r\n        stage: gameState.currentStage,\r\n        set: gameState.currentSet,\r\n        level: gameState.currentLevel,\r\n        timestamp: Date.now()\r\n    };\r\n    localStorage.setItem(\"gameContext\", JSON.stringify(contextData));\r\n    \r\n    // If user is logged in, save to database\r\n    if (currentUser) {\r\n        console.log(\"Saving progress to Supabase for user:\", currentUser.id);\r\n        \r\n        // First try to save just the core fields - this should always work\r\n        supabaseClient\r\n            .from(\"game_progress\")\r\n            .upsert({\r\n                user_id: currentUser.id,\r\n                ...progressData\r\n            })\r\n            .then(({ error: coreError }) => {\r\n                if (coreError) {\r\n                    console.error(\"Error saving core progress:\", coreError);\r\n                } else {\r\n                    console.log(\"Core progress saved successfully\");\r\n                    \r\n                    // Now try to save each extended field individually\r\n                    // This way if one field fails due to schema issues, others might still work\r\n                    const saveExtendedField = (fieldName, fieldValue) => {\r\n                        const updateData = { [fieldName]: fieldValue };\r\n                        \r\n                        supabaseClient\r\n                            .from(\"game_progress\")\r\n                            .update(updateData)\r\n                            .eq(\"user_id\", currentUser.id)\r\n                            .then(({ error }) => {\r\n                                if (error) {\r\n                                    console.warn(`Error saving ${fieldName}:`, error);\r\n                                } else {\r\n                                    console.log(`${fieldName} saved successfully`);\r\n                                }\r\n                            });\r\n                    };\r\n                    \r\n                    // Try each field separately\r\n                    Object.entries(extendedData).forEach(([field, value]) => {\r\n                        saveExtendedField(field, value);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nasync function ensureCorrectSchema() {\r\n    if (!currentUser) return false;\r\n    \r\n    console.log(\"Checking database schema for user:\", currentUser.id);\r\n    \r\n    try {\r\n        // First check if the user has a game_progress record\r\n        const { data, error } = await supabaseClient\r\n            .from(\"game_progress\")\r\n            .select(\"*\")\r\n            .eq(\"user_id\", currentUser.id)\r\n            .single();\r\n            \r\n        if (error) {\r\n            if (error.code === \"PGRST116\") {\r\n                // Record doesn't exist, create it\r\n                console.log(\"Creating game progress record for user\");\r\n                \r\n                const initialData = {\r\n                    user_id: currentUser.id,\r\n                    stage: 1,\r\n                    set_number: 1,\r\n                    level: 1,\r\n                    coins: 0,\r\n                    perks: {},\r\n                    unlocked_sets: { \"1\": [1] },\r\n                    unlocked_levels: { \"1_1\": [1] },\r\n                    perfect_levels: [],\r\n                    completed_levels: []\r\n                };\r\n                \r\n                const { error: insertError } = await supabaseClient\r\n                    .from(\"game_progress\")\r\n                    .insert([initialData]);\r\n                    \r\n                if (insertError) {\r\n                    console.error(\"Error creating game progress record:\", insertError);\r\n                    return false;\r\n                }\r\n                \r\n                return true;\r\n            }\r\n            \r\n            console.error(\"Error checking game progress record:\", error);\r\n            return false;\r\n        }\r\n        \r\n        // Check if we need to add missing data\r\n        let needsUpdate = false;\r\n        const updateData = { ...data };\r\n        \r\n        // Check each required field\r\n        const requiredFields = [\r\n            { name: 'unlocked_sets', defaultValue: { \"1\": [1] } },\r\n            { name: 'unlocked_levels', defaultValue: { \"1_1\": [1] } },\r\n            { name: 'perfect_levels', defaultValue: [] },\r\n            { name: 'completed_levels', defaultValue: [] }\r\n        ];\r\n        \r\n        for (const field of requiredFields) {\r\n            if (!(field.name in data) || data[field.name] === null) {\r\n                updateData[field.name] = field.defaultValue;\r\n                needsUpdate = true;\r\n                console.log(`Field \"${field.name}\" missing, will add it`);\r\n            }\r\n        }\r\n        \r\n        if (needsUpdate) {\r\n            console.log(\"Updating record with missing fields\");\r\n            const { error: updateError } = await supabaseClient\r\n                .from(\"game_progress\")\r\n                .update(updateData)\r\n                .eq(\"user_id\", currentUser.id);\r\n                \r\n            if (updateError) {\r\n                console.error(\"Error updating game progress record:\", updateError);\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    } catch (err) {\r\n        console.error(\"Unexpected error in ensureCorrectSchema:\", err);\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nfunction switchAuthTab(tab) {\r\n    const loginTab = document.querySelector('.auth-tab[onclick=\"switchAuthTab(\\'login\\')\"]');\r\n    const signupTab = document.querySelector('.auth-tab[onclick=\"switchAuthTab(\\'signup\\')\"]');\r\n    const loginForm = document.getElementById('loginForm');\r\n    const signupForm = document.getElementById('signupForm');\r\n\r\n    if (tab === 'login') {\r\n        loginTab.classList.add('active');\r\n        signupTab.classList.remove('active');\r\n        loginForm.classList.remove('hidden');\r\n        signupForm.classList.add('hidden');\r\n    } else {\r\n        loginTab.classList.remove('active');\r\n        signupTab.classList.add('active');\r\n        loginForm.classList.add('hidden');\r\n        signupForm.classList.remove('hidden');\r\n    }\r\n}\r\n\r\nfunction updateAuthUI() {\r\n    const authBox = document.getElementById('authBox');\r\n    const userInfo = document.getElementById('userInfo');\r\n    const userEmailElement = document.getElementById('userEmail');\r\n    const logoutButton = document.querySelector('.logout-button');\r\n\r\n    if (currentUser) {\r\n        authBox.classList.add('hidden');\r\n        userInfo.classList.remove('hidden');\r\n        logoutButton.classList.remove('hidden');\r\n        \r\n        // Display username from metadata if available, fallback to email\r\n        userEmailElement.textContent = currentUser.user_metadata?.username || currentUser.email;\r\n        \r\n        // Get and display user status\r\n        supabaseClient\r\n            .from('user_profiles')\r\n            .select('status, username')\r\n            .eq('id', currentUser.id)\r\n            .single()\r\n            .then(({ data }) => {\r\n                if (data) {\r\n                    // If we have a username in the profile, use it\r\n                    if (data.username) {\r\n                        userEmailElement.textContent = data.username;\r\n                    }\r\n                    updateUserStatusDisplay(data.status);\r\n                }\r\n            })\r\n            .catch(error => console.error('Error fetching user status:', error));\r\n            \r\n    } else {\r\n        authBox.classList.remove('hidden');\r\n        userInfo.classList.add('hidden');\r\n        logoutButton.classList.add('hidden');\r\n        userEmailElement.textContent = '';\r\n    }\r\n}\r\n\r\n\r\n\r\n// Game Constants & State Management\r\nconst gameStructure = {\r\n    stages: [\r\n        { id: 1, numSets: 9, levelsPerSet: 21, bossLevel: 21 },\r\n        { id: 2, numSets: 10, levelsPerSet: 21, bossLevel: 21 },\r\n        { id: 3, numSets: 12, levelsPerSet: 21, bossLevel: 21 },\r\n        { id: 4, numSets: 30, levelsPerSet: 21, bossLevel: 21 },\r\n        { id: 5, numSets: 14, levelsPerSet: 21, bossLevel: 21 }\r\n    ],\r\n    levelTypes: {\r\n        normal: 'normal',\r\n        boss: 'boss'\r\n    }\r\n};\r\n\r\nconst gameState = {\r\n    currentStage: null,\r\n    currentSet: null,\r\n    sessionStartTime: null,\r\n    currentLevel: null,\r\n    unlockedSets: {},\r\n    unlockedLevels: {},\r\n    levelScores: {},\r\n    completedLevels: new Set(),\r\n    perfectLevels: new Set(),\r\n    coins: 0,\r\n    \r\n};\r\n\r\n// ADD this clean perk configuration\r\nconst PERK_CONFIG = {\r\n    timeFreeze: {\r\n        name: 'Time Freeze',\r\n        description: 'Pause the timer for 5 seconds',\r\n        cost: 15,\r\n        icon: 'fa-clock',\r\n        duration: 5000\r\n    },\r\n    skip: {\r\n        name: 'Skip Question',\r\n        description: 'Skip the current word without penalty',\r\n        cost: 1,\r\n        icon: 'fa-forward'\r\n    },\r\n    clue: {\r\n        name: 'Eliminate Wrong Answer',\r\n        description: 'Remove one incorrect answer',\r\n        cost: 35,\r\n        icon: 'fa-lightbulb'\r\n    },\r\n    reveal: {\r\n        name: 'Reveal Correct Answer',\r\n        description: 'Show the correct translation',\r\n        cost: 50,\r\n        icon: 'fa-eye'\r\n    }\r\n};\r\n\r\nfunction buyPerk(perkType) {\r\n    const perkConfig = PERK_CONFIG[perkType];\r\n    if (!perkConfig) return;\r\n\r\n    if (gameState.coins < perkConfig.cost) {\r\n        showNotification(`Need ${perkConfig.cost} coins!`, 'error');\r\n        return;\r\n    }\r\n\r\n    gameState.coins -= perkConfig.cost;\r\n    updateAllCoinDisplays();\r\n\r\n    switch(perkType) {\r\n        case 'timeFreeze':\r\n            isFrozen = true;\r\n            setTimeout(() => {\r\n                isFrozen = false;\r\n            }, perkConfig.duration);\r\n            break;\r\n\r\n        case 'skip':\r\n            handleAnswer(true, true);\r\n            break;\r\n\r\n        case 'clue':\r\n            const buttons = document.querySelectorAll('.buttons button');\r\n            const correctAnswer = currentGame.isHebrewToEnglish ? \r\n                currentGame.words[currentGame.currentIndex] : \r\n                currentGame.translations[currentGame.currentIndex];\r\n            \r\n            const wrongButtons = Array.from(buttons).filter(btn => \r\n                btn.textContent !== correctAnswer);\r\n            \r\n            if (wrongButtons.length > 0) {\r\n                const buttonToDisable = wrongButtons[Math.floor(Math.random() * wrongButtons.length)];\r\n                buttonToDisable.disabled = true;\r\n                buttonToDisable.style.opacity = '0.5';\r\n            }\r\n            break;\r\n\r\n        // REPLACE the reveal case in buyPerk function\r\ncase 'reveal':\r\n    const correctAns = currentGame.isHebrewToEnglish ? \r\n        currentGame.words[currentGame.currentIndex] : \r\n        currentGame.translations[currentGame.currentIndex];\r\n    \r\n    document.querySelectorAll('.buttons button').forEach(btn => {\r\n        if (btn.textContent === correctAns) {\r\n            btn.classList.add('correct');\r\n            // Store original background\r\n            const originalBackground = btn.style.background;\r\n            btn.style.background = 'var(--success)';\r\n            \r\n            // Reset after 5 seconds\r\n            setTimeout(() => {\r\n                btn.classList.remove('correct');\r\n                btn.style.background = originalBackground;\r\n            }, 5000);\r\n        }\r\n    });\r\n    break;\r\n    }\r\n\r\n    saveProgress();\r\n}\r\n\r\n\r\nfunction updatePerkButtons() {\r\n    Object.entries(PERK_CONFIG).forEach(([perkType, config]) => {\r\n        const button = document.getElementById(`${perkType}Perk`);\r\n        if (button) {\r\n            // Calculate number of times perk can be purchased\r\n            const availablePurchases = Math.floor(gameState.coins / config.cost);\r\n            const canAfford = availablePurchases > 0;\r\n            \r\n            button.disabled = !canAfford;\r\n            button.classList.toggle('disabled', !canAfford);\r\n            \r\n            // Update counter to show number of purchasable perks\r\n            const countElement = button.querySelector('.perk-count');\r\n            if (countElement) {\r\n                countElement.textContent = canAfford ? availablePurchases.toString() : '0';\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nupdatePerkButtons();\r\n\r\nlet currentGame = {\r\n    words: [],\r\n    translations: [],\r\n    currentIndex: 0,\r\n    correctAnswers: 0,\r\n    firstAttempt: true,\r\n    isHebrewToEnglish: false,\r\n    mixed: false,\r\n    speedChallenge: false,\r\n    startTime: 0,\r\n    levelStartTime: 0,\r\n    timeBonus: 0,\r\n    streakBonus: true,\r\n    questionStartTime: 0,\r\n    wrongStreak: 0,\r\n    progressLost: 0\r\n};\r\n\r\nlet timer = null;\r\nlet timeRemaining = 0;\r\nlet isFrozen = false;\r\n\r\nlet resetProgressTimeout = null;\r\nlet isFirstResetAttempt = true;\r\n\r\n\r\n// Progress Management\r\nfunction saveProgress() {\r\n    if (currentUser) {\r\n        // Save to Supabase for logged in users\r\n        const progressToSave = {\r\n            stage: gameState.currentStage,\r\n            set_number: gameState.currentSet,\r\n            level: gameState.currentLevel,\r\n            coins: gameState.coins,\r\n            perks: gameState.perks,\r\n            unlocked_sets: Object.fromEntries(\r\n                Object.entries(gameState.unlockedSets).map(([k, v]) => [k, Array.from(v)])\r\n            ),\r\n            unlocked_levels: Object.fromEntries(\r\n                Object.entries(gameState.unlockedLevels).map(([k, v]) => [k, Array.from(v)])\r\n            ),\r\n            perfect_levels: Array.from(gameState.perfectLevels),\r\n            completed_levels: Array.from(gameState.completedLevels)\r\n        };\r\n\r\n        supabaseClient\r\n            .from('game_progress')\r\n            .update(progressToSave)\r\n            .eq('user_id', currentUser.id)\r\n            .then(({ error }) => {\r\n                if (error) console.error('Error saving game progress:', error);\r\n            });\r\n    } else {\r\n        // For guest users, save to localStorage\r\n        localStorage.setItem('simploxProgress', JSON.stringify({\r\n            unlockedSets: Object.fromEntries(\r\n                Object.entries(gameState.unlockedSets).map(([k, v]) => [k, Array.from(v)])\r\n            ),\r\n            unlockedLevels: Object.fromEntries(\r\n                Object.entries(gameState.unlockedLevels).map(([k, v]) => [k, Array.from(v)])\r\n            ),\r\n            perfectLevels: Array.from(gameState.perfectLevels),\r\n            completedLevels: Array.from(gameState.completedLevels),\r\n            coins: gameState.coins,\r\n            perks: gameState.perks\r\n        }));\r\n    }\r\n}\r\n\r\n\r\nfunction loadProgress() {\r\n    const saved = localStorage.getItem('simploxProgress');\r\n    if (saved) {\r\n        const data = JSON.parse(saved);\r\n        gameState.unlockedSets = Object.fromEntries(\r\n            Object.entries(data.unlockedSets).map(([k, v]) => [k, new Set(v)])\r\n        );\r\n        gameState.unlockedLevels = Object.fromEntries(\r\n            Object.entries(data.unlockedLevels).map(([k, v]) => [k, new Set(v)])\r\n        );\r\n        gameState.perfectLevels = new Set(data.perfectLevels);\r\n        gameState.completedLevels = new Set(data.completedLevels || []);\r\n        gameState.coins = data.coins;\r\n        gameState.perks = data.perks || {timeFreeze: 0, skip: 0, clue: 0, reveal: 0};\r\n    }\r\n    const savedCustomCoins = localStorage.getItem('simploxCustomCoins');\r\n    if (savedCustomCoins) {\r\n        gameState.coins = parseInt(savedCustomCoins);\r\n    }\r\n}\r\n\r\nasync function handleLogout() {\r\n    try {\r\n        const { error } = await supabaseClient.auth.signOut();\r\n        \r\n        if (error) {\r\n            console.error('Supabase logout error:', error.message);\r\n        }\r\n\r\n        currentUser = null;\r\n        updateAuthUI();\r\n        showScreen('welcome-screen');\r\n        \r\n        // Reload game progress from localStorage\r\n        initializeGame();\r\n\r\n    } catch (error) {\r\n        console.error('Unexpected error during logout:', error);\r\n    }\r\n}\r\n\r\n\r\n\r\n// Timer Functions\r\n// Replace the startTimer function:\r\nfunction startTimer(questionCount) {\r\n    clearTimer();\r\n    if (currentGame.currentIndex >= currentGame.words.length) return;\r\n    \r\n    // Set initial time only if not already set\r\n    if (!currentGame.initialTimeRemaining) {\r\n        currentGame.initialTimeRemaining = currentGame.words.length * 10;\r\n        timeRemaining = currentGame.initialTimeRemaining;\r\n        currentGame.totalTime = timeRemaining; // Store the initial total time\r\n    } else {\r\n        // Use the remaining time from the previous interval\r\n        timeRemaining = currentGame.initialTimeRemaining;\r\n    }\r\n    \r\n    console.log('Starting timer with:', timeRemaining, 'seconds');\r\n    currentGame.questionStartTime = Date.now();\r\n    updateTimerDisplay();\r\n    updateTimerCircle(timeRemaining, currentGame.totalTime); // Use stored total time\r\n    \r\n    timer = setInterval(() => {\r\n        if (!isFrozen) {\r\n            timeRemaining = Math.max(0, timeRemaining - 1);\r\n            updateTimerDisplay();\r\n            updateTimerCircle(timeRemaining, currentGame.totalTime); // Use stored total time\r\n            \r\n            // Update the initialTimeRemaining to track remaining time\r\n            currentGame.initialTimeRemaining = timeRemaining;\r\n            \r\n            if (timeRemaining <= 10) {\r\n                document.querySelector('.timer-value').classList.add('warning');\r\n            }\r\n            \r\n            if (timeRemaining <= 0) {\r\n                handleTimeUp();\r\n            }\r\n        }\r\n    }, 1000);\r\n}\r\n\r\nfunction updateTimerDisplay() {\r\n    const minutes = Math.floor(timeRemaining / 60);\r\n    const seconds = timeRemaining % 60;\r\n    const timerElement = document.querySelector('.timer-value');\r\n    timerElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\r\n    \r\n    if (timeRemaining <= 10) {\r\n        timerElement.classList.add('warning');\r\n    } else {\r\n        timerElement.classList.remove('warning');\r\n    }\r\n}\r\n\r\nfunction clearTimer() {\r\n    if (timer) {\r\n        clearInterval(timer);\r\n        timer = null;\r\n    }\r\n    timeRemaining = 0;\r\n    isFrozen = false;\r\n    \r\n    const timerProgress = document.querySelector('.timer-progress');\r\n    if (timerProgress) {\r\n        timerProgress.classList.remove('warning');\r\n    }\r\n    \r\n    updateTimerCircle(0, 1); // This will empty the circle\r\n}\r\n\r\nfunction createParticles(x, y) {\r\n    // Detect mobile device\r\n    const isMobile = window.matchMedia(\"(max-width: 768px)\").matches;\r\n    \r\n    // Define particle parameters based on device type\r\n    const particleConfig = isMobile \r\n        ? {\r\n            count: 10,      // Fewer particles on mobile\r\n            size: 6,        // Smaller particles\r\n            distance: 50,   // Shorter spread\r\n            opacity: 0.7,   // Lower opacity\r\n            duration: 1000  // Shorter animation\r\n        }\r\n        : {\r\n            count: 40,      // More particles on desktop\r\n            size: 10,       // Standard particle size\r\n            distance: 150,  // Wider spread\r\n            opacity: 1,     // Full opacity\r\n            duration: 1500  // Longer animation\r\n        };\r\n\r\n    const colors = ['#ffd700', '#FFA500', '#4CAF50', '#FFD700'];\r\n    const container = document.body;\r\n    \r\n    for (let i = 0; i < particleConfig.count; i++) {\r\n        const particle = document.createElement('div');\r\n        particle.className = 'particle';\r\n        particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\r\n        \r\n        // Position relative to click point\r\n        particle.style.position = 'fixed';\r\n        particle.style.left = `${x}px`;\r\n        particle.style.top = `${y}px`;\r\n        \r\n        // Randomize particle properties\r\n        const angle = (Math.random() * Math.PI * 2);\r\n        const distance = particleConfig.distance + (Math.random() * 50);\r\n        \r\n        particle.style.width = `${particleConfig.size}px`;\r\n        particle.style.height = `${particleConfig.size}px`;\r\n        particle.style.opacity = `${particleConfig.opacity}`;\r\n        \r\n        particle.style.setProperty('--x', `${Math.cos(angle) * distance}px`);\r\n        particle.style.setProperty('--y', `${Math.sin(angle) * distance}px`);\r\n        \r\n        // Create adaptive animation\r\n        particle.style.animation = `particleBurst ${particleConfig.duration / 1000}s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards`;\r\n        \r\n        container.appendChild(particle);\r\n        \r\n        // Remove particle after animation completes\r\n        setTimeout(() => {\r\n            container.removeChild(particle);\r\n        }, particleConfig.duration);\r\n    }\r\n}\r\n\r\nfunction animateCoinsChange(e, t, n) {\r\n  if (!e) return;\r\n  \r\n  // Convert to numbers and handle special cases\r\n  t = parseFloat(t) || 0;\r\n  n = parseFloat(n) || 0;\r\n  \r\n  // If values are the same, just set it and return\r\n  if (t === n) {\r\n    e.textContent = n;\r\n    return;\r\n  }\r\n  \r\n  // Animation frames calculation\r\n  const r = 1000 / (1000/60); // About 60 frames\r\n  const s = (n - t) / r;\r\n  \r\n  let o = 0;\r\n  let a = t;\r\n  \r\n  e.classList.add(\"animating\");\r\n  \r\n  const animate = function() {\r\n    o++;\r\n    a += s;\r\n    \r\n    // Continue animation if not finished and we're still moving in the right direction\r\n    if (o <= r && ((s > 0 && a < n) || (s < 0 && a > n))) {\r\n      e.textContent = Math.round(a);\r\n      \r\n      // Set color based on increase/decrease\r\n      if (s > 0) {\r\n        e.style.color = \"var(--success)\";\r\n      } else if (s < 0) {\r\n        e.style.color = \"var(--error)\";\r\n      }\r\n      \r\n      requestAnimationFrame(animate);\r\n    } else {\r\n      // Finalize animation\r\n      e.textContent = n;\r\n      setTimeout(() => {\r\n        e.style.color = \"var(--text)\";\r\n        e.classList.remove(\"animating\");\r\n      }, 300);\r\n    }\r\n  };\r\n  \r\n  requestAnimationFrame(animate);\r\n}\r\n\r\nconst LEADERBOARD_UPDATE_INTERVAL = 10000; // 10 seconds\r\n\r\n// REPLACE the updatePlayerProgress function with this improved version\r\nfunction updatePlayerProgress(e) {\r\n    const t = Date.now();\r\n    \r\n    if (t - lastLeaderboardUpdate < 1e4) {\r\n        const t = currentArcadeSession.participants.findIndex((t => t.username === e.username));\r\n        if (t !== -1) {\r\n            currentArcadeSession.participants[t] = { \r\n                ...currentArcadeSession.participants[t], \r\n                ...e \r\n            };\r\n        } else {\r\n            currentArcadeSession.participants.push({\r\n                username: e.username,\r\n                wordsCompleted: e.wordsCompleted || 0,\r\n                coins: e.coins || 0\r\n            });\r\n        }\r\n        return;\r\n    }\r\n    \r\n    lastLeaderboardUpdate = t;\r\n    \r\n    const n = {}, r = {};\r\n    document.querySelectorAll(\".leaderboard-entry\").forEach((e => {\r\n        const t = e.querySelector(\"[data-username]\")?.dataset.username;\r\n        if (t) {\r\n            n[t] = e.getBoundingClientRect();\r\n            const s = e.querySelector(\"[data-words]\"),\r\n                  o = e.querySelector(\"[data-coins]\");\r\n            r[t] = {\r\n                words: s ? parseInt(s.textContent) : 0,\r\n                coins: o ? parseInt(o.textContent) : 0\r\n            };\r\n        }\r\n    }));\r\n    \r\n    const s = currentArcadeSession.participants.findIndex((t => t.username === e.username));\r\n    \r\n    if (s !== -1) {\r\n        currentArcadeSession.participants[s] = { \r\n            ...currentArcadeSession.participants[s], \r\n            ...e \r\n        };\r\n    } else {\r\n        currentArcadeSession.participants.push({\r\n            username: e.username,\r\n            wordsCompleted: e.wordsCompleted || 0,\r\n            coins: e.coins || 0\r\n        });\r\n    }\r\n    \r\n    const o = [...currentArcadeSession.participants]\r\n        .sort(((e, t) => \r\n            t.wordsCompleted !== e.wordsCompleted ? \r\n            t.wordsCompleted - e.wordsCompleted : \r\n            t.coins - e.coins\r\n        ))\r\n        .map(((e, t) => `\r\n    <div class=\"leaderboard-entry ${t < 3 ? `rank-${t + 1}` : \"\"}\"\r\n         data-rank=\"${t + 1}\">\r\n      <div>${t + 1}</div>\r\n      <div data-username=\"${e.username}\">${e.username}</div>\r\n      <div data-words=\"${e.wordsCompleted || 0}\">${e.wordsCompleted || 0}</div>\r\n      <div data-coins=\"${e.coins || 0}\">${e.coins || 0}</div>\r\n    </div>\r\n  `)).join(\"\");\r\n    \r\n    const a = document.getElementById(\"arcade-leaderboard\");\r\n    \r\n    if (a) {\r\n        const e = a.querySelector(\".leaderboard-header\");\r\n        a.innerHTML = e ? e.outerHTML + o : o;\r\n        \r\n        a.querySelectorAll(\".leaderboard-entry\").forEach((e => {\r\n            const t = e.querySelector(\"[data-username]\")?.dataset.username;\r\n            \r\n            if (t && n[t]) {\r\n                const s = n[t],\r\n                      o = e.getBoundingClientRect(),\r\n                      a = s.top - o.top;\r\n                \r\n                if (a > 0) {\r\n                    e.classList.add(\"moving-up\");\r\n                } else if (a < 0) {\r\n                    e.classList.add(\"moving-down\");\r\n                }\r\n                \r\n                if (r[t]) {\r\n                    const n = e.querySelector(\"[data-words]\"),\r\n                          s = e.querySelector(\"[data-coins]\");\r\n                    \r\n                    if (n && r[t].words !== parseInt(n.textContent)) {\r\n                        animateCoinsChange(n, r[t].words, parseInt(n.textContent));\r\n                    }\r\n                    \r\n                    if (s && r[t].coins !== parseInt(s.textContent)) {\r\n                        animateCoinsChange(s, r[t].coins, parseInt(s.textContent));\r\n                    }\r\n                }\r\n                \r\n                e.addEventListener(\"animationend\", (() => {\r\n                    e.classList.remove(\"moving-up\", \"moving-down\");\r\n                }), {\r\n                    once: true\r\n                });\r\n            }\r\n        }));\r\n    }\r\n    \r\n    updateArcadeProgress();\r\n        updatePlayerRankDisplay();\r\n}\r\n\r\n// ADD this improved animateCoinsChange function\r\nfunction animateCoinsChange(element, startValue, endValue) {\r\n    if (!element) return;\r\n    \r\n    startValue = parseFloat(startValue) || 0;\r\n    endValue = parseFloat(endValue) || 0;\r\n    \r\n    if (startValue === endValue) {\r\n        element.textContent = endValue;\r\n        return;\r\n    }\r\n    \r\n    // Duration in ms, higher value = slower animation\r\n    const duration = 1000;\r\n    const frameRate = 1000 / 60; // 60fps\r\n    const totalFrames = duration / frameRate;\r\n    const changePerFrame = (endValue - startValue) / totalFrames;\r\n    \r\n    let currentFrame = 0;\r\n    let currentValue = startValue;\r\n    \r\n    element.classList.add('animating');\r\n    \r\n    const animate = function() {\r\n        currentFrame++;\r\n        currentValue += changePerFrame;\r\n        \r\n        if (currentFrame <= totalFrames && \r\n            ((changePerFrame > 0 && currentValue < endValue) || \r\n             (changePerFrame < 0 && currentValue > endValue))) {\r\n            \r\n            element.textContent = Math.round(currentValue);\r\n            \r\n            if (changePerFrame > 0) {\r\n                element.style.color = 'var(--success)';\r\n            } else if (changePerFrame < 0) {\r\n                element.style.color = 'var(--error)';\r\n            }\r\n            \r\n            requestAnimationFrame(animate);\r\n        } else {\r\n            element.textContent = endValue;\r\n            \r\n            setTimeout(() => {\r\n                element.style.color = 'var(--text)';\r\n                element.classList.remove('animating');\r\n            }, 300);\r\n        }\r\n    };\r\n    \r\n    requestAnimationFrame(animate);\r\n}\r\n\r\nfunction handleTimeUp() {\r\n    if (currentGame.currentIndex >= currentGame.words.length) return; // Don't show if level is complete\r\n    \r\n    clearTimer();\r\n    showReviveOverlay();\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  // Existing code...\r\n  \r\n  // Check for admin user and add test button if we're on the question screen\r\n  if (document.getElementById('question-screen').classList.contains('visible')) {\r\n    console.log(\"Question screen is visible on load, adding admin button\");\r\n    addAdminTestButton();\r\n  }\r\n  \r\n  // Also add a direct check just to be safe\r\n  setTimeout(() => {\r\n    if (currentUser && currentUser.email === 'admin123@gmail.com') {\r\n      console.log(\"Admin user detected on page load\");\r\n      addAdminTestButton();\r\n    }\r\n  }, 2000); // Give time for user to be loaded\r\n});\r\n\r\nfunction showScreen(screenId, forceRefresh = false) {\r\n  // Prevent unregistered users from seeing upgrade screen\r\n  if (screenId === \"upgrade-screen\" && !currentUser) {\r\n    console.log(\"Unregistered user attempt to access upgrade screen, redirecting to auth modal\");\r\n    screenId = \"welcome-screen\"; // Redirect to welcome screen first\r\n    \r\n    // Show auth modal with signup form after a brief delay\r\n    setTimeout(() => {\r\n      showAuthModal();\r\n      // Switch to signup form\r\n      setTimeout(() => {\r\n        const loginForm = document.getElementById('loginForm');\r\n        const signupForm = document.getElementById('signupForm');\r\n        if (loginForm && signupForm) {\r\n          loginForm.classList.add('hidden');\r\n          signupForm.classList.remove('hidden');\r\n        }\r\n      }, 100);\r\n    }, 200);\r\n  }\r\n\r\n  // When returning to welcome screen, clear game context\r\n  if (screenId === \"welcome-screen\") {\r\n    console.log(\"Returning to welcome screen, clearing game context\");\r\n    localStorage.removeItem(\"gameContext\");\r\n  }\r\n   \r\n  console.log(\"showScreen called with:\", {\r\n    screenId: screenId,\r\n    forceRefresh: forceRefresh,\r\n    currentUser: currentUser ? currentUser.id : \"No user\"\r\n  });\r\n   \r\n  // Special handling for leaderboard screen cleanup\r\n  if (document.querySelector('.screen.visible')?.id === 'leaderboard-screen') {\r\n    cleanupLeaderboard();\r\n  }\r\n   \r\n  // Get currently visible screen\r\n  const currentScreen = document.querySelector('.screen.visible');\r\n   \r\n  // Cleanup if leaving question screen\r\n  if (currentScreen && currentScreen.id === 'question-screen') {\r\n    clearTimer();\r\n    isFrozen = false;\r\n  }\r\n   \r\n  // Handle force refresh\r\n  if (forceRefresh && screenId === \"welcome-screen\") {\r\n    console.log(\"Initiating full page reload\");\r\n    saveProgress();\r\n    window.location.reload(true);\r\n    return;\r\n  }\r\n\r\n  if ([\"question-screen\", \"custom-practice-screen\", \"moderator-screen\", \"leaderboard-screen\"].includes(screenId)) {\r\n    updateNavigationContainer();\r\n  }\r\n   \r\n  // Hide all screens\r\n  document.querySelectorAll('.screen').forEach(screen => {\r\n    screen.classList.remove('visible');\r\n       \r\n    // Remove particle containers\r\n    const particleContainer = screen.querySelector('.particle-container');\r\n    if (particleContainer) {\r\n      particleContainer.remove();\r\n    }\r\n  });\r\n   \r\n  // Show requested screen\r\n  const screenElement = document.getElementById(screenId);\r\n  if (screenElement) {\r\n    // Make screen visible\r\n    screenElement.classList.add('visible');\r\n       \r\n    // Initialize particles for the screen\r\n    initializeParticles(screenElement);\r\n       \r\n    // Update UI elements\r\n    updateAllCoinDisplays();\r\n       \r\n    // Special handling for different screens\r\n    switch (screenId) {\r\n      case \"question-screen\":\r\n        updatePerkButtons();\r\n               \r\n        // Check for admin user and add test button\r\n        console.log(\"Question screen shown, checking for admin button\");\r\n        setTimeout(() => {\r\n          addAdminTestButton();\r\n        }, 100);\r\n        break;\r\n             \r\n      case \"welcome-screen\":\r\n        if (restoreGameContext()) {\r\n          startGame();\r\n        }\r\n        break;\r\n             \r\n      case \"stage-cascade-screen\":\r\n        // Handle the cascading stage screen specially\r\n        return showStageCascadeScreen();\r\n    }\r\n       \r\n    console.log(`Switched to screen: ${screenId}`);\r\n  } else {\r\n    console.error(`Screen with id ${screenId} not found`);\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    document.querySelectorAll('.home-button').forEach(button => {\r\n        button.addEventListener('click', (event) => {\r\n            event.preventDefault();\r\n            showScreen('welcome-screen', true);\r\n        });\r\n    });\r\n});\r\n\r\n\r\n// Add full-screen event listener\r\ndocument.addEventListener('fullscreenchange', function() {\r\n    if (!document.fullscreenElement) {\r\n        console.log('Exited full-screen');\r\n    }\r\n});\r\n\r\n\r\nfunction showLevelScreen(setId) {\r\n    gameState.currentSet = setId;\r\n    debugUnlockState(); // Add debug call here\r\n    \r\n    // Clear existing screen\r\n    const container = document.getElementById('level-container');\r\n    if (!container) return;\r\n    container.innerHTML = '';\r\n    \r\n    const stage = gameStructure.stages[gameState.currentStage - 1];\r\n    if (!stage) return;\r\n    \r\n    // Create level header\r\n    const levelHeader = document.createElement('div');\r\n    levelHeader.className = 'level-header';\r\n    \r\n    // Calculate level completion stats\r\n    const totalLevels = stage.levelsPerSet;\r\n    let completedCount = 0;\r\n    let perfectCount = 0;\r\n    \r\n    for (let i = 1; i <= totalLevels; i++) {\r\n        const levelKey = `${gameState.currentStage}_${setId}_${i}`;\r\n        if (gameState.perfectLevels.has(levelKey)) {\r\n            perfectCount++;\r\n            completedCount++;\r\n        } else if (gameState.completedLevels.has(levelKey)) {\r\n            completedCount++;\r\n        }\r\n    }\r\n    \r\n    const progressPercentage = Math.round((completedCount / totalLevels) * 100);\r\n    const setIcon = getSetIcon(gameState.currentStage, setId);\r\n    const setDescription = getSetDescription(gameState.currentStage, setId);\r\n    \r\n    // Populate header\r\n    levelHeader.innerHTML = `\r\n        <div class=\"level-title-area\">\r\n            <div class=\"set-icon\">\r\n                <i class=\"${setIcon}\"></i>\r\n            </div>\r\n            <div class=\"set-details\">\r\n                <div class=\"set-name\">Stage ${gameState.currentStage} - Set ${setId}</div>\r\n                <div class=\"set-desc\">${setDescription}</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"set-progress\">\r\n            <div class=\"progress-bar\">\r\n                <div class=\"progress-fill\" style=\"width: ${progressPercentage}%\"></div>\r\n            </div>\r\n            <div class=\"progress-text\">${completedCount}/${totalLevels} levels</div>\r\n        </div>\r\n    `;\r\n    \r\n    container.appendChild(levelHeader);\r\n    \r\n    // Create level grid\r\n    const levelGrid = document.createElement('div');\r\n    levelGrid.className = 'level-grid';\r\n    \r\n    const testLevels = [3, 6, 9, 10, 13, 16, 19, 20];\r\n    const setKey = `${gameState.currentStage}_${setId}`;\r\n    \r\n    // Ensure unlockedLevels exists for this set\r\n    if (!gameState.unlockedLevels[setKey]) {\r\n        gameState.unlockedLevels[setKey] = new Set([1]); // At minimum, level 1 should be unlocked\r\n    }\r\n    \r\n    console.log(`Rendering levels for ${setKey}. Unlocked levels:`, \r\n                Array.from(gameState.unlockedLevels[setKey] || []));\r\n    \r\n    for (let i = 1; i <= stage.levelsPerSet; i++) {\r\n        const levelItem = document.createElement('div');\r\n        const levelKey = `${gameState.currentStage}_${setId}_${i}`;\r\n        \r\n        // Check if level is unlocked - use more direct access with fallback\r\n        const isUnlocked = gameState.unlockedLevels[setKey]?.has(i);\r\n        console.log(`Level ${i} unlocked:`, isUnlocked);\r\n        \r\n        const isPerfect = gameState.perfectLevels.has(levelKey);\r\n        const isCompleted = gameState.completedLevels.has(levelKey);\r\n        const isBossLevel = i === stage.bossLevel;\r\n        const isTestLevel = testLevels.includes(i);\r\n        \r\n        // Set appropriate classes\r\n        levelItem.className = 'level-item';\r\n        if (isUnlocked) levelItem.classList.add('unlocked');\r\n        if (isPerfect) levelItem.classList.add('perfect');\r\n        else if (isCompleted) levelItem.classList.add('completed');\r\n        if (isBossLevel) levelItem.classList.add('boss');\r\n        if (isTestLevel) levelItem.classList.add('test');\r\n        if (!isUnlocked) levelItem.classList.add('locked');\r\n        \r\n        levelItem.textContent = i;\r\n        \r\n        if (isUnlocked) {\r\n            levelItem.onclick = () => startLevel(i);\r\n        }\r\n        \r\n        levelGrid.appendChild(levelItem);\r\n    }\r\n    \r\n    container.appendChild(levelGrid);\r\n    \r\n    // Add legend\r\n    const legend = document.createElement('div');\r\n    legend.className = 'level-type-legend';\r\n    legend.innerHTML = `\r\n        <div class=\"legend-item\">\r\n            <div class=\"legend-color\" style=\"background: linear-gradient(135deg, var(--accent), rgba(30, 144, 255, 0.7));\"></div>\r\n            <span>Normal</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n            <div class=\"legend-color\" style=\"background: linear-gradient(135deg, var(--success), #45b649);\"></div>\r\n            <span>Completed</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n            <div class=\"legend-color\" style=\"background: linear-gradient(135deg, var(--gold), #FFA500);\"></div>\r\n            <span>Perfect</span>\r\n        </div>\r\n        <div class=\"legend-item\">\r\n            <div class=\"legend-color\" style=\"background: linear-gradient(135deg, var(--gold), var(--accent));\"></div>\r\n            <span>Boss</span>\r\n        </div>\r\n    `;\r\n    \r\n    container.appendChild(legend);\r\n    \r\n    // Show the screen\r\n    showScreen('level-screen');\r\n}\r\n\r\n// Helper functions for the level screen\r\nfunction getSetIcon(stageId, setId) {\r\n    const baseIcons = {\r\n        1: 'fas fa-book',\r\n        2: 'fas fa-graduation-cap',\r\n        3: 'fas fa-school',\r\n        4: 'fas fa-university',\r\n        5: 'fas fa-brain'\r\n    };\r\n    \r\n    // Adjust icon based on set number\r\n    const variations = [\r\n        'fas fa-book-open', \r\n        'fas fa-book-reader', \r\n        'fas fa-bookmark', \r\n        'fas fa-pencil-alt',\r\n        'fas fa-pen'\r\n    ];\r\n    \r\n    // Use base icon for first set, variations for others\r\n    return setId === 1 ? baseIcons[stageId] || 'fas fa-star' : \r\n        variations[(setId - 2) % variations.length] || 'fas fa-star';\r\n}\r\n\r\nfunction getSetDescription(stageId, setId) {\r\n    const stageNames = {\r\n        1: 'Beginner',\r\n        2: 'Elementary',\r\n        3: 'Intermediate',\r\n        4: 'Advanced',\r\n        5: 'Expert'\r\n    };\r\n    \r\n    // Generic descriptions that combine stage and set\r\n    return `${stageNames[stageId] || 'Advanced'} vocabulary - Group ${setId}`;\r\n}\r\n\r\nfunction calculateWordsForLevel(level, vocabulary) {\r\n    const totalWords = vocabulary.words.length;\r\n    const wordSurplus = totalWords - 50;\r\n\r\n    // If we haven't already created a randomized index mapping for this vocabulary set\r\n    // then create one and store it in the vocabulary object\r\n    if (!vocabulary.randomIndices) {\r\n        // Create an array of indices and shuffle it\r\n        vocabulary.randomIndices = Array.from({ length: totalWords }, (_, i) => i);\r\n        // Fisher-Yates shuffle algorithm\r\n        for (let i = vocabulary.randomIndices.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [vocabulary.randomIndices[i], vocabulary.randomIndices[j]] = \r\n            [vocabulary.randomIndices[j], vocabulary.randomIndices[i]];\r\n        }\r\n        console.log('Created randomized word indices:', vocabulary.randomIndices);\r\n    }\r\n\r\n    // Boss Level (21) - all words from the set with special mechanics\r\n    if (level === 21) {\r\n        return {\r\n            startIndex: 0,\r\n            count: totalWords,\r\n            isBossLevel: true,\r\n            speedChallenge: true,\r\n            mixed: true,                    // Mix Hebrew/English questions\r\n            isTestLevel: true,              // Boss is always a test level\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            testLevels: [],                 // Boss level doesn't need test levels\r\n            randomIndices: vocabulary.randomIndices // Pass the entire randomized index array\r\n        };\r\n    }\r\n\r\n    // Level 1-2: Choose 3 new words\r\n    if (level === 1 || level === 2) {\r\n        // Get 3 words starting from the randomized index position\r\n        const startPos = (level - 1) * 3;\r\n        return {\r\n            startIndex: startPos,\r\n            count: 3,\r\n            testLevels: [3, 10, 21],\r\n            randomIndices: vocabulary.randomIndices.slice(startPos, startPos + 3)\r\n        };\r\n    }\r\n\r\n    // Level 3: Test words from levels 1-2\r\n    if (level === 3) {\r\n        // Test all 6 words from levels 1-2 (randomized indices 0-5)\r\n        return {\r\n            startIndex: 0,\r\n            count: 6,\r\n            isTestLevel: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(0, 6)\r\n        };\r\n    }\r\n\r\n    // Level 4-5: Choose 3 new words\r\n    if (level === 4 || level === 5) {\r\n        const startPos = 6 + (level - 4) * 3;\r\n        return {\r\n            startIndex: startPos,\r\n            count: 3,\r\n            testLevels: [6, 10, 21],\r\n            randomIndices: vocabulary.randomIndices.slice(startPos, startPos + 3)\r\n        };\r\n    }\r\n\r\n    // Level 6: Test words from levels 4-5\r\n    if (level === 6) {\r\n        return {\r\n            startIndex: 6,\r\n            count: 6,\r\n            isTestLevel: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(6, 12)\r\n        };\r\n    }\r\n\r\n    // Level 7-8: Choose 4 new words\r\n    if (level === 7 || level === 8) {\r\n        const startPos = 12 + (level - 7) * 4;\r\n        return {\r\n            startIndex: startPos,\r\n            count: 4,\r\n            testLevels: [9, 10, 21],\r\n            randomIndices: vocabulary.randomIndices.slice(startPos, startPos + 4)\r\n        };\r\n    }\r\n\r\n    // Level 9: Test words from levels 7-8\r\n    if (level === 9) {\r\n        return {\r\n            startIndex: 12,\r\n            count: 8,\r\n            isTestLevel: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(12, 20)\r\n        };\r\n    }\r\n\r\n    // Level 10: Test words from levels 1,2,4,5,7,8\r\n    if (level === 10) {\r\n        return {\r\n            startIndex: 0,\r\n            count: 20,\r\n            isTestLevel: true,\r\n            speedChallenge: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(0, 20)\r\n        };\r\n    }\r\n\r\n    // Level 11-12: Choose 4 new words\r\n    if (level === 11 || level === 12) {\r\n        const startPos = 20 + (level - 11) * 4;\r\n        return {\r\n            startIndex: startPos,\r\n            count: 4,\r\n            testLevels: [13, 20, 21],\r\n            randomIndices: vocabulary.randomIndices.slice(startPos, startPos + 4)\r\n        };\r\n    }\r\n\r\n    // Level 13: Test words from levels 11-12\r\n    if (level === 13) {\r\n        return {\r\n            startIndex: 20,\r\n            count: 8,\r\n            isTestLevel: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(20, 28)\r\n        };\r\n    }\r\n\r\n    // Level 14-15: Choose 5-6 new words\r\n    if (level === 14 || level === 15) {\r\n        const count = level === 14 ? 5 : 6;\r\n        const startPos = 28 + (level === 14 ? 0 : 5);\r\n        return {\r\n            startIndex: startPos,\r\n            count: count,\r\n            testLevels: [16, 20, 21],\r\n            randomIndices: vocabulary.randomIndices.slice(startPos, startPos + count)\r\n        };\r\n    }\r\n\r\n    // Level 16: Test words from levels 14-15\r\n    if (level === 16) {\r\n        return {\r\n            startIndex: 28,\r\n            count: 11,\r\n            isTestLevel: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(28, 39)\r\n        };\r\n    }\r\n\r\n    // Level 17-18: Flexible word count based on total vocabulary\r\n    if (level === 17 || level === 18) {\r\n        const baseCount = level === 17 ? 5 : 6;\r\n        const adjustedCount = baseCount + (wordSurplus > 0 ? wordSurplus : 0);\r\n        const startPos = 39 + (level === 17 ? 0 : baseCount);\r\n        return {\r\n            startIndex: startPos,\r\n            count: adjustedCount,\r\n            testLevels: [19, 20, 21],\r\n            randomIndices: vocabulary.randomIndices.slice(startPos, startPos + adjustedCount)\r\n        };\r\n    }\r\n\r\n    // Level 19: Test words from levels 17-18\r\n    if (level === 19) {\r\n        return {\r\n            startIndex: 39,\r\n            count: 11,\r\n            isTestLevel: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(39, 50)\r\n        };\r\n    }\r\n\r\n    // Level 20: Test words from levels 11,12,14,15,17,18\r\n    if (level === 20) {\r\n        return {\r\n            startIndex: 20,\r\n            count: 30,\r\n            isTestLevel: true,\r\n            speedChallenge: true,\r\n            mixed: true,\r\n            isHebrewToEnglish: Math.random() < 0.5,\r\n            randomIndices: vocabulary.randomIndices.slice(20, 50)\r\n        };\r\n    }\r\n}\r\n\r\nfunction getUnusedWords(vocabulary) {\r\n    // Track used words in gameState\r\n    if (!gameState.usedWords) gameState.usedWords = new Set();\r\n    \r\n    return vocabulary.words.map((_, index) => index)\r\n        .filter(i => !gameState.usedWords.has(i));\r\n}\r\n\r\nfunction selectRandomWords(availableIndices, count) {\r\n    const selected = new Set();\r\n    \r\n    while (selected.size < count && availableIndices.length > selected.size) {\r\n        const randomIndex = Math.floor(Math.random() * availableIndices.length);\r\n        selected.add(availableIndices[randomIndex]);\r\n        gameState.usedWords.add(availableIndices[randomIndex]);\r\n    }\r\n    \r\n    return Array.from(selected);\r\n}\r\n\r\nfunction generateAnswerChoices(correctAnswer, vocabulary) {\r\n    const choices = new Set([correctAnswer]);\r\n    const allChoices = vocabulary.translations;\r\n    \r\n    while (choices.size < 3) {\r\n        const randomChoice = allChoices[Math.floor(Math.random() * allChoices.length)];\r\n        choices.add(randomChoice);\r\n    }\r\n    \r\n    return Array.from(choices).sort(() => Math.random() - 0.5);\r\n}\r\n\r\nfunction startLevel(level) {\r\n  gameState.currentLevel = level;\r\n  \r\n  // Save game context\r\n  const gameContext = {\r\n    stage: gameState.currentStage,\r\n    set: gameState.currentSet,\r\n    level: level,\r\n    timestamp: Date.now()\r\n  };\r\n  \r\n  console.log(\"Setting game context at level start:\", gameContext);\r\n  localStorage.setItem(\"gameContext\", JSON.stringify(gameContext));\r\n  \r\n  // Reset game state\r\n  currentGame.wrongStreak = 0;\r\n  currentGame.correctAnswers = 0;\r\n  currentGame.levelStartTime = Date.now();\r\n  currentGame.firstAttempt = true;\r\n  currentGame.streakBonus = true;\r\n  updatePerkButtons();\r\n  \r\n  console.log(\"Current unlocked levels:\", gameState.unlockedLevels);\r\n  \r\n  const setKey = `${gameState.currentStage}_${gameState.currentSet}`;\r\n  console.log(`Current set key: ${setKey}, unlocked levels in set:`, \r\n    gameState.unlockedLevels[setKey] ? Array.from(gameState.unlockedLevels[setKey]) : \"none\");\r\n  \r\n  // Show/hide UI elements\r\n  const perksContainer = document.querySelector('.perks-container');\r\n  const powerupsContainer = document.querySelector('.powerups-container');\r\n  \r\n  if (perksContainer) perksContainer.style.display = 'flex';\r\n  if (powerupsContainer) powerupsContainer.style.display = 'none';\r\n  \r\n  const coinCount = document.querySelector('.coin-count');\r\n  if (coinCount) coinCount.textContent = gameState.coins || 0;\r\n  \r\n  const coinsContainer = document.querySelector('.coins-container');\r\n  if (coinsContainer) coinsContainer.style.display = 'flex';\r\n  \r\n  gameState.currentStage = gameState.currentStage || 1;\r\n  gameState.currentSet = gameState.currentSet || 1;\r\n  gameState.currentLevel = level;\r\n  \r\n  console.log(`Starting level: Stage ${gameState.currentStage}, Set ${gameState.currentSet}, Level ${level}`);\r\n  addAdminTestButton();\r\n  \r\n  // Check if premium is required\r\n  const userStatus = currentUser ? currentUser.status : 'unregistered';\r\n  if ([2, 7, 11, 15, 20].includes(level) && userStatus !== 'premium') {\r\n    const currentLevel = level;\r\n    \r\n    if (!currentUser) {\r\n      return showUnregisteredWarning(() => {\r\n        proceedWithLevel(currentLevel);\r\n      });\r\n    }\r\n    \r\n    if (!localStorage.getItem(`upgradeRequested_${currentUser.id}`)) {\r\n      return showUpgradePrompt(() => {\r\n        proceedWithLevel(currentLevel);\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Determine if this is a boss level\r\n  if (level === 21) {\r\n    currentGame.isBossLevel = true;\r\n    console.log(\"Boss level detected\");\r\n    setTimeout(applyBossLevelStyles, 100);\r\n    setTimeout(applyBossLevelStyles, 500);\r\n  } else {\r\n    currentGame.isBossLevel = false;\r\n  }\r\n  \r\n  // Determine if we need to show the full intro\r\n  // Force full intro for boss levels or first level of a set\r\n  const forceFullIntro = level === 21 || level === 1;\r\n  \r\n  proceedWithLevel(level, forceFullIntro);\r\n}\r\n\r\nfunction addAdminTestButton() {\r\n  console.log(\"Checking for admin user...\");\r\n  \r\n  // Remove any existing button first\r\n  const existingButton = document.getElementById('admin-test-button');\r\n  if (existingButton) {\r\n    existingButton.remove();\r\n  }\r\n  \r\n  // Debug the current user\r\n  console.log(\"Current user:\", currentUser ? currentUser.email : \"No user\");\r\n  \r\n  // Check if current user is admin123@gmail.com (more permissive check)\r\n  if (!currentUser || \r\n      (currentUser.email !== 'admin123@gmail.com' && \r\n       !currentUser.email?.includes('admin123'))) {\r\n    console.log(\"Not admin user, not adding button\");\r\n    return;\r\n  }\r\n  \r\n  console.log(\"Admin user detected, adding test button\");\r\n  \r\n  // Create the test button\r\n  const adminButton = document.createElement('button');\r\n  adminButton.id = 'admin-test-button';\r\n  adminButton.textContent = 'Jump to Level 20';\r\n  adminButton.style.cssText = `\r\n    position: fixed;\r\n    top: 80px;\r\n    right: 20px;\r\n    background: #ff5722;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    z-index: 2000;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\r\n    font-weight: bold;\r\n  `;\r\n  \r\n  // Add click handler\r\n  adminButton.onclick = function() {\r\n    console.log(\"Admin button clicked, jumping to level 20\");\r\n    // Jump to level 20\r\n    gameState.currentLevel = 21;\r\n    startLevel(21);\r\n  };\r\n  \r\n  // Add to document body instead of question screen for higher visibility\r\n  document.body.appendChild(adminButton);\r\n  \r\n  console.log(\"Admin test button added to body\");\r\n}\r\n\r\nfunction findFurthestProgression() {\r\n    console.log(\"Finding furthest progression\");\r\n    \r\n    // First check if there's a saved game context\r\n    const savedContext = localStorage.getItem(\"gameContext\");\r\n    if (savedContext) {\r\n        try {\r\n            const context = JSON.parse(savedContext);\r\n            if (context.stage && context.set && context.level) {\r\n                console.log(\"Found saved game context:\", context);\r\n                return {\r\n                    stage: context.stage,\r\n                    set: context.set,\r\n                    level: context.level\r\n                };\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error parsing saved game context:\", e);\r\n        }\r\n    }\r\n    \r\n    console.log(\"Current game state:\", {\r\n        currentStage: gameState.currentStage,\r\n        currentSet: gameState.currentSet,\r\n        currentLevel: gameState.currentLevel,\r\n        unlockedSets: Object.fromEntries(Object.entries(gameState.unlockedSets || {}).map(([k, v]) => [k, Array.from(v || [])])),\r\n        unlockedLevels: Object.fromEntries(Object.entries(gameState.unlockedLevels || {}).map(([k, v]) => [k, Array.from(v || [])])),\r\n        perfectLevels: Array.from(gameState.perfectLevels || []),\r\n        completedLevels: Array.from(gameState.completedLevels || [])\r\n    });\r\n    \r\n    // If we have current stage and level information, use that directly\r\n    if (gameState.currentStage && gameState.currentSet && gameState.currentLevel) {\r\n        console.log(`Using current game state: Stage ${gameState.currentStage}, Set ${gameState.currentSet}, Level ${gameState.currentLevel}`);\r\n        return {\r\n            stage: gameState.currentStage,\r\n            set: gameState.currentSet,\r\n            level: gameState.currentLevel\r\n        };\r\n    }\r\n    \r\n    // If that doesn't work, fall back to stage 1, set 1, level 1\r\n    console.log(\"No progression found, defaulting to beginning\");\r\n    return {\r\n        stage: 1,\r\n        set: 1,\r\n        level: 1\r\n    };\r\n}\r\n\r\nfunction proceedWithLevel(level, forceFullIntro = false) {\r\n  currentGame.restartsRemaining = currentGame.restartsRemaining || 2;\r\n  gameState.currentLevel = level;\r\n  \r\n  const setKey = `${gameState.currentStage}_${gameState.currentSet}`;\r\n  const vocabularySet = vocabularySets[setKey];\r\n  \r\n  const coinCount = document.querySelector('.coin-count');\r\n  if (coinCount) {\r\n    coinCount.textContent = gameState.coins || 0;\r\n    coinCount.style.display = 'block';\r\n  }\r\n  \r\n  currentGame.startingCoins = gameState.coins;\r\n  currentGame.startingPerks = { ...gameState.perks };\r\n  currentGame.timeBonus = 0;\r\n  currentGame.initialTimeRemaining = null;\r\n  currentGame.streakBonus = true;\r\n  currentGame.levelStartTime = Date.now();\r\n  \r\n  showLevelIntro(level, () => {\r\n    setupGameState(calculateWordsForLevel(level, vocabularySet), vocabularySet);\r\n    showScreen(\"question-screen\");\r\n    addAdminTestButton();\r\n    \r\n    if (level === 21) {\r\n      console.log(\"Initializing boss level in proceedWithLevel\");\r\n      initializeBossLevel();\r\n      setTimeout(applyBossLevelStyles, 200);\r\n      loadNextBossQuestion();\r\n    } else {\r\n      updateProgressCircle();\r\n      loadNextQuestion();\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      startTimer(currentGame.words.length);\r\n    }, 200);\r\n  }, forceFullIntro);\r\n}\r\n\r\ndocument.querySelector('.perks-container').innerHTML = `\r\n    ${Object.entries(PERK_CONFIG).map(([type, config]) => `\r\n        <button class=\"perk-button\" id=\"${type}Perk\" onclick=\"buyPerk('${type}')\">\r\n            <i class=\"fas ${config.icon} perk-icon\"></i>\r\n            <span class=\"perk-count\">0</span>\r\n        </button>\r\n    `).join('')}\r\n`;\r\n\r\nfunction proceedWithLevel(levelId) {\r\n    if (!currentGame.restartsRemaining) {\r\n        currentGame.restartsRemaining = 2;\r\n    }\r\n    \r\n    gameState.currentLevel = levelId;\r\n    const setKey = `${gameState.currentStage}_${gameState.currentSet}`;\r\n    const vocabulary = vocabularySets[setKey];\r\n\r\n    // Ensure coin display remains visible\r\n    const coinDisplay = document.querySelector('.coin-count');\r\n    if (coinDisplay) {\r\n        coinDisplay.textContent = gameState.coins || 0;\r\n        coinDisplay.style.display = 'block';\r\n    }\r\n\r\n    // Prepare all game state first\r\n    currentGame.startingCoins = gameState.coins;\r\n    currentGame.startingPerks = { ...gameState.perks };\r\n    currentGame.timeBonus = 0;\r\n    currentGame.initialTimeRemaining = null;\r\n    currentGame.streakBonus = true;\r\n    currentGame.levelStartTime = Date.now();\r\n    \r\n    // Show intro, but prepare the level during the curtain-down moment\r\n    showLevelIntro(levelId, () => {\r\n        // Setup all game state while curtain is down\r\n        const levelConfig = calculateWordsForLevel(levelId, vocabulary);\r\n        setupGameState(levelConfig, vocabulary);\r\n        \r\n        // Prepare the question screen while curtain is still down\r\n        showScreen('question-screen');\r\n        updateProgressCircle();\r\n        loadNextQuestion();\r\n        \r\n        // Only start the timer after curtain is fully up\r\n        setTimeout(() => {\r\n            startTimer(currentGame.words.length);\r\n        }, 200);\r\n    });\r\n}\r\n\r\nfunction setupGameState(levelConfig, vocabulary) {\r\n    if (typeof levelConfig === 'object') {\r\n        // Check if we have randomized indices\r\n        if (levelConfig.randomIndices) {\r\n            // Create new arrays with just the words we need based on random indices\r\n            const randomWords = levelConfig.randomIndices.map(index => vocabulary.words[index]);\r\n            const randomTranslations = levelConfig.randomIndices.map(index => vocabulary.translations[index]);\r\n            \r\n            Object.assign(currentGame, {\r\n                words: randomWords,\r\n                translations: randomTranslations,\r\n                currentIndex: 0,\r\n                correctAnswers: 0,\r\n                firstAttempt: true,\r\n                isHebrewToEnglish: levelConfig.isHebrewToEnglish || false,\r\n                mixed: levelConfig.mixed || false,\r\n                speedChallenge: levelConfig.speedChallenge || false,\r\n                isBossLevel: levelConfig.isBossLevel || false\r\n            });\r\n        } else {\r\n            // Fallback to original behavior if randomIndices not available\r\n            const { startIndex, count, isHebrewToEnglish, mixed, speedChallenge, isBossLevel } = levelConfig;\r\n            Object.assign(currentGame, {\r\n                words: vocabulary.words.slice(startIndex, startIndex + count),\r\n                translations: vocabulary.translations.slice(startIndex, startIndex + count),\r\n                currentIndex: 0,\r\n                correctAnswers: 0,\r\n                firstAttempt: true,\r\n                isHebrewToEnglish: isHebrewToEnglish || false,\r\n                mixed: mixed || false,\r\n                speedChallenge: speedChallenge || false,\r\n                isBossLevel: isBossLevel || false\r\n            });\r\n        }\r\n    } else {\r\n        // Legacy behavior for backwards compatibility\r\n        Object.assign(currentGame, {\r\n            words: vocabulary.words.slice(0, levelConfig),\r\n            translations: vocabulary.translations.slice(0, levelConfig),\r\n            currentIndex: 0,\r\n            correctAnswers: 0,\r\n            firstAttempt: true,\r\n            isHebrewToEnglish: false,\r\n            mixed: false,\r\n            speedChallenge: false,\r\n            isBossLevel: false\r\n        });\r\n    }\r\n}\r\n\r\nfunction handleLevelProgression() {\r\n  currentGame.isBossLevel && !currentGame.bossRewardApplied && (currentGame.bossRewardApplied = !0);\r\n  \r\n  const e = gameStructure.stages[gameState.currentStage - 1],\r\n        t = gameState.currentLevel === e.levelsPerSet,\r\n        n = gameState.currentSet === e.numSets,\r\n        r = currentUser ? currentUser.status : \"unregistered\";\r\n  \r\n  if (t) {\r\n    if (gameState.currentStage >= 2 && 1 === gameState.currentSet && \"premium\" !== r) {\r\n      // Save completed stage info for future upgrade\r\n      localStorage.setItem(\"completedTrialStage\", gameState.currentStage);\r\n      return showScreen(\"welcome-screen\"), void setTimeout((()=>{\r\n        showUpgradePrompt()\r\n      }), 500);\r\n    }\r\n    \r\n    n ? gameState.currentStage < 5 ? (gameState.currentStage++, gameState.currentSet = 1, startLevel(1)) : showScreen(\"stage-screen\") : (gameState.currentSet++, startLevel(1))\r\n  } else startLevel(gameState.currentLevel + 1)\r\n}\r\n\r\nfunction updateNavigationIcons(screenId) {\r\n    // Remove existing navigation containers\r\n    \r\n    // Screens that should have navigation\r\n    const screensWithNav = ['stage-screen', 'set-screen', 'level-screen', 'question-screen'];\r\n    \r\n    if (screensWithNav.includes(screenId)) {\r\n        const navContainer = document.createElement('div');\r\n        navContainer.className = 'screen-nav';\r\n        \r\n        // Home button (always present)\r\n        const homeButton = document.createElement('button');\r\n        homeButton.className = 'home-button';\r\n        homeButton.innerHTML = '<i class=\"fas fa-home\"></i>';\r\n        homeButton.onclick = () => showScreen('welcome-screen');\r\n        navContainer.appendChild(homeButton);\r\n        \r\n        // Back button (not for stage screen)\r\n        if (screenId !== 'stage-screen') {\r\n            const backButton = document.createElement('button');\r\n            backButton.className = 'back-button';\r\n            backButton.innerHTML = '<i class=\"fas fa-arrow-left\"></i>';\r\n            \r\n            // Determine back navigation based on current screen\r\n            switch(screenId) {\r\n                case 'set-screen':\r\n                    backButton.onclick = () => showScreen('stage-screen');\r\n                    break;\r\n                case 'level-screen':\r\n                    backButton.onclick = () => showSetScreen(gameState.currentStage);\r\n                    break;\r\n                case 'question-screen':\r\n                    backButton.onclick = () => stopLevelAndGoBack();\r\n                    break;\r\n            }\r\n            \r\n            navContainer.appendChild(backButton);\r\n        }\r\n        \r\n        // Add navigation to the current screen\r\n        const currentScreen = document.getElementById(screenId);\r\n        currentScreen.appendChild(navContainer);\r\n    }\r\n}\r\n\r\nfunction updateProgressCircle() {\r\n  const progressElement = document.querySelector('.progress-circle .progress');\r\n  const circumference = 2 * Math.PI * 54;\r\n  const progress = currentGame.currentIndex / currentGame.words.length;\r\n\r\n  progressElement.style.strokeDasharray = `${circumference} ${circumference}`;\r\n  progressElement.style.strokeDashoffset = circumference * (1 - progress);\r\n\r\n  // Create a smooth, logical color transition\r\n  if (progress <= 0.25) {\r\n    // Red to orange gradient (0-25%)\r\n    const hue = Math.floor(progress * 4 * 30); // 0 to 30\r\n    progressElement.style.stroke = `hsl(${hue}, 100%, 45%)`;\r\n  } else if (progress <= 0.5) {\r\n    // Orange to yellow-green gradient (25-50%)\r\n    const hue = 30 + Math.floor((progress - 0.25) * 4 * 40); // 30 to 70\r\n    progressElement.style.stroke = `hsl(${hue}, 100%, 45%)`;\r\n  } else if (progress <= 0.75) {\r\n    // Yellow-green to green gradient (50-75%)\r\n    const hue = 70 + Math.floor((progress - 0.5) * 4 * 40); // 70 to 110\r\n    progressElement.style.stroke = `hsl(${hue}, 100%, 40%)`;\r\n  } else {\r\n    // Green to bright green gradient (75-100%)\r\n    const hue = 110 + Math.floor((progress - 0.75) * 4 * 30); // 110 to 140\r\n    progressElement.style.stroke = `hsl(${hue}, 100%, 40%)`;\r\n  }\r\n}\r\n\r\nfunction loadNextQuestion() {\r\n  // Clear any previous button classes\r\n  document.querySelectorAll('.buttons button').forEach(button => {\r\n    button.classList.remove('correct', 'wrong');\r\n  });\r\n\r\n  // Check if there are any words left\r\n  if (currentGame.currentIndex >= currentGame.words.length) return;\r\n\r\n  const questionWordElement = document.getElementById('question-word');\r\n  \r\n  // Determine if we should show Hebrew or English based on level or random factor\r\n  const isSpecialLevel = [3, 6, 9, 10, 13, 16, 19, 20, 21].includes(gameState.currentLevel);\r\n  const isHebrewToEnglish = isSpecialLevel && Math.random() < 0.5;\r\n  \r\n  const index = currentGame.currentIndex;\r\n  const wordToDisplay = isHebrewToEnglish ? currentGame.translations[index] : currentGame.words[index];\r\n  const correctAnswer = isHebrewToEnglish ? currentGame.words[index] : currentGame.translations[index];\r\n  \r\n  // Get the pool of potential answers\r\n  const answerPool = isHebrewToEnglish ? currentGame.words : currentGame.translations;\r\n  \r\n  // Create a set to avoid duplicates, starting with the correct answer\r\n  const answerSet = new Set([correctAnswer]);\r\n  \r\n  // Add random incorrect answers until we have 3 options\r\n  while (answerSet.size < 3) {\r\n    const randomAnswer = answerPool[Math.floor(Math.random() * answerPool.length)];\r\n    if (randomAnswer !== correctAnswer) {\r\n      answerSet.add(randomAnswer);\r\n    }\r\n  }\r\n  \r\n  // Generate buttons with the answers\r\n  const buttonsContainer = document.getElementById('buttons');\r\n  buttonsContainer.innerHTML = '';\r\n  \r\n  // Convert set to array and shuffle\r\n  const shuffledAnswers = Array.from(answerSet).sort(() => Math.random() - 0.5);\r\n  \r\n  // Create buttons for each answer\r\n  shuffledAnswers.forEach(answer => {\r\n    const button = document.createElement('button');\r\n    button.textContent = answer;\r\n    button.onclick = () => handleAnswer(answer === correctAnswer);\r\n    buttonsContainer.appendChild(button);\r\n  });\r\n  \r\n  // Apply 3D carousel animation\r\n  if (currentGame.currentIndex > 0) {\r\n    questionWordElement.classList.add('exiting');\r\n    setTimeout(() => {\r\n      questionWordElement.textContent = wordToDisplay;\r\n      questionWordElement.classList.remove('exiting');\r\n      questionWordElement.classList.add('entering');\r\n      setTimeout(() => {\r\n        questionWordElement.classList.remove('entering');\r\n      }, 500); // Match the animation duration\r\n    }, 500); // Match the animation duration\r\n  } else {\r\n    // First word just appears\r\n    questionWordElement.textContent = wordToDisplay;\r\n    questionWordElement.classList.add('entering');\r\n    setTimeout(() => {\r\n      questionWordElement.classList.remove('entering');\r\n    }, 500);\r\n  }\r\n}\r\n\r\nfunction showBossVictoryScreen() {\r\n  console.log(\"Boss victory screen function called - redirecting to new implementation\");\r\n  showBossDefeatEffect();\r\n}\r\n\r\nfunction addAdminTestingButton() {\r\n  // Only add for admin user\r\n  if (!currentUser || currentUser.email !== 'admin123@gmail.com') return;\r\n  \r\n  const questionScreen = document.getElementById('question-screen');\r\n  \r\n  // Check if button already exists\r\n  if (document.getElementById('admin-test-button')) return;\r\n  \r\n  const adminButton = document.createElement('button');\r\n  adminButton.id = 'admin-test-button';\r\n  adminButton.innerHTML = 'Jump to Level 20';\r\n  adminButton.style.cssText = `\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n    background: #ff5722;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    z-index: 1000;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\r\n  `;\r\n  \r\n  adminButton.onclick = function() {\r\n    // Jump to level 20\r\n    gameState.currentLevel = 20;\r\n    startLevel(20);\r\n  };\r\n  \r\n  questionScreen.appendChild(adminButton);\r\n}\r\n\r\nfunction awardTimeBonus() {\r\n   const timeSpent = (Date.now() - currentGame.questionStartTime) / 1000;\r\n   const maxTime = 10; // Maximum time allowed per question\r\n   if (timeSpent < maxTime) {\r\n       const bonusCoins = Math.floor(maxTime - timeSpent);\r\n       currentGame.timeBonus += bonusCoins;\r\n       return bonusCoins;\r\n   }\r\n   return 0;\r\n}\r\n\r\nfunction pulseCoins(times = 1) {\r\n    // Update both the header coin icon and the in-game coin icon\r\n    const coinIcons = document.querySelectorAll('.coin-icon');\r\n    \r\n    coinIcons.forEach(coinIcon => {\r\n        let pulseCount = 0;\r\n        const doPulse = () => {\r\n            coinIcon.classList.add('coin-pulse');\r\n            setTimeout(() => {\r\n                coinIcon.classList.remove('coin-pulse');\r\n                pulseCount++;\r\n                if (pulseCount < times) {\r\n                    setTimeout(doPulse, 100);\r\n                }\r\n            }, 500);\r\n        };\r\n        \r\n        doPulse();\r\n    });\r\n}\r\n\r\n\r\nfunction updateAllCoinDisplays() {\r\n    const displays = document.querySelectorAll('.coin-count');\r\n    displays.forEach(display => {\r\n        const currentValue = parseInt(display.textContent) || 0;\r\n        let targetValue;\r\n\r\n        // Determine the target value based on the context\r\n        if (window.location.pathname.includes('arcade')) {\r\n            targetValue = currentGame.coins || 0;\r\n        } else {\r\n            targetValue = gameState.coins || 0;\r\n        }\r\n\r\n        // Ensure we're using actual numeric values\r\n        const startNum = Number(currentValue);\r\n        const endNum = Number(targetValue);\r\n\r\n        animateNumber(display, startNum, endNum);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nfunction eliminateWrongAnswer() {\r\n   const buttons = document.querySelectorAll('.buttons button');\r\n   const correctAnswer = currentGame.isHebrewToEnglish ? \r\n       currentGame.words[currentGame.currentIndex] : \r\n       currentGame.translations[currentGame.currentIndex];\r\n   \r\n   const wrongButtons = Array.from(buttons).filter(btn => \r\n       btn.textContent !== correctAnswer\r\n   );\r\n   \r\n   if (wrongButtons.length > 0) {\r\n       const buttonToDisable = wrongButtons[Math.floor(Math.random() * wrongButtons.length)];\r\n       buttonToDisable.disabled = true;\r\n       buttonToDisable.style.opacity = '0.5';\r\n   }\r\n}\r\n\r\n// REPLACE the revealCorrectAnswer function with this improved version\r\nfunction revealCorrectAnswer() {\r\n    const correctAnswer = currentGame.isHebrewToEnglish ? \r\n        currentGame.words[currentGame.currentIndex] : \r\n        currentGame.translations[currentGame.currentIndex];\r\n    \r\n    document.querySelectorAll('.buttons button').forEach(button => {\r\n        if (button.textContent === correctAnswer) {\r\n            button.classList.add('correct');\r\n            // Simulate a click on the correct button after a short delay\r\n            setTimeout(() => {\r\n                if (currentGame.isCustomPractice) {\r\n                    handleCustomPracticeAnswer(true);\r\n                } else {\r\n                    handleAnswer(true);\r\n                }\r\n            }, 1000);\r\n        } else {\r\n            button.disabled = true;\r\n            button.style.opacity = '0.5';\r\n        }\r\n    });\r\n}\r\n\r\n// REPLACE the buyPerk function with this improved version\r\nfunction buyPerk(e) {\r\n    const t = PERK_CONFIG[e];\r\n    \r\n    if (t) {\r\n        if (gameState.coins < t.cost) {\r\n            showNotification(`Need ${t.cost} coins!`, \"error\");\r\n        } else {\r\n            gameState.coins -= t.cost;\r\n            updateAllCoinDisplays();\r\n            \r\n            switch (e) {\r\n                case \"timeFreeze\":\r\n                    isFrozen = true;\r\n                    setTimeout(() => {\r\n                        isFrozen = false;\r\n                    }, t.duration);\r\n                    break;\r\n                case \"skip\":\r\n                    // Check if it's custom practice mode\r\n                    if (currentGame.isCustomPractice) {\r\n                        handleCustomPracticeAnswer(true, true);\r\n                    } else {\r\n                        handleAnswer(true, true);\r\n                    }\r\n                    break;\r\n                case \"clue\":\r\n                    const e = document.querySelectorAll(\".buttons button\");\r\n                    const n = currentGame.isHebrewToEnglish ? \r\n                        currentGame.words[currentGame.currentIndex] : \r\n                        currentGame.translations[currentGame.currentIndex];\r\n                    const r = Array.from(e).filter((e => e.textContent !== n));\r\n                    \r\n                    if (r.length > 0) {\r\n                        const e = r[Math.floor(Math.random() * r.length)];\r\n                        e.disabled = true;\r\n                        e.style.opacity = \"0.5\";\r\n                    }\r\n                    break;\r\n                case \"reveal\":\r\n                    revealCorrectAnswer();\r\n                    break;\r\n            }\r\n            \r\n            saveProgress();\r\n        }\r\n    }\r\n}\r\n\r\n// New helper function for smooth number transition\r\nfunction animateNumberChange(element, startValue, endValue) {\r\n    if (!element) return;\r\n    \r\n    const duration = 300; // Shorter animation for quick updates\r\n    const frames = 20;\r\n    const increment = (endValue - startValue) / frames;\r\n    \r\n    let currentFrame = 0;\r\n    let currentValue = startValue;\r\n\r\n    function updateFrame() {\r\n        currentFrame++;\r\n        currentValue += increment;\r\n        \r\n        if (currentFrame <= frames) {\r\n            // Round to nearest integer\r\n            element.textContent = Math.round(currentValue);\r\n            requestAnimationFrame(updateFrame);\r\n        } else {\r\n            // Ensure final value is exact\r\n            element.textContent = endValue;\r\n        }\r\n    }\r\n\r\n    requestAnimationFrame(updateFrame);\r\n}\r\n\r\n\r\nfunction handleLevelCompletion() {\r\n    clearTimer();\r\n    \r\n    if (currentGame.isBossLevel) {\r\n        if (currentGame.bossRewardApplied) {\r\n            // Boss reward already applied, just restore and show effect\r\n            console.log(\"Boss already defeated and rewarded, just showing effects\");\r\n            restoreFromBossLevel();\r\n            showBossDefeatEffect();\r\n        } else {\r\n            // This is the initial boss defeat\r\n            console.log(\"First boss defeat, applying reward\");\r\n            restoreFromBossLevel();\r\n            // Don't add coins here! Let showBossDefeatEffect handle it\r\n            currentGame.bossRewardApplied = true;\r\n            showBossDefeatEffect();\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Non-boss level completion code follows...\r\n    const levelKey = `${gameState.currentStage}_${gameState.currentSet}_${gameState.currentLevel}`;\r\n    console.log(`Completing level: ${levelKey}`);\r\n    \r\n    const wasAlreadyCompleted = gameState.perfectLevels.has(levelKey) || gameState.completedLevels.has(levelKey);\r\n    console.log(`Level was previously completed: ${wasAlreadyCompleted}`);\r\n    \r\n    const isPerfect = currentGame.streakBonus && currentGame.correctAnswers === currentGame.words.length;\r\n    \r\n    if (!wasAlreadyCompleted && isPerfect) {\r\n        // Perfect completion of a new level\r\n        const coinReward = 5;\r\n        CoinsManager.updateCoins(coinReward).then(() => {\r\n            updateLevelProgress(gameState.currentStage, gameState.currentSet, gameState.currentLevel, true, true);\r\n            const questionScreen = document.getElementById('question-screen').getBoundingClientRect();\r\n            createParticles(questionScreen.left + questionScreen.width/2, questionScreen.top + questionScreen.height/2);\r\n        });\r\n    } else if (!wasAlreadyCompleted) {\r\n        // Non-perfect completion of a new level\r\n        updateLevelProgress(gameState.currentStage, gameState.currentSet, gameState.currentLevel, true, false);\r\n    }\r\n    \r\n    pulseCoins(5);\r\n    updatePerkButtons();\r\n  \r\n  // Determine next steps\r\n  const stageData = gameStructure.stages[gameState.currentStage - 1];\r\n  const isLastLevelInSet = gameState.currentLevel === stageData.levelsPerSet;\r\n  const isLastSetInStage = gameState.currentSet === stageData.numSets;\r\n  const userStatus = currentUser ? currentUser.status : \"unregistered\";\r\n  \r\n  // Check if we completed a set\r\n  if (isLastLevelInSet) {\r\n    // Update game progression by checking set completion\r\n    checkSetCompletion(gameState.currentStage, gameState.currentSet);\r\n    \r\n    if (isLastSetInStage) {\r\n      // Completed the last set in the stage\r\n      if (userStatus === \"premium\" && gameState.currentStage < 5) {\r\n        // Premium user, not on last stage, go to next stage\r\n        setTimeout(() => {\r\n          gameState.currentStage++;\r\n          gameState.currentSet = 1;\r\n          gameState.currentLevel = 1;\r\n          startLevel(1);\r\n        }, 1500);\r\n      } else {\r\n        // Either not premium, or last stage reached\r\n        setTimeout(() => showScreen(\"stage-cascade-screen\"), 1500);\r\n      }\r\n    } else {\r\n      // Last level in set but not last set in stage\r\n      setTimeout(() => {\r\n        gameState.currentSet++;\r\n        gameState.currentLevel = 1;\r\n        startLevel(1);\r\n      }, 1500);\r\n    }\r\n  } else {\r\n    // Not the last level in set, simply go to next level\r\n    setTimeout(() => {\r\n      gameState.currentLevel++;\r\n      startLevel(gameState.currentLevel);\r\n    }, 1500);\r\n  }\r\n}\r\n\r\nfunction checkSetCompletion(stage, set) {\r\n  // Get total number of levels in the set\r\n  const totalLevels = gameStructure.stages[stage-1].levelsPerSet;\r\n  \r\n  // Check if all levels are completed\r\n  let completedCount = 0;\r\n  for (let i = 1; i <= totalLevels; i++) {\r\n    const levelKey = `${stage}_${set}_${i}`;\r\n    if (gameState.completedLevels.has(levelKey) || gameState.perfectLevels.has(levelKey)) {\r\n      completedCount++;\r\n    }\r\n  }\r\n  \r\n  console.log(`Set ${stage}-${set} completion: ${completedCount}/${totalLevels}`);\r\n  \r\n  // If all levels are completed, unlock next set\r\n  if (completedCount === totalLevels) {\r\n    console.log(`Set ${stage}-${set} is complete. Unlocking next set.`);\r\n    unlockNextSet();\r\n  }\r\n}\r\n\r\nfunction handleProgression(levelKey) {\r\n    const setKey = `${gameState.currentStage}_${gameState.currentSet}`;\r\n    if (!gameState.unlockedLevels[setKey]) {\r\n        gameState.unlockedLevels[setKey] = new Set();\r\n    }\r\n    gameState.unlockedLevels[setKey].add(gameState.currentLevel);\r\n\r\n    const currentStageConfig = gameStructure.stages[gameState.currentStage - 1];\r\n    const isLastLevelInSet = gameState.currentLevel === currentStageConfig.levelsPerSet;\r\n    const isLastSetInStage = gameState.currentSet === currentStageConfig.numSets;\r\n\r\n    // Handle unlocks\r\n    if (!isLastLevelInSet) {\r\n        gameState.unlockedLevels[setKey].add(gameState.currentLevel + 1);\r\n    } else if (!isLastSetInStage) {\r\n        unlockNextSet();\r\n    } else if (gameState.currentStage < 5) {\r\n        unlockNextStage();\r\n    }\r\n\r\n    saveProgress();\r\n    updateAllCoinDisplays();\r\n\r\n    // Progress to next level\r\n    setTimeout(() => {\r\n        if (isLastLevelInSet) {\r\n            if (!isLastSetInStage) {\r\n                gameState.currentSet++;\r\n                startLevel(1);\r\n            } else if (gameState.currentStage < 5) {\r\n                gameState.currentStage++;\r\n                gameState.currentSet = 1;\r\n                startLevel(1);\r\n            } else {\r\n                showScreen('stage-screen');\r\n            }\r\n        } else {\r\n            startLevel(gameState.currentLevel + 1);\r\n        }\r\n    }, 1500);\r\n}\r\n\r\nfunction createCompletionParticles() {\r\n    const questionScreen = document.getElementById('question-screen');\r\n    const rect = questionScreen.getBoundingClientRect();\r\n    const viewportX = rect.left + (rect.width / 2);\r\n    const viewportY = rect.top + (rect.height / 2);\r\n    \r\n    for (let i = 0; i < 5; i++) {\r\n        setTimeout(() => createParticles(viewportX, viewportY), i * 300);\r\n    }\r\n}\r\n\r\n\r\nfunction activatePerk(perkType, cost) {\r\n    const powerupCooldown = powerupCooldowns.get(perkType) || 0;\r\n    const now = Date.now();\r\n    \r\n    if (now - powerupCooldown < 5000) { // 5-second cooldown\r\n        showNotification('Perk is on cooldown', 'warning');\r\n        return;\r\n    }\r\n\r\n    CoinsManager.updateCoins(-cost).then(success => {\r\n        if (success) {\r\n            gameState.perks[perkType]++;\r\n            saveProgress();\r\n            updatePerkButtons();\r\n            \r\n            // Use perk immediately\r\n            usePerk(perkType);\r\n            \r\n            // Set cooldown\r\n            powerupCooldowns.set(perkType, now);\r\n            \r\n            // Show feedback\r\n            showNotification(`${perkType} activated!`, 'success');\r\n        } else {\r\n            showNotification('Not enough coins', 'error');\r\n        }\r\n    }).catch(error => {\r\n        console.error('Perk activation failed:', error);\r\n        showNotification('Failed to activate perk', 'error');\r\n    });\r\n}\r\n  \r\n\r\n// Particle background initialization\r\nfunction initializeParticles(container = document.body) {\r\n    // Ensure container is a valid DOM element\r\n    if (!(container instanceof HTMLElement)) {\r\n        container = document.body;\r\n    }\r\n    \r\n    // Find or create the particle container\r\n    let particleContainer = container.querySelector('.particle-container');\r\n    if (!particleContainer) {\r\n        particleContainer = document.createElement('div');\r\n        particleContainer.classList.add('particle-container');\r\n        container.appendChild(particleContainer);\r\n    }\r\n    \r\n    const characterSet = [\r\n        ...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\r\n        ...'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω',\r\n        ...'אבגדהוזחטיכלמנסעפצקרשת'\r\n    ];\r\n\r\n    function createLetterParticle() {\r\n        const particle = document.createElement('div');\r\n        particle.classList.add('letter-particle');\r\n        \r\n        particle.textContent = characterSet[Math.floor(Math.random() * characterSet.length)];\r\n        \r\n        const startX = Math.random() * container.clientWidth;\r\n        const startY = Math.random() * container.clientHeight;\r\n        \r\n        const moveX = -100 + Math.random() * 200;\r\n        const moveY = -100 + Math.random() * 200;\r\n        \r\n        const size = 12 + Math.random() * 16;\r\n        const opacity = 0.2 + Math.random() * 0.3;\r\n        const rotate = Math.random() * 180;\r\n        const duration = 8 + Math.random() * 10;\r\n        \r\n        particle.style.cssText = `\r\n            position: absolute;\r\n            left: ${startX}px;\r\n            top: ${startY}px;\r\n            font-size: ${size}px;\r\n            animation: letterFloat ${duration}s ease-in-out forwards;\r\n            --moveX: ${moveX}px;\r\n            --moveY: ${moveY}px;\r\n            --opacity: ${opacity};\r\n            --rotate: ${rotate}deg;\r\n            pointer-events: none;\r\n        `;\r\n        \r\n        particleContainer.appendChild(particle);\r\n        \r\n        setTimeout(() => {\r\n            particleContainer.removeChild(particle);\r\n        }, duration * 1000);\r\n    }\r\n    \r\n    // Initial particles\r\n    for (let i = 0; i < 50; i++) {\r\n        createLetterParticle();\r\n    }\r\n    \r\n    // Continuous particle generation\r\n    const particleInterval = setInterval(createLetterParticle, 1000);\r\n    \r\n    // Optional: store the interval to clear it if needed\r\n    particleContainer.dataset.intervalId = particleInterval;\r\n}\r\n\r\n// Modify the existing window.onload\r\nwindow.onload = async () => {\r\n    await checkExistingSession();\r\n    initializeGame();\r\n    updatePerkButtons();\r\n    \r\n    // Ensure particles on welcome screen\r\n    const welcomeScreen = document.getElementById('welcome-screen');\r\n    initializeParticles(welcomeScreen);\r\n    \r\n    await loadCustomLists();\r\n};\r\n\r\nfunction stopLevelAndGoBack() {\r\n  clearTimer();\r\n  isFrozen = false;\r\n  \r\n  // Show a simple outro animation\r\n  const outro = document.createElement('div');\r\n  outro.className = 'simple-level-transition';\r\n  outro.style.display = 'flex';\r\n  outro.style.justifyContent = 'center';\r\n  outro.style.alignItems = 'center';\r\n  \r\n  // Create light streaks for animation\r\n  for (let i = 0; i < 3; i++) {\r\n    const streak = document.createElement('div');\r\n    streak.className = 'light-streak';\r\n    streak.style.top = `${20 + (i * 25)}%`;\r\n    streak.style.animationDelay = `${i * 0.2}s`;\r\n    outro.appendChild(streak);\r\n  }\r\n  \r\n  const announcement = document.createElement('div');\r\n  announcement.className = 'level-announcement simple';\r\n  announcement.style.position = 'relative'; // Ensure proper positioning\r\n  \r\n  announcement.innerHTML = `\r\n    <div class=\"level-number\">\r\n      <i class=\"fas fa-check-circle\" style=\"color: var(--gold); font-size: 2rem;\"></i>\r\n    </div>\r\n    <div class=\"level-text\">Session Complete</div>\r\n  `;\r\n  \r\n  outro.appendChild(announcement);\r\n  document.body.appendChild(outro);\r\n  \r\n  // Clear session\r\n  gameState.sessionStartTime = null;\r\n  \r\n  currentGame = {\r\n    words: [],\r\n    translations: [],\r\n    currentIndex: 0,\r\n    correctAnswers: 0,\r\n    firstAttempt: true,\r\n    isHebrewToEnglish: false,\r\n    mixed: false,\r\n    speedChallenge: false,\r\n    timeBonus: 0,\r\n    initialTimeRemaining: null,\r\n    streakBonus: true,\r\n    restartsRemaining: null\r\n  };\r\n  \r\n  setTimeout(() => {\r\n    outro.classList.add('fade-out');\r\n    setTimeout(() => {\r\n      document.body.removeChild(outro);\r\n      showScreen(\"welcome-screen\");\r\n    }, 300);\r\n  }, 1200);\r\n}\r\n\r\nfunction showGameOverOverlay() {\r\n    clearTimer();\r\n    const overlay = document.querySelector('.failure-overlay');\r\n    const title = overlay.querySelector('.failure-title');\r\n    title.textContent = 'Game Over!';\r\n    \r\n    overlay.style.display = 'flex';\r\n    setTimeout(() => {\r\n        overlay.classList.add('show');\r\n    }, 100);\r\n    \r\n    // Set up restart button\r\n    document.querySelector('.restart-button').onclick = () => {\r\n        overlay.classList.remove('show');\r\n        setTimeout(() => {\r\n            overlay.style.display = 'none';\r\n            if (currentGame.isCustomPractice) {\r\n                startCustomLevel(currentGame.practiceState.currentLevel, currentGame.practiceState);\r\n            } else {\r\n                startLevel(gameState.currentLevel);\r\n            }\r\n        }, 1000);\r\n    };\r\n    \r\n    // Set up home button\r\n    document.querySelector('.home-button').onclick = () => {\r\n        overlay.classList.remove('show');\r\n        setTimeout(() => {\r\n            overlay.style.display = 'none';\r\n            showScreen('welcome-screen');\r\n        }, 1000);\r\n    };\r\n}\r\n\r\nfunction updateTimerCircle(timeRemaining, totalTime) {\r\n    const timerProgress = document.querySelector('.timer-progress');\r\n    if (!timerProgress) return;\r\n\r\n    const radius = 40;\r\n    const circumference = 2 * Math.PI * radius;\r\n    \r\n    timerProgress.style.strokeDasharray = `${circumference} ${circumference}`;\r\n    \r\n    const percentage = timeRemaining / totalTime;\r\n    const dashoffset = circumference * (1 - percentage);\r\n    timerProgress.style.strokeDashoffset = dashoffset;\r\n\r\n    // Add warning state when time is low\r\n    if (timeRemaining <= 10) {\r\n        timerProgress.classList.add('warning');\r\n    } else {\r\n        timerProgress.classList.remove('warning');\r\n    }\r\n}\r\n\r\nfunction handleResetProgress() { \r\n    if (!isFirstResetAttempt) {\r\n        // Reset game state\r\n        gameState.currentStage = 1;\r\n        gameState.currentSet = 1;\r\n        gameState.currentLevel = 1;\r\n        gameState.coins = 0;\r\n        gameState.unlockedSets = { \"1\": new Set([1]) };\r\n        gameState.unlockedLevels = { \"1_1\": new Set([1]) };\r\n        gameState.perfectLevels = new Set();\r\n        gameState.completedLevels = new Set();\r\n\r\n        // Clear localStorage\r\n        localStorage.removeItem('simploxProgress');\r\n        localStorage.removeItem('simploxCustomCoins');\r\n        \r\n        // Update UI\r\n        updatePerkButtons();\r\n        updateAllCoinDisplays();\r\n        showScreen('welcome-screen');\r\n        \r\n        // Reset the first attempt flag\r\n        isFirstResetAttempt = true;\r\n        return;\r\n    }\r\n\r\n    // First attempt - show warning\r\n    const resetButton = document.querySelector('.reset-button');\r\n    resetButton.classList.add('warning');\r\n    isFirstResetAttempt = false;\r\n\r\n    // Clear warning after animation\r\n    setTimeout(() => {\r\n        resetButton.classList.remove('warning');\r\n    }, 1000);\r\n\r\n    // Reset the attempt after 10 seconds\r\n    if (resetProgressTimeout) {\r\n        clearTimeout(resetProgressTimeout);\r\n    }\r\n    \r\n    resetProgressTimeout = setTimeout(() => {\r\n        isFirstResetAttempt = true;\r\n    }, 10000);\r\n}\r\n\r\nfunction toggleFullScreen() {\r\n    const docElement = document.documentElement;\r\n    const fullscreenButton = document.querySelector('.vertical-nav-container .fullscreen-button i');\r\n    \r\n    if (document.fullscreenElement) {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen().then(() => {\r\n                if (fullscreenButton) {\r\n                    fullscreenButton.classList.remove('fa-compress');\r\n                    fullscreenButton.classList.add('fa-expand');\r\n                }\r\n            }).catch(err => {\r\n                console.log(`Error attempting to exit fullscreen: ${err.message}`);\r\n            });\r\n        }\r\n    } else if (docElement.requestFullscreen) {\r\n        docElement.requestFullscreen().then(() => {\r\n            if (fullscreenButton) {\r\n                fullscreenButton.classList.remove('fa-expand');\r\n                fullscreenButton.classList.add('fa-compress');\r\n            }\r\n        }).catch(err => {\r\n            console.log(`Error attempting to enable fullscreen: ${err.message}`);\r\n        });\r\n    }\r\n}\r\n\r\nasync function handleLogout() {\r\n    try {\r\n        const { error } = await supabaseClient.auth.signOut();\r\n        \r\n        if (error) {\r\n            console.error('Supabase logout error:', error.message);\r\n        }\r\n\r\n        currentUser = null;\r\n        updateAuthUI();\r\n        showScreen('welcome-screen');\r\n        \r\n        // Reload game progress from localStorage\r\n        initializeGame();\r\n\r\n    } catch (error) {\r\n        console.error('Unexpected error during logout:', error);\r\n    }\r\n}\r\n\r\n\r\nfunction handleRestartLevel() {\r\n    // If no restarts remaining, ignore the click entirely\r\n    if (currentGame.restartsRemaining <= 0) {\r\n        return;\r\n    }\r\n    \r\n    const restartButton = document.querySelector('.navigation-button.restart-level');\r\n    \r\n    // Update the restarts counter\r\n    currentGame.restartsRemaining--;\r\n    \r\n    // Show visual feedback of remaining restarts\r\n    if (currentGame.restartsRemaining === 1) {\r\n        restartButton.style.opacity = '0.7';\r\n    } else if (currentGame.restartsRemaining === 0) {\r\n        restartButton.classList.add('disabled');\r\n        \r\n        // Remove the click handler when out of restarts\r\n        restartButton.onclick = null;\r\n        // Additional safety: explicitly disable the button\r\n        restartButton.disabled = true;\r\n    }\r\n    \r\n    // Restore initial state\r\n    gameState.coins = currentGame.startingCoins;\r\n    gameState.perks = { ...currentGame.startingPerks };\r\n    \r\n    // Update UI\r\n    updatePerkButtons();\r\n    updateAllCoinDisplays();\r\n    \r\n    // Save current state\r\n    saveProgress();\r\n    \r\n    // Restart the level\r\n    startLevel(gameState.currentLevel);\r\n}\r\n\r\nfunction showStagesFromMenu() {\r\n    showScreen('stage-screen');\r\n}\r\n\r\nfunction findFurthestProgression() {\r\n    // Check for saved game context first\r\n    const savedContext = localStorage.getItem(\"gameContext\");\r\n    if (savedContext) {\r\n        try {\r\n            const context = JSON.parse(savedContext);\r\n            if (context.stage && context.set && context.level) {\r\n                console.log(\"Resuming from saved context:\", context);\r\n                return {\r\n                    stage: context.stage,\r\n                    set: context.set,\r\n                    level: context.level\r\n                };\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error parsing saved context:\", e);\r\n        }\r\n    }\r\n\r\n    // Check for preferred stage\r\n    const preferredStage = parseInt(localStorage.getItem(\"preferredStage\"));\r\n    \r\n    // Debug logging\r\n    console.log(\"Finding furthest progression\");\r\n    console.log(\"Current unlocked sets:\", gameState.unlockedSets);\r\n    console.log(\"Current unlocked levels:\", gameState.unlockedLevels);\r\n    console.log(\"Completed levels:\", Array.from(gameState.completedLevels));\r\n    console.log(\"Perfect levels:\", Array.from(gameState.perfectLevels));\r\n\r\n    // We'll track the furthest level found\r\n    let furthestLevel = null;\r\n    let highestRank = -1;\r\n\r\n    // Helper to check if a level is unlocked but not completed\r\n    const isUnlockedNotCompleted = (stage, set, level) => {\r\n        const levelKey = `${stage}_${set}_${level}`;\r\n        const setKey = `${stage}_${set}`;\r\n        \r\n        // Check if the level is unlocked\r\n        const isUnlocked = gameState.unlockedLevels[setKey]?.has(level);\r\n        \r\n        // Check if the level is not yet completed\r\n        const isNotCompleted = !gameState.completedLevels.has(levelKey) && \r\n                              !gameState.perfectLevels.has(levelKey);\r\n                              \r\n        return isUnlocked && isNotCompleted;\r\n    };\r\n\r\n\r\n    // First check preferred stage if set\r\n    if (preferredStage && preferredStage >= 1 && preferredStage <= 5) {\r\n        console.log(`Checking preferred stage: ${preferredStage}`);\r\n        \r\n        // Go through all possible sets in this stage\r\n        for (let set = 1; set <= gameStructure.stages[preferredStage-1].numSets; set++) {\r\n            const setKey = `${preferredStage}_${set}`;\r\n            \r\n            // Skip if no unlocked levels for this set\r\n            if (!gameState.unlockedLevels[setKey]) continue;\r\n            \r\n            // Sort levels in descending order (highest first)\r\n            const levels = Array.from(gameState.unlockedLevels[setKey]).sort((a, b) => b - a);\r\n            \r\n            console.log(`Checking set ${setKey}, unlocked levels:`, levels);\r\n            \r\n            // Check each level for this set\r\n            for (let level of levels) {\r\n                if (isUnlockedNotCompleted(preferredStage, set, level)) {\r\n                    const rank = calculateRank(preferredStage, set, level);\r\n                    if (rank > highestRank) {\r\n                        highestRank = rank;\r\n                        furthestLevel = {\r\n                            stage: preferredStage,\r\n                            set: set,\r\n                            level: level\r\n                        };\r\n                        console.log(`Found candidate in preferred stage: ${preferredStage}-${set}-${level}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If we didn't find a level in the preferred stage, check all stages\r\n    if (!furthestLevel) {\r\n        // Check each stage\r\n        for (let stage = 1; stage <= 5; stage++) {\r\n            // Skip if no unlocked sets for this stage\r\n            if (!gameState.unlockedSets[stage]) continue;\r\n            \r\n            // Get all unlocked sets for this stage, sorted in descending order\r\n            const sets = Array.from(gameState.unlockedSets[stage]).sort((a, b) => b - a);\r\n            \r\n            for (let set of sets) {\r\n                const setKey = `${stage}_${set}`;\r\n                \r\n                // Skip if no unlocked levels for this set\r\n                if (!gameState.unlockedLevels[setKey]) continue;\r\n                \r\n                // Get all unlocked levels for this set, sorted in descending order\r\n                const levels = Array.from(gameState.unlockedLevels[setKey]).sort((a, b) => b - a);\r\n                \r\n                for (let level of levels) {\r\n                    if (isUnlockedNotCompleted(stage, set, level)) {\r\n                        const rank = calculateRank(stage, set, level);\r\n                        if (rank > highestRank) {\r\n                            highestRank = rank;\r\n                            furthestLevel = {\r\n                                stage: stage,\r\n                                set: set,\r\n                                level: level\r\n                            };\r\n                            console.log(`Found candidate: ${stage}-${set}-${level}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If we found a furthest level, return it\r\n    if (furthestLevel) {\r\n        console.log(\"Found furthest progress:\", furthestLevel);\r\n        return furthestLevel;\r\n    }\r\n\r\n    // If no furthest level found but preferred stage is set, return that stage's first level\r\n    if (preferredStage && preferredStage >= 1 && preferredStage <= 5) {\r\n        return {\r\n            stage: preferredStage,\r\n            set: 1,\r\n            level: 1\r\n        };\r\n    }\r\n\r\n    // Default to the very beginning\r\n    return {\r\n        stage: 1,\r\n        set: 1,\r\n        level: 1\r\n    };\r\n}\r\n\r\nfunction startGame() {\r\n    console.log(\"Starting game\");\r\n    \r\n    if (!hasExistingProgress()) {\r\n        console.log(\"No existing progress found, showing grade selector\");\r\n        showGradeLevelSelector();\r\n        return;\r\n    }\r\n    \r\n    // Check for saved game context first\r\n    const savedContext = localStorage.getItem(\"gameContext\");\r\n    if (savedContext) {\r\n        try {\r\n            const context = JSON.parse(savedContext);\r\n            if (context.stage && context.set && context.level) {\r\n                console.log(\"Found saved game context:\", context);\r\n                \r\n                // Use context data for current level\r\n                gameState.currentStage = context.stage;\r\n                gameState.currentSet = context.set;\r\n                gameState.currentLevel = context.level;\r\n                \r\n                startLevel(gameState.currentLevel);\r\n                return;\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error parsing game context:\", e);\r\n        }\r\n    }\r\n    \r\n    // If no context, use current game state\r\n    console.log(\"Using current game state:\", {\r\n        stage: gameState.currentStage,\r\n        set: gameState.currentSet,\r\n        level: gameState.currentLevel\r\n    });\r\n    \r\n    startLevel(gameState.currentLevel);\r\n}\r\n\r\nfunction updateLevelProgress(stage, set, level, completed, perfect) {\r\n    // Create a key to reference this specific level\r\n    const levelKey = `${stage}_${set}_${level}`;\r\n    \r\n    // Update completion state\r\n    if (perfect) {\r\n        gameState.perfectLevels.add(levelKey);\r\n        gameState.completedLevels.add(levelKey);  // Perfect levels are also completed\r\n    } else if (completed) {\r\n        gameState.completedLevels.add(levelKey);\r\n    }\r\n    \r\n    // Ensure level is unlocked\r\n    const setKey = `${stage}_${set}`;\r\n    if (!gameState.unlockedLevels[setKey]) {\r\n        gameState.unlockedLevels[setKey] = new Set();\r\n    }\r\n    gameState.unlockedLevels[setKey].add(level);\r\n    \r\n    // Unlock next level if not already unlocked\r\n    const nextLevel = level + 1;\r\n    const isLastLevelInSet = level === gameStructure.stages[stage-1].levelsPerSet;\r\n    \r\n    if (!isLastLevelInSet) {\r\n        gameState.unlockedLevels[setKey].add(nextLevel);\r\n        console.log(`Unlocked next level: ${nextLevel} in set ${setKey}`);\r\n    }\r\n    \r\n    // Check if set is now complete\r\n    if (isLastLevelInSet && completed) {\r\n        checkSetCompletion(stage, set);\r\n    }\r\n    \r\n    // Save progress\r\n    saveProgress();\r\n}\r\n\r\nfunction checkSetCompletion(stage, set) {\r\n    // Get total number of levels in the set\r\n    const totalLevels = gameStructure.stages[stage-1].levelsPerSet;\r\n    \r\n    // Check if all levels are completed\r\n    let completedCount = 0;\r\n    for (let i = 1; i <= totalLevels; i++) {\r\n        const levelKey = `${stage}_${set}_${i}`;\r\n        if (gameState.completedLevels.has(levelKey) || gameState.perfectLevels.has(levelKey)) {\r\n            completedCount++;\r\n        }\r\n    }\r\n    \r\n    console.log(`Set ${stage}-${set} completion: ${completedCount}/${totalLevels}`);\r\n    \r\n    // If all levels are completed, unlock next set\r\n    if (completedCount === totalLevels) {\r\n        console.log(`Set ${stage}-${set} is complete. Unlocking next set.`);\r\n        unlockNextSet();\r\n    }\r\n}\r\n\r\nfunction unlockNextSet() {\r\n  const currentStage = gameState.currentStage;\r\n  const currentSet = gameState.currentSet;\r\n  \r\n  // Get stage structure to check max sets\r\n  const stageStructure = gameStructure.stages[currentStage-1];\r\n  if (!stageStructure) {\r\n    console.error(`Invalid stage: ${currentStage}`);\r\n    return;\r\n  }\r\n  \r\n  // Check if we're not already at the last set\r\n  if (currentSet < stageStructure.numSets) {\r\n    const nextSet = currentSet + 1;\r\n    \r\n    // Ensure the stage is in unlockedSets\r\n    if (!gameState.unlockedSets[currentStage]) {\r\n      gameState.unlockedSets[currentStage] = new Set();\r\n    }\r\n    \r\n    // Add the next set\r\n    gameState.unlockedSets[currentStage].add(nextSet);\r\n    \r\n    // Also unlock the first level of the next set\r\n    const nextSetKey = `${currentStage}_${nextSet}`;\r\n    if (!gameState.unlockedLevels[nextSetKey]) {\r\n      gameState.unlockedLevels[nextSetKey] = new Set();\r\n    }\r\n    gameState.unlockedLevels[nextSetKey].add(1);\r\n    \r\n    console.log(`Unlocked set ${currentStage}-${nextSet} and its first level`);\r\n    \r\n    // Save the updated progress\r\n    saveProgress();\r\n  } else if (currentStage < 5) {\r\n    // Unlock the first set of the next stage\r\n    unlockNextStage();\r\n  }\r\n}\r\n\r\nfunction unlockNextStage() {\r\n  const currentStage = gameState.currentStage;\r\n  \r\n  // Make sure we're not at the last stage\r\n  if (currentStage < 5) {\r\n    const nextStage = currentStage + 1;\r\n    \r\n    // Ensure the next stage exists in unlockedSets\r\n    if (!gameState.unlockedSets[nextStage]) {\r\n      gameState.unlockedSets[nextStage] = new Set();\r\n    }\r\n    \r\n    // Unlock the first set of the next stage\r\n    gameState.unlockedSets[nextStage].add(1);\r\n    \r\n    // Also unlock the first level of the first set\r\n    const nextSetKey = `${nextStage}_1`;\r\n    if (!gameState.unlockedLevels[nextSetKey]) {\r\n      gameState.unlockedLevels[nextSetKey] = new Set();\r\n    }\r\n    gameState.unlockedLevels[nextSetKey].add(1);\r\n    \r\n    console.log(`Unlocked stage ${nextStage}, set 1, level 1`);\r\n    \r\n    // Save the updated progress\r\n    saveProgress();\r\n  }\r\n}\r\n\r\nfunction showLevelIntro(level, callback, forceFull = false) {\r\n  // Skip the animation if we're in a continuous session unless forced\r\n  if (!(!gameState.sessionStartTime || (Date.now() - gameState.sessionStartTime > 1800000) || forceFull)) {\r\n    // Simple transition for continuous play\r\n    const transitionDiv = document.createElement('div');\r\n    transitionDiv.className = 'simple-level-transition';\r\n    transitionDiv.style.display = 'flex';\r\n    transitionDiv.style.justifyContent = 'center';\r\n    transitionDiv.style.alignItems = 'center';\r\n\r\n    // Create light streaks for effect\r\n    for (let i = 0; i < 3; i++) {\r\n      const streak = document.createElement('div');\r\n      streak.className = 'light-streak';\r\n      streak.style.top = (20 + 25 * i) + '%';\r\n      streak.style.animationDelay = (0.2 * i) + 's';\r\n      transitionDiv.appendChild(streak);\r\n    }\r\n\r\n    const announcementDiv = document.createElement('div');\r\n    announcementDiv.className = 'level-announcement simple';\r\n    announcementDiv.style.position = 'relative';\r\n\r\n    // Progress bar\r\n    const progressBar = document.createElement('div');\r\n    progressBar.className = 'transition-progress';\r\n\r\n    // Check if this is a custom practice level\r\n    if (currentGame && currentGame.isCustomPractice) {\r\n      if (currentGame.mixed) {\r\n        // Test level in custom practice\r\n        announcementDiv.innerHTML = `\r\n          <div class=\"level-number\">Test</div>\r\n          <div class=\"level-text\">Review Challenge</div>\r\n        `;\r\n      } else {\r\n        // Regular round in custom practice\r\n        announcementDiv.innerHTML = `\r\n          <div class=\"level-number\">Round ${level}</div>\r\n          <div class=\"level-text\">Custom Practice</div>\r\n        `;\r\n      }\r\n    } else {\r\n      // Regular game level\r\n      announcementDiv.innerHTML = `\r\n        <div class=\"level-number\">${level}</div>\r\n        <div class=\"level-text\">Stage ${gameState.currentStage} - Set ${gameState.currentSet}</div>\r\n      `;\r\n    }\r\n\r\n    announcementDiv.appendChild(progressBar);\r\n    transitionDiv.appendChild(announcementDiv);\r\n    document.body.appendChild(transitionDiv);\r\n    \r\n    // Animate progress bar\r\n    setTimeout(() => {\r\n      progressBar.style.width = '100%';\r\n    }, 50);\r\n\r\n    // Remove after animation completes\r\n    setTimeout(() => {\r\n      transitionDiv.classList.add('fade-out');\r\n      setTimeout(() => {\r\n        callback();\r\n        document.body.removeChild(transitionDiv);\r\n      }, 300);\r\n    }, 800);\r\n    return;\r\n  }\r\n\r\n  // Full animation for new sessions or when forced\r\n  const isTestLevel = [3, 6, 9, 10, 13, 16, 19, 20].includes(level);\r\n  const isBossLevel = level === 21;\r\n  \r\n  let levelClass = 'normal-level';\r\n  if (isTestLevel) levelClass = 'test-level';\r\n  if (isBossLevel) levelClass = 'boss-level';\r\n\r\n  const transitionDiv = document.createElement('div');\r\n  transitionDiv.className = 'level-transition';\r\n\r\n  // Custom practice level announcements\r\n  if (currentGame && currentGame.isCustomPractice) {\r\n    if (currentGame.mixed) {\r\n      // Test level in custom practice\r\n      transitionDiv.innerHTML = `\r\n        <div class=\"level-announcement ${levelClass}\">\r\n          <h1>Test Challenge</h1>\r\n          <h2>Combined Words Review</h2>\r\n          <div class=\"test-badge\">Review Challenge</div>\r\n        </div>\r\n      `;\r\n    } else {\r\n      // Regular round in custom practice\r\n      transitionDiv.innerHTML = `\r\n        <div class=\"level-announcement ${levelClass}\">\r\n          <h1>Round ${level}</h1>\r\n          <h2>Custom Practice</h2>\r\n          ${isTestLevel ? '<div class=\"test-badge\">Review Challenge</div>' : ''}\r\n        </div>\r\n      `;\r\n    }\r\n  } else {\r\n    // Regular game level announcement\r\n    transitionDiv.innerHTML = `\r\n      <div class=\"level-announcement ${levelClass}\">\r\n        <h1>${isBossLevel ? 'BOSS FIGHT!' : `Stage ${gameState.currentStage}`}</h1>\r\n        <h2>${isBossLevel ? 'FINAL CHALLENGE' : `Level ${gameState.currentSet}-${level}`}</h2>\r\n        ${isTestLevel ? '<div class=\"test-badge\">Review Challenge</div>' : ''}\r\n        ${isBossLevel ? '<div class=\"boss-badge\">DANGER ZONE</div>' : ''}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  document.body.appendChild(transitionDiv);\r\n  const announcementElement = transitionDiv.querySelector('.level-announcement');\r\n  \r\n  // Force reflow\r\n  transitionDiv.offsetHeight;\r\n  \r\n  // Add animation classes\r\n  transitionDiv.classList.add('show');\r\n  announcementElement.classList.add('show');\r\n\r\n  // Special styling for boss level\r\n  if (isBossLevel) {\r\n    const announcementEl = transitionDiv.querySelector('.level-announcement');\r\n    if (announcementEl) {\r\n      announcementEl.style.background = 'linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%)';\r\n      announcementEl.style.boxShadow = '0 0 30px rgba(255, 0, 0, 0.5)';\r\n      \r\n      const titleEl = announcementEl.querySelector('h1');\r\n      if (titleEl) {\r\n        titleEl.style.color = '#ffffff';\r\n        titleEl.style.textShadow = '0 0 20px rgba(255, 0, 0, 0.8)';\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove after animation completes\r\n  setTimeout(() => {\r\n    callback();\r\n    transitionDiv.classList.remove('show');\r\n    announcementElement.classList.remove('show');\r\n    setTimeout(() => {\r\n      document.body.removeChild(transitionDiv);\r\n    }, 400);\r\n  }, 1500);\r\n}\r\n\r\nconst customPracticeLists = {\r\n    lists: [],\r\n    currentList: null,\r\n    maxLists: 5\r\n};\r\n\r\n\r\n// Function to add a new word list\r\nfunction addCustomWordList(name = null) {\r\n    // Check if we've reached the maximum number of lists\r\n    if (customPracticeLists.lists.length >= customPracticeLists.maxLists) {\r\n        alert(`You can only create up to ${customPracticeLists.maxLists} custom lists.`);\r\n        return null;\r\n    }\r\n\r\n    // Generate a default name if not provided\r\n    if (!name) {\r\n        name = `List ${customPracticeLists.lists.length + 1}`;\r\n    }\r\n\r\n    const newList = {\r\n        id: Date.now(),\r\n        name: name,\r\n        words: [],\r\n        translations: []\r\n    };\r\n\r\n    customPracticeLists.lists.push(newList);\r\n    saveCustomLists();\r\n    return newList;\r\n}\r\n\r\n\r\n// Function to translate a single word using MyMemory Translation API\r\nfunction translateWord(word) {\r\n    const apiUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(word)}&langpair=en|he`;\r\n    \r\n    return fetch(apiUrl)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            // Extract translation, fallback to original word if translation fails\r\n            return data.responseData.translatedText || word;\r\n        })\r\n        .catch(() => word);\r\n}\r\n\r\nfunction trackListPlay(listId) {\r\n    const playCountKey = `listPlays_${listId}`;\r\n    let plays = parseInt(localStorage.getItem(playCountKey) || '0');\r\n    plays++;\r\n    \r\n    const limits = getUserListLimits();\r\n    localStorage.setItem(playCountKey, plays);\r\n\r\n    if (plays >= limits.maxPlays) {\r\n        // Remove list if max plays reached\r\n        deleteCustomList(listId);\r\n        return false;\r\n    }\r\n    \r\n    return limits.maxPlays - plays;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction toggleAuthMode() {\r\n    const loginForm = document.getElementById('loginForm');\r\n    const signupForm = document.getElementById('signupForm');\r\n    \r\n    loginForm.classList.toggle('hidden');\r\n    signupForm.classList.toggle('hidden');\r\n}\r\n\r\n\r\nfunction updateLocalSharedLists(sharedList) {\r\n    // Add the shared list to the recipient's local lists\r\n    if (currentUser) {\r\n        customPracticeLists.lists.push({\r\n            id: sharedList.local_id,\r\n            supabaseId: sharedList.id,\r\n            name: sharedList.name,\r\n            words: sharedList.words,\r\n            translations: sharedList.translations,\r\n            is_shared: true,\r\n            shared_by: sharedList.shared_by\r\n        });\r\n        \r\n        // Save to local storage or sync\r\n        saveCustomLists();\r\n    }\r\n}\r\n\r\n// ADD this fallback function to try alternative sharing approaches\r\nasync function debugShareList(listId, recipientId) {\r\n    try {\r\n        console.log(\"Debug share function called with:\", { listId, recipientId });\r\n        \r\n        // Find the list\r\n        const list = CustomListsManager.lists.find(l => String(l.id) === String(listId));\r\n        if (!list) {\r\n            console.error(\"List not found for debug sharing\");\r\n            return false;\r\n        }\r\n        \r\n        // Try direct table access with minimal fields\r\n        const { data, error } = await supabaseClient\r\n            .from('custom_lists')\r\n            .insert({\r\n                user_id: recipientId,\r\n                name: \"Shared list\", \r\n                words: [\"test\"],\r\n                translations: [\"test\"],\r\n                is_shared: true\r\n            });\r\n            \r\n        if (error) {\r\n            console.error(\"Debug share error:\", error);\r\n            \r\n            // Check what tables are available\r\n            const { data: tables, error: tablesError } = await supabaseClient\r\n                .from('information_schema.tables')\r\n                .select('table_name')\r\n                .eq('table_schema', 'public');\r\n                \r\n            if (tablesError) {\r\n                console.error(\"Error fetching tables:\", tablesError);\r\n            } else {\r\n                console.log(\"Available tables:\", tables);\r\n            }\r\n            \r\n            return false;\r\n        }\r\n        \r\n        console.log(\"Debug share success:\", data);\r\n        return true;\r\n    } catch (error) {\r\n        console.error(\"Debug share exception:\", error);\r\n        return false;\r\n    }\r\n}\r\n\r\nasync function shareListWithUser(listId, recipientId) {\r\n    try {\r\n        console.log(\"Sharing list:\", listId, \"with user:\", recipientId);\r\n        \r\n        if (!currentUser) {\r\n            console.error(\"No current user - cannot share list\");\r\n            return false;\r\n        }\r\n        \r\n        // Find the list in CustomListsManager\r\n        const list = CustomListsManager.lists.find(l => String(l.id) === String(listId));\r\n        \r\n        if (!list) {\r\n            console.error(\"List not found for sharing:\", listId);\r\n            return false;\r\n        }\r\n        \r\n        console.log(\"Found list to share:\", list.name);\r\n        \r\n        // Direct insert into custom_lists table\r\n        const { data, error } = await supabaseClient\r\n            .from('custom_lists')\r\n            .insert({\r\n                user_id: recipientId,\r\n                name: `${list.name} (Shared by ${currentUser.user_metadata?.username || \"User\"})`,\r\n                words: list.words || [],\r\n                translations: list.translations || [],\r\n                is_shared: true,\r\n                shared_with: [recipientId],\r\n                shared_by: currentUser.id,\r\n                created_at: new Date().toISOString(),\r\n                status: 'active'\r\n            });\r\n        \r\n        if (error) {\r\n            console.error(\"Error sharing list:\", error);\r\n            return false;\r\n        }\r\n        \r\n        console.log(\"List shared successfully\");\r\n        showNotification(\"List shared successfully!\", \"success\");\r\n        closeShareModal();\r\n        return true;\r\n    } catch (error) {\r\n        console.error(\"Error in shareListWithUser:\", error);\r\n        showNotification(\"Error sharing list\", \"error\");\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction showSuccessToast(message) {\r\n    const toast = document.createElement('div');\r\n    toast.className = 'toast success';\r\n    toast.textContent = message;\r\n    document.body.appendChild(toast);\r\n    \r\n    setTimeout(() => {\r\n        toast.classList.add('hide');\r\n        setTimeout(() => document.body.removeChild(toast), 600);\r\n    }, 3000);\r\n}\r\n\r\nfunction showErrorToast(message) {\r\n    const toast = document.createElement('div');\r\n    toast.className = 'toast error';\r\n    toast.textContent = message;\r\n    document.body.appendChild(toast);\r\n    \r\n    setTimeout(() => {\r\n        toast.classList.add('hide');\r\n        setTimeout(() => document.body.removeChild(toast), 600);\r\n    }, 3000);\r\n}\r\n\r\nfunction closeShareModal() {\r\n    const modal = document.querySelector('.share-modal');\r\n    const backdrop = document.querySelector('.modal-backdrop');\r\n    \r\n    if (modal) modal.remove();\r\n    if (backdrop) backdrop.remove();\r\n}\r\n\r\nasync function loadSharedLists() {\r\n    if (!currentUser) return [];\r\n\r\n    const { data, error } = await supabaseClient\r\n        .from('custom_lists')\r\n        .select('*')\r\n        .or(`shared_with.cs.{${currentUser.id}},is_shared.eq.true`);\r\n\r\n    if (error) {\r\n        console.error('Error loading shared lists:', error);\r\n        return [];\r\n    }\r\n\r\n    return data.map(list => ({\r\n        ...list,\r\n        isShared: true\r\n    }));\r\n}\r\n\r\n// REPLACE the showShareModal function\r\nfunction showShareModal(listId) {\r\n    console.log(\"Opening share modal for list:\", listId);\r\n    \r\n    // Remove any existing modals\r\n    const existingModal = document.querySelector('.share-modal');\r\n    const existingBackdrop = document.querySelector('.modal-backdrop');\r\n    if (existingModal) existingModal.remove();\r\n    if (existingBackdrop) existingBackdrop.remove();\r\n    \r\n    // Create modal backdrop\r\n    const backdrop = document.createElement('div');\r\n    backdrop.className = 'modal-backdrop';\r\n    backdrop.onclick = closeShareModal;\r\n    document.body.appendChild(backdrop);\r\n    \r\n    // Create share modal\r\n    const modal = document.createElement('div');\r\n    modal.className = 'share-modal';\r\n    modal.innerHTML = `\r\n        <h3 class=\"share-modal-header\">Share List</h3>\r\n        <div class=\"users-list\">Loading users...</div>\r\n        <button class=\"start-button modal-close\" onclick=\"closeShareModal()\">Cancel</button>\r\n    `;\r\n    document.body.appendChild(modal);\r\n    \r\n    // Now we know the modal and users-list are in the DOM\r\n    const usersList = modal.querySelector('.users-list');\r\n    \r\n    // Fetch users\r\n    supabaseClient.from(\"user_profiles\")\r\n        .select(\"id, username\")\r\n        .neq(\"id\", currentUser.id)\r\n        .then(({ data, error }) => {\r\n            if (error) {\r\n                console.error(\"Error fetching users:\", error);\r\n                usersList.innerHTML = '<div class=\"user-item\"><span>Error loading users</span></div>';\r\n                return;\r\n            }\r\n            \r\n            if (!data || data.length === 0) {\r\n                usersList.innerHTML = '<div class=\"user-item\"><span>No other users available</span></div>';\r\n                return;\r\n            }\r\n            \r\n            usersList.innerHTML = data.map(user => `\r\n                <div class=\"user-item\">\r\n                    <span>${user.username || \"Unnamed User\"}</span>\r\n                    <button class=\"main-button small-button share-with-user-btn\" data-user-id=\"${user.id}\">\r\n    <i class=\"fas fa-share-alt\"></i> Share\r\n</button>\r\n                </div>\r\n            `).join(\"\");\r\n            \r\n            // Add click handlers to share buttons\r\n            modal.querySelectorAll('.share-with-user-btn').forEach(btn => {\r\n                btn.onclick = async () => {\r\n                    const userId = btn.getAttribute('data-user-id');\r\n                    btn.disabled = true;\r\n                    const originalText = btn.innerHTML;\r\n                    btn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sharing...';\r\n                    \r\n                    const success = await shareListWithUser(listId, userId);\r\n                    \r\n                    if (!success) {\r\n                        btn.disabled = false;\r\n                        btn.innerHTML = originalText;\r\n                    }\r\n                };\r\n            });\r\n        });\r\n}\r\n\r\n// ADD this function to close the share modal\r\nfunction closeShareModal() {\r\n    const modal = document.querySelector('.share-modal');\r\n    const backdrop = document.querySelector('.modal-backdrop');\r\n    \r\n    if (modal) modal.remove();\r\n    if (backdrop) backdrop.remove();\r\n}\r\n\r\n\r\nfunction handleProgressionAfterCompletion(isLevelCompleted) {\r\n    if (!isLevelCompleted && currentGame.streakBonus) {\r\n        // Award completion bonus\r\n        gameState.coins += 5;\r\n        pulseCoins(5);\r\n        \r\n        // Handle level unlocks and progression\r\n        const setKey = `${gameState.currentStage}_${gameState.currentSet}`;\r\n        if (!gameState.unlockedLevels[setKey]) {\r\n            gameState.unlockedLevels[setKey] = new Set();\r\n        }\r\n        gameState.unlockedLevels[setKey].add(gameState.currentLevel);\r\n\r\n        const currentStageConfig = gameStructure.stages[gameState.currentStage - 1];\r\n        const isLastLevelInSet = gameState.currentLevel === currentStageConfig.levelsPerSet;\r\n        const isLastSetInStage = gameState.currentSet === currentStageConfig.numSets;\r\n\r\n        if (!isLastLevelInSet) {\r\n            startLevel(gameState.currentLevel + 1);\r\n        } else if (!isLastSetInStage) {\r\n            gameState.currentSet++;\r\n            startLevel(1);\r\n        } else {\r\n            showScreen('stage-screen');\r\n        }\r\n        \r\n        saveProgress();\r\n    } else {\r\n        startLevel(gameState.currentLevel);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction hideUpgradePrompt() {\r\n    const prompt = document.querySelector('.upgrade-prompt');\r\n    if (prompt) {\r\n        prompt.classList.remove('show');\r\n        setTimeout(() => prompt.remove(), 300);\r\n    }\r\n}\r\n\r\nfunction showUpgradePrompt(callback) {\r\n  // If user is not logged in, show auth modal with signup form\r\n  if (!currentUser) {\r\n    console.log(\"Unregistered user attempting to access premium content\");\r\n    showAuthModal();\r\n    // Switch to signup form\r\n    setTimeout(() => {\r\n      const loginForm = document.getElementById('loginForm');\r\n      const signupForm = document.getElementById('signupForm');\r\n      if (loginForm && signupForm) {\r\n        loginForm.classList.add('hidden');\r\n        signupForm.classList.remove('hidden');\r\n      }\r\n    }, 100);\r\n    return;\r\n  }\r\n  \r\n  // Continue with upgrade prompt for logged in users\r\n  const t = {\r\n    screen: document.querySelector(\".screen.visible\")?.id,\r\n    stage: gameState.currentStage,\r\n    set: gameState.currentSet,\r\n    level: gameState.currentLevel\r\n  };\r\n  \r\n  t.screen && localStorage.setItem(\"gameContext\", JSON.stringify(t));\r\n  currentUser && localStorage.removeItem(`upgradeRequested_${currentUser.id}`);\r\n  showScreen(\"upgrade-screen\");\r\n}\r\n\r\n/* ADD this function to hide the upgrade prompt */\r\nfunction hideUpgradePrompt() {\r\n    const prompt = document.querySelector('.upgrade-prompt');\r\n    const overlay = document.querySelector('.modal-backdrop');\r\n    \r\n    if (prompt) {\r\n        prompt.classList.remove('show');\r\n        setTimeout(() => prompt.remove(), 300);\r\n    }\r\n    \r\n    if (overlay) {\r\n        overlay.remove();\r\n    }\r\n}\r\n\r\nfunction hideUpgradePromptAndContinue() {\r\n  isFrozen = false;\r\n  clearTimer();\r\n  \r\n  // Remove all upgrade-related popups\r\n  document.querySelectorAll(\".confirmation-popup\").forEach(popup => {\r\n    if (popup) popup.remove();\r\n  });\r\n  \r\n  const upgradeScreen = document.getElementById(\"upgrade-screen\");\r\n  if (upgradeScreen && upgradeScreen.classList.contains(\"visible\")) {\r\n    upgradeScreen.classList.remove(\"visible\");\r\n  }\r\n  \r\n  // Don't try to proceed with level, just go to welcome screen\r\n  showScreen(\"welcome-screen\");\r\n}\r\n\r\n/* ADD this code to ensure crown clicks are handled properly */\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Set up a mutation observer to handle dynamically added crowns\r\n    const observer = new MutationObserver(mutations => {\r\n        mutations.forEach(mutation => {\r\n            if (mutation.addedNodes.length) {\r\n                mutation.addedNodes.forEach(node => {\r\n                    if (node.nodeType === 1) { // Element node\r\n                        const crowns = node.querySelectorAll('.fa-crown');\r\n                        crowns.forEach(crown => {\r\n                            crown.addEventListener('click', function(event) {\r\n                                event.stopPropagation();\r\n                                // Always force show the upgrade screen\r\n                                showScreen(\"upgrade-screen\");\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n    \r\n    observer.observe(document.body, { childList: true, subtree: true });\r\n});\r\n\r\nfunction handleUpgradeClick() {\r\n    hideUpgradePrompt();\r\n    showPaymentScreen();\r\n}\r\n\r\n\r\nasync function checkUserAccess() {\r\n    if (!currentUser) {\r\n        return {\r\n            fullAccess: false,\r\n            unlockedStages: {\r\n                1: [1],     // Only set 1 of stage 1\r\n                2: [1],     // Only set 1 of stage 2\r\n                3: [1],     // Only set 1 of stage 3\r\n                4: [1],     // Only set 1 of stage 4\r\n                5: [1]      // Only set 1 of stage 5\r\n            },\r\n            defaultUnlockedLevels: {\r\n                1: true,    // Level 1 always unlocked in set 1\r\n            }\r\n        };\r\n    }\r\n\r\n    // Check user access level\r\n    const { data, error } = await supabaseClient\r\n        .from('user_profiles')\r\n        .select('status, payment_pending')\r\n        .eq('id', currentUser.id)\r\n        .single();\r\n\r\n    if (error) return null;\r\n\r\n    // Free/Pending/Unregistered users\r\n    if (data.payment_pending || data.status === 'free' || data.status === 'pending') {\r\n        return {\r\n            fullAccess: false,\r\n            unlockedStages: {\r\n                1: [1],     // Only set 1 of stage 1\r\n                2: [1],     // Only set 1 of stage 2\r\n                3: [1],     // Only set 1 of stage 3\r\n                4: [1],     // Only set 1 of stage 4\r\n                5: [1]      // Only set 1 of stage 5\r\n            },\r\n            defaultUnlockedLevels: {\r\n                1: true,    // Level 1 always unlocked in set 1\r\n            }\r\n        };\r\n    }\r\n\r\n    // Premium users\r\n    if (data.status === 'premium') {\r\n        return {\r\n            fullAccess: true,\r\n            unlockedStages: {\r\n                1: [1],     // Only set 1 initially unlocked\r\n                2: [1],     // Only set 1 initially unlocked\r\n                3: [1],     // Only set 1 initially unlocked\r\n                4: [1],     // Only set 1 initially unlocked\r\n                5: [1]      // Only set 1 initially unlocked\r\n            },\r\n            defaultUnlockedLevels: {\r\n                1: true,    // Level 1 always unlocked in set 1\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nfunction toggleAuthMode() {\r\n    const loginForm = document.getElementById('loginForm');\r\n    const signupForm = document.getElementById('signupForm');\r\n    \r\n    loginForm.classList.toggle('hidden');\r\n    signupForm.classList.toggle('hidden');\r\n}\r\n\r\n// REPLACE this function\r\nfunction showSetScreen(stageId) {\r\n    // This function now redirects to the cascade screen\r\n    gameState.currentStage = stageId;\r\n    showStageCascadeScreen();\r\n    \r\n    // Automatically open the selected stage\r\n    setTimeout(() => {\r\n        const stageWrapper = document.querySelector(`.stage-wrapper[data-stage=\"${stageId}\"]`);\r\n        if (stageWrapper && !stageWrapper.classList.contains('open')) {\r\n            stageWrapper.classList.add('open');\r\n        }\r\n    }, 100);\r\n}\r\n\r\nfunction showUnregisteredWarning(callback) {\r\n    // Prevent multiple popups in the same page load\r\n    if (window.unregisteredWarningShown) {\r\n        if (callback) callback();\r\n        return;\r\n    }\r\n\r\n    // Mark that the warning has been shown\r\n    window.unregisteredWarningShown = true;\r\n\r\n    // Create full-screen signup page\r\n    const fullscreenPrompt = document.createElement('div');\r\n    fullscreenPrompt.className = 'fullscreen-signup-page';\r\n    fullscreenPrompt.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: var(--gradient);\r\n        z-index: 2000;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 2rem;\r\n        animation: fadeIn 0.3s ease-in-out;\r\n    `;\r\n\r\n    // Create content container\r\n    fullscreenPrompt.innerHTML = `\r\n        <div class=\"signup-header\" style=\"width: 100%; display: flex; justify-content: flex-start; margin-bottom: 2rem;\">\r\n            <button class=\"skip-signup-button\" style=\"\r\n                background: rgba(255,255,255,0.15);\r\n                border: none;\r\n                color: var(--text);\r\n                padding: 0.75rem 1.5rem;\r\n                border-radius: 50px;\r\n                font-size: 0.9rem;\r\n                cursor: pointer;\r\n                transition: all 0.3s ease;\r\n            \">\r\n                Skip\r\n            </button>\r\n        </div>\r\n        \r\n        <div class=\"signup-content\" style=\"\r\n            text-align: center;\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            max-width: 600px;\r\n            width: 100%;\r\n        \">\r\n            <h2 style=\"\r\n                font-size: 2rem;\r\n                color: var(--gold);\r\n                margin-bottom: 1.5rem;\r\n                animation: floatAnimation 3s ease-in-out infinite;\r\n            \">Save Your Progress!</h2>\r\n            \r\n            <p style=\"\r\n                font-size: 1.2rem;\r\n                line-height: 1.6;\r\n                margin-bottom: 2rem;\r\n                color: var(--text);\r\n            \">Create a free account to track your vocabulary progress, earn rewards, and unlock more advanced content</p>\r\n            \r\n            <div class=\"features-list\" style=\"\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 1rem;\r\n                margin-bottom: 3rem;\r\n                text-align: left;\r\n            \">\r\n                <div class=\"feature-item\" style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 1rem;\r\n                \">\r\n                    <i class=\"fas fa-check-circle\" style=\"color: var(--gold); font-size: 1.5rem;\"></i>\r\n                    <span>Track your learning progress</span>\r\n                </div>\r\n                <div class=\"feature-item\" style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 1rem;\r\n                \">\r\n                    <i class=\"fas fa-check-circle\" style=\"color: var(--gold); font-size: 1.5rem;\"></i>\r\n                    <span>Practice custom word lists</span>\r\n                </div>\r\n                <div class=\"feature-item\" style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 1rem;\r\n                \">\r\n                    <i class=\"fas fa-check-circle\" style=\"color: var(--gold); font-size: 1.5rem;\"></i>\r\n                    <span>Earn coins for premium content</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        <div class=\"signup-footer\" style=\"\r\n            width: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            padding-bottom: 2rem;\r\n        \">\r\n            <button class=\"signup-now-button\" style=\"\r\n                background: var(--gold);\r\n                color: var(--primary-dark);\r\n                border: none;\r\n                padding: 1.25rem 3rem;\r\n                border-radius: 50px;\r\n                font-size: 1.2rem;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                transition: all 0.3s ease;\r\n                box-shadow: 0 10px 20px rgba(255, 215, 0, 0.2);\r\n                animation: pulseAnimation 1.5s infinite ease-in-out;\r\n            \">\r\n                Sign Up Now\r\n            </button>\r\n        </div>\r\n    `;\r\n\r\n    // Add to body\r\n    document.body.appendChild(fullscreenPrompt);\r\n    \r\n    // Add animations CSS\r\n    const styleElement = document.createElement('style');\r\n    styleElement.textContent = `\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; }\r\n            to { opacity: 1; }\r\n        }\r\n        \r\n        @keyframes floatAnimation {\r\n            0%, 100% { transform: translateY(0); }\r\n            50% { transform: translateY(-10px); }\r\n        }\r\n        \r\n        @keyframes pulseAnimation {\r\n            0%, 100% { transform: scale(1); box-shadow: 0 10px 20px rgba(255, 215, 0, 0.2); }\r\n            50% { transform: scale(1.05); box-shadow: 0 10px 30px rgba(255, 215, 0, 0.4); }\r\n        }\r\n    `;\r\n    document.head.appendChild(styleElement);\r\n\r\n    // Add event listeners\r\n    const skipButton = fullscreenPrompt.querySelector('.skip-signup-button');\r\n    const signupButton = fullscreenPrompt.querySelector('.signup-now-button');\r\n    \r\n    skipButton.addEventListener('click', function() {\r\n        // Remove the prompt\r\n        document.body.removeChild(fullscreenPrompt);\r\n        if (styleElement.parentNode) {\r\n            styleElement.parentNode.removeChild(styleElement);\r\n        }\r\n        \r\n        // Execute callback to continue game\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    });\r\n    \r\n    signupButton.addEventListener('click', function() {\r\n        // Remove the prompt\r\n        document.body.removeChild(fullscreenPrompt);\r\n        if (styleElement.parentNode) {\r\n            styleElement.parentNode.removeChild(styleElement);\r\n        }\r\n        \r\n        // First, make sure we're on welcome screen since auth modal works best there\r\n        showScreen('welcome-screen');\r\n        \r\n        // Show the auth modal with signup form\r\n        setTimeout(function() {\r\n            const authModal = document.getElementById('authModal');\r\n            if (authModal) {\r\n                authModal.classList.add('show');\r\n                \r\n                // Switch to signup form\r\n                const signupForm = document.getElementById('signupForm');\r\n                const loginForm = document.getElementById('loginForm');\r\n                if (signupForm && loginForm) {\r\n                    signupForm.classList.remove('hidden');\r\n                    loginForm.classList.add('hidden');\r\n                }\r\n            }\r\n        }, 100); // Short delay to ensure welcome screen is visible first\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction toggleParentPhone() {\r\n    const isAdult = document.getElementById('isAdult').checked;\r\n    const parentPhoneGroup = document.getElementById('parentPhoneGroup');\r\n    const parentPhoneInput = document.getElementById('parentPhone');\r\n    \r\n    parentPhoneGroup.style.display = isAdult ? 'none' : 'block';\r\n    parentPhoneInput.required = !isAdult;\r\n}\r\n\r\nfunction showUpgradeScreen() {\r\n    // Check if user already submitted upgrade request\r\n    if (localStorage.getItem(`upgradeRequested_${currentUser.id}`)) {\r\n        hideUpgradePromptAndContinue();\r\n        return;\r\n    }\r\n    \r\n    showScreen('upgrade-screen');\r\n}\r\n\r\nclass RateLimiter {\r\n    constructor(maxRequests = 100, timeWindow = 60000) {\r\n        this.requests = new Map();\r\n    }\r\n    \r\n    checkLimit(userId) {\r\n        const now = Date.now();\r\n        const userRequests = this.requests.get(userId) || [];\r\n        const recentRequests = userRequests.filter(time => now - time < this.timeWindow);\r\n        \r\n        if (recentRequests.length >= this.maxRequests) {\r\n            return false;\r\n        }\r\n        \r\n        recentRequests.push(now);\r\n        this.requests.set(userId, recentRequests);\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction sanitizeInput(input) {\r\n    return input\r\n        .replace(/[<>]/g, '') // Remove potential HTML\r\n        .trim()\r\n        .slice(0, 500); // Reasonable length limit\r\n}\r\n\r\n\r\nconst SessionManager = {\r\n    maxInactiveTime: 30 * 60 * 1000, // 30 minutes\r\n    lastActivity: Date.now(),\r\n    \r\n    init() {\r\n        document.addEventListener('click', () => this.updateActivity());\r\n        document.addEventListener('keypress', () => this.updateActivity());\r\n        setInterval(() => this.checkSession(), 60000);\r\n    },\r\n    \r\n    updateActivity() {\r\n        this.lastActivity = Date.now();\r\n    },\r\n    \r\n    async checkSession() {\r\n        if (Date.now() - this.lastActivity > this.maxInactiveTime) {\r\n            await handleLogout();\r\n            modalSystem.show('timeout', {\r\n                title: \"Session Expired\",\r\n                message: \"Please log in again\"\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nconst DataValidator = {\r\n    validateGameProgress(progress) {\r\n        const maxAllowedCoins = 100000;\r\n        const maxAllowedPerks = 100;\r\n        \r\n        return {\r\n            ...progress,\r\n            coins: Math.min(progress.coins, maxAllowedCoins),\r\n            perks: Object.fromEntries(\r\n                Object.entries(progress.perks).map(([key, value]) => \r\n                    [key, Math.min(value, maxAllowedPerks)]\r\n                )\r\n            )\r\n        };\r\n    },\r\n    \r\n    validateCustomList(list) {\r\n        return {\r\n            ...list,\r\n            words: list.words.slice(0, 1000).map(sanitizeInput),\r\n            translations: list.translations.slice(0, 1000).map(sanitizeInput)\r\n        };\r\n    }\r\n};\r\n\r\nfunction escapeHTML(str) {\r\n    return str\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&#039;');\r\n}\r\n\r\nfunction createListItem(list) {\r\n    return `\r\n        <div class=\"list-item\">\r\n            <h3>${escapeHTML(list.name)}</h3>\r\n            <p>${escapeHTML(list.description)}</p>\r\n        </div>\r\n    `;\r\n}\r\n\r\nconst ErrorHandler = {\r\n    async logError(error, context) {\r\n        if (currentUser) {\r\n            await supabaseClient\r\n                .from('error_logs')\r\n                .insert([{\r\n                    user_id: currentUser.id,\r\n                    error: error.message,\r\n                    stack: error.stack,\r\n                    context,\r\n                    timestamp: new Date()\r\n                }]);\r\n        }\r\n        console.error(`${context}:`, error);\r\n    },\r\n    \r\n    handleError(error, context) {\r\n        this.logError(error, context);\r\n        modalSystem.show('error', {\r\n            title: \"Oops!\",\r\n            message: \"Something went wrong. Please try again.\"\r\n        });\r\n    }\r\n};\r\n\r\nfunction toggleParentFields() {\r\n    const isAdult = document.getElementById('isAdult').checked;\r\n    const parentSection = document.getElementById('parentInfoSection');\r\n    const adultSection = document.getElementById('adultInfoSection');\r\n    \r\n    // Get input elements\r\n    const parentInputs = parentSection.querySelectorAll('input');\r\n    const adultInputs = adultSection.querySelectorAll('input');\r\n    \r\n    if (isAdult) {\r\n        parentSection.style.display = 'none';\r\n        adultSection.style.display = 'block';\r\n        \r\n        // Toggle required attributes\r\n        parentInputs.forEach(input => input.required = false);\r\n        adultInputs.forEach(input => input.required = true);\r\n    } else {\r\n        parentSection.style.display = 'block';\r\n        adultSection.style.display = 'none';\r\n        \r\n        // Toggle required attributes\r\n        parentInputs.forEach(input => input.required = true);\r\n        adultInputs.forEach(input => input.required = false);\r\n    }\r\n}\r\n\r\n\r\nfunction continueAfterUpgrade() {\r\n  console.log(\"continueAfterUpgrade called\");\r\n  const popup = document.querySelector(\".confirmation-popup\");\r\n  if (popup) {\r\n    popup.style.opacity = \"0\";\r\n    popup.style.transform = \"translate(-50%, -50%) scale(0.7)\";\r\n    setTimeout(() => {\r\n      if (popup.parentNode) {\r\n        popup.parentNode.removeChild(popup);\r\n      }\r\n    }, 300);\r\n  }\r\n  \r\n  const upgradeScreen = document.getElementById(\"upgrade-screen\");\r\n  if (upgradeScreen) {\r\n    upgradeScreen.classList.remove(\"visible\");\r\n  }\r\n  \r\n  const upgradeForm = document.getElementById(\"upgradeForm\");\r\n  if (upgradeForm) {\r\n    upgradeForm.reset();\r\n  }\r\n  \r\n  // Remove game context to prevent auto-resume\r\n  localStorage.removeItem(\"gameContext\");\r\n  \r\n  // Go directly to welcome screen\r\n  hideUpgradePromptAndContinue();\r\n  showScreen(\"welcome-screen\");\r\n  \r\n  console.log(\"Upgrade process completed, redirected to welcome screen\");\r\n}\r\n\r\n\r\n\r\n// Add a debug helper function to check popup status\r\nfunction checkPopupStatus() {\r\n  const popups = document.querySelectorAll('.confirmation-popup');\r\n  if (popups.length === 0) {\r\n    console.log(\"No confirmation popups found in the DOM\");\r\n    return;\r\n  }\r\n  \r\n  popups.forEach((popup, index) => {\r\n    console.log(`Popup ${index + 1}:`, {\r\n      visibility: window.getComputedStyle(popup).visibility,\r\n      opacity: window.getComputedStyle(popup).opacity,\r\n      display: window.getComputedStyle(popup).display,\r\n      zIndex: window.getComputedStyle(popup).zIndex,\r\n      transform: window.getComputedStyle(popup).transform,\r\n      position: window.getComputedStyle(popup).position\r\n    });\r\n  });\r\n}\r\n\r\n// Add a global debug function for the upgrade process\r\nwindow.debugUpgrade = function() {\r\n  checkPopupStatus();\r\n  console.log(\"Upgrade screen visible:\", document.getElementById(\"upgrade-screen\").classList.contains(\"visible\"));\r\n  console.log(\"Upgrade form:\", document.getElementById(\"upgradeForm\"));\r\n  console.log(\"Current user:\", currentUser);\r\n};\r\n\r\n\r\nfunction skipUpgrade() {\r\n    hideUpgradePromptAndContinue();\r\n}\r\n\r\n// Find the updateUserStatusDisplay function and modify it\r\nfunction updateUserStatusDisplay(status) {\r\n    const userProfileSection = document.querySelector('.user-profile-section');\r\n    const userTierText = document.getElementById('userTierText');\r\n    \r\n    if (userProfileSection && userTierText) {\r\n      userTierText.className = 'status-badge';\r\n      \r\n      if (currentUser) {\r\n        userProfileSection.style.display = 'block';\r\n        switch (status) {\r\n          case 'free':\r\n          default:\r\n            userTierText.classList.add('trial');\r\n            userTierText.textContent = 'Trial Account';\r\n            break;\r\n          case 'pending':\r\n            userTierText.classList.add('pending');\r\n            userTierText.textContent = 'Premium Pending';\r\n            break;\r\n          case 'premium':\r\n            userTierText.classList.add('premium');\r\n            userTierText.textContent = 'Premium';\r\n            break;\r\n        }\r\n        \r\n        updateUserStats();\r\n        \r\n        // Dispatch event for ad logic to respond to\r\n        document.dispatchEvent(new CustomEvent('userStatusChanged', { \r\n          detail: { status: status } \r\n        }));\r\n      } else {\r\n        userTierText.classList.add('unregistered');\r\n        userTierText.textContent = 'Unregistered';\r\n        userProfileSection.style.display = 'none';\r\n        \r\n        // Also dispatch for unregistered users\r\n        document.dispatchEvent(new CustomEvent('userStatusChanged', { \r\n          detail: { status: 'unregistered' } \r\n        }));\r\n      }\r\n    } else {\r\n      console.warn('User profile elements not found');\r\n    }\r\n  }\r\n\r\nasync function updateUserStats() {\r\n  try {\r\n    if (!currentUser) return;\r\n    \r\n    const { data: gameData } = await supabaseClient\r\n      .from(\"game_progress\")\r\n      .select(\"coins\")\r\n      .eq(\"user_id\", currentUser.id)\r\n      .single();\r\n      \r\n    const { data: statsData } = await supabaseClient\r\n      .from(\"player_stats\")\r\n      .select(\"unique_words_practiced\")\r\n      .eq(\"user_id\", currentUser.id)\r\n      .single();\r\n    \r\n    if (gameData) {\r\n      document.getElementById(\"totalCoins\").textContent = gameData.coins || 0;\r\n    }\r\n    \r\n    if (statsData) {\r\n      document.getElementById(\"totalWords\").textContent = statsData.unique_words_practiced || 0;\r\n    }\r\n    \r\n    // Add this to force UI refresh\r\n    updateAllCoinDisplays();\r\n    WordsManager.updateDisplays(statsData?.unique_words_practiced || 0);\r\n  } catch (err) {\r\n    console.error(\"Error updating user stats:\", err);\r\n  }\r\n}\r\n\r\n\r\nfunction setupUserStatusSubscription() {\r\n    if (!currentUser) return;\r\n\r\n    const subscription = supabaseClient\r\n        .channel('user-status-' + currentUser.id)  // Unique channel per user\r\n        .on('postgres_changes', {\r\n            event: 'UPDATE',\r\n            schema: 'public',\r\n            table: 'user_profiles',\r\n            filter: `id=eq.${currentUser.id}`\r\n        }, \r\n        payload => {\r\n            console.log('Profile update received:', payload.new); // Debug log\r\n            if (payload.new && payload.new.status) {\r\n                updateUserStatusDisplay(payload.new.status);\r\n                \r\n                // If status changed to premium, trigger celebration\r\n                if (payload.new.status === 'premium') {\r\n                    showPremiumCelebration();\r\n                }\r\n            }\r\n        })\r\n        .subscribe(status => {\r\n            console.log('Subscription status:', status); // Debug log\r\n        });\r\n\r\n    return subscription;\r\n}\r\n\r\nfunction restoreGameContext() {\r\n    const savedContext = localStorage.getItem('gameContext');\r\n    if (savedContext) {\r\n        const context = JSON.parse(savedContext);\r\n        gameState.currentStage = context.stage || 1;\r\n        gameState.currentSet = context.set || 1;\r\n        gameState.currentLevel = context.level;\r\n        \r\n        // Clear the saved context\r\n        localStorage.removeItem('gameContext');\r\n        \r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkUpgradeStatus() {\r\n    if (!currentUser) return false;\r\n    \r\n    const hasRequestedUpgrade = localStorage.getItem(`upgradeRequested_${currentUser.id}`);\r\n    const isPremium = currentUser.status === 'premium';\r\n    const isPending = currentUser.status === 'pending';\r\n    \r\n    return hasRequestedUpgrade || isPremium || isPending;\r\n}\r\n\r\nfunction navigateHome() {\r\n    console.log('Navigating home with full refresh');\r\n    saveProgress();  // Ensure current state is saved\r\n    window.location.reload(true);\r\n}\r\n\r\nfunction forceReload() {\r\n    console.log('Force Reload Initiated');\r\n    \r\n    // Multiple reload strategies\r\n    if (window.location) {\r\n        window.location.href = window.location.href;  // Reload current page\r\n    }\r\n    \r\n    if (window.location.reload) {\r\n        window.location.reload(true);  // Hard reload with cache bypass\r\n    }\r\n    \r\n    // Fallback reload method\r\n    window.location.replace(window.location.pathname);\r\n}\r\n\r\n// Replace ALL home button onclick events with this\r\ndocument.querySelectorAll('.home-button').forEach(button => {\r\n    button.onclick = function() {\r\n        console.log('Home button clicked');\r\n        forceReload();\r\n    };\r\n});\r\n\r\nasync function showLeaderboard() {\r\n    showScreen(\"leaderboard-screen\");\r\n    const entriesContainer = document.getElementById(\"leaderboard-entries\");\r\n    \r\n    try {\r\n        async function updateLeaderboard() {\r\n            const { data, error } = await supabaseClient.from(\"player_leaderboard\").select(\"*\");\r\n            \r\n            if (error) {\r\n                console.error(\"Leaderboard fetch error:\", error);\r\n                return;\r\n            }\r\n            \r\n            // Store current positions for animation\r\n            const currentEntries = entriesContainer.children;\r\n            const positions = {};\r\n            \r\n            Array.from(currentEntries).forEach(entry => {\r\n                const username = entry.querySelector(\"[data-username]\").dataset.username;\r\n                positions[username] = entry.getBoundingClientRect();\r\n            });\r\n            \r\n            // Update the leaderboard HTML\r\n            entriesContainer.innerHTML = data.map((player, index) => `\r\n                <div class=\"leaderboard-entry ${player.username === currentUser?.user_metadata?.username ? \"you\" : \"\"} ${index < 3 ? `rank-${index+1}` : \"\"}\"\r\n                     data-rank=\"${index+1}\">\r\n                    <div>${player.player_rank}</div>\r\n                    <div data-username=\"${player.username}\">${player.username || \"Anonymous\"}</div>\r\n                    <div>${player.total_levels_completed}</div>\r\n                    <div>${player.total_words_learned}</div>\r\n                </div>\r\n            `).join(\"\");\r\n            \r\n            // Apply animations for position changes\r\n            const newEntries = entriesContainer.children;\r\n            \r\n            Array.from(newEntries).forEach(entry => {\r\n                const username = entry.querySelector(\"[data-username]\").dataset.username;\r\n                \r\n                if (positions[username]) {\r\n                    const oldPos = positions[username];\r\n                    const newPos = entry.getBoundingClientRect();\r\n                    const yDiff = oldPos.top - newPos.top;\r\n                    \r\n                    if (yDiff > 0) {\r\n                        entry.classList.add(\"moving-up\");\r\n                    } else if (yDiff < 0) {\r\n                        entry.classList.add(\"moving-down\");\r\n                    }\r\n                    \r\n                    entry.addEventListener(\"animationend\", () => {\r\n                        entry.classList.remove(\"moving-up\", \"moving-down\");\r\n                    }, { once: true });\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Initial update\r\n        await updateLeaderboard();\r\n        \r\n        // Set interval for polling updates\r\n        const pollInterval = setInterval(updateLeaderboard, 10000);\r\n        \r\n        // Store interval ID so we can clear it when needed\r\n        const leaderboardScreen = document.getElementById(\"leaderboard-screen\");\r\n        if (leaderboardScreen) {\r\n            if (leaderboardScreen.dataset.pollInterval) {\r\n                clearInterval(parseInt(leaderboardScreen.dataset.pollInterval));\r\n            }\r\n            leaderboardScreen.dataset.pollInterval = pollInterval;\r\n        }\r\n        \r\n    } catch (detailedError) {\r\n        console.error(\"Detailed leaderboard error:\", detailedError);\r\n        entriesContainer.innerHTML = `<p>Error loading leaderboard: ${detailedError.message}</p>`;\r\n    }\r\n}\r\n\r\nfunction cleanupLeaderboard() {\r\n    const leaderboardScreen = document.getElementById('leaderboard-screen');\r\n    if (leaderboardScreen) {\r\n        // Cleanup channel\r\n        if (leaderboardScreen.dataset.channel) {\r\n            supabaseClient.removeChannel(leaderboardScreen.dataset.channel);\r\n            delete leaderboardScreen.dataset.channel;\r\n        }\r\n        // Cleanup interval\r\n        if (leaderboardScreen.dataset.pollInterval) {\r\n            clearInterval(parseInt(leaderboardScreen.dataset.pollInterval));\r\n            delete leaderboardScreen.dataset.pollInterval;\r\n        }\r\n    }\r\n}\r\n\r\nasync function updatePlayerStats(levelTime, mistakes, currentStreak) {\r\n    if (currentUser && \"premium\" === currentUser.status) {\r\n        try {\r\n            // Get current player stats\r\n            const { data: currentStats, error: statsError } = \r\n                await supabaseClient.from(\"player_stats\")\r\n                    .select(\"*\")\r\n                    .eq(\"user_id\", currentUser.id)\r\n                    .single();\r\n\r\n            if (statsError && statsError.code !== \"PGRST116\") throw statsError;\r\n\r\n            // Calculate unique words (remove duplicates)\r\n            const uniqueWords = [...new Set(currentGame.words)];\r\n            const wordsToAdd = uniqueWords.length;\r\n\r\n            // Prepare update object\r\n            const statsUpdate = {\r\n                user_id: currentUser.id,\r\n                total_levels_completed: (currentStats?.total_levels_completed || 0) + 1,\r\n                unique_words_practiced: (currentStats?.unique_words_practiced || 0) + wordsToAdd,\r\n                last_updated: new Date().toISOString()\r\n            };\r\n\r\n            // Update database\r\n            const { error: upsertError } = \r\n                await supabaseClient.from(\"player_stats\")\r\n                    .upsert(statsUpdate, { onConflict: \"user_id\", returning: \"minimal\" });\r\n\r\n            if (upsertError) throw upsertError;\r\n\r\n            // Immediately update UI\r\n            await WordsManager.updateWords(wordsToAdd);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error updating player stats:\", error);\r\n        }\r\n    }\r\n}\r\n\r\nasync function checkExistingSession() {\r\n    console.log(\"Checking for existing user session\");\r\n    \r\n    try {\r\n        const { data: { session } } = await supabaseClient.auth.getSession();\r\n        \r\n        if (session) {\r\n            console.log(\"Found existing session for user:\", session.user.id);\r\n            currentUser = session.user;\r\n            \r\n            // Fetch user profile data\r\n            const { data: profileData } = await supabaseClient\r\n                .from(\"user_profiles\")\r\n                .select(\"status\")\r\n                .eq(\"id\", currentUser.id)\r\n                .single();\r\n                \r\n            if (profileData) {\r\n                currentUser.status = profileData.status;\r\n                updateUserStatusDisplay(profileData.status);\r\n            }\r\n            \r\n            // Initialize status check\r\n            initializeStatusCheck();\r\n            \r\n            // Update UI\r\n            updateAuthUI();\r\n            updateGuestPlayButton();\r\n            \r\n            return true;\r\n        } else {\r\n            console.log(\"No active session found\");\r\n            currentUser = null;\r\n            updateAuthUI();\r\n            updateUserStatusDisplay(null);\r\n            updateGuestPlayButton();\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Session check error:\", error);\r\n        currentUser = null;\r\n        updateAuthUI();\r\n        updateUserStatusDisplay(null);\r\n        updateGuestPlayButton();\r\n        return false;\r\n    }\r\n}\r\n\r\n// Add at the document.addEventListener(\"DOMContentLoaded\", ...) section\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    console.log(\"DOM fully loaded, initializing game\");\r\n    \r\n    // Initialize game with explicit progression saving/loading\r\n    gameInit.init().then(() => {\r\n        console.log(\"Game initialization completed\");\r\n        \r\n        // Check for saved context on startup\r\n        const savedContext = localStorage.getItem(\"gameContext\");\r\n        if (savedContext && !window.location.hash) {\r\n            try {\r\n                const context = JSON.parse(savedContext);\r\n                const timeSinceContext = Date.now() - (context.timestamp || 0);\r\n                \r\n                // Only use context if it's less than 24 hours old\r\n                if (timeSinceContext < 24 * 60 * 60 * 1000) {\r\n                    console.log(\"Found recent game context, updating game state:\", context);\r\n                    gameState.currentStage = context.stage || gameState.currentStage;\r\n                    gameState.currentSet = context.set || gameState.currentSet;\r\n                    gameState.currentLevel = context.level || gameState.currentLevel;\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Error parsing saved context:\", e);\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\nfunction setupAutoSave() {\r\n    // Auto-save progress every 30 seconds\r\n    const autoSaveInterval = setInterval(() => {\r\n        if (gameState.currentStage && gameState.currentSet && gameState.currentLevel) {\r\n            console.log(\"Auto-saving game progress\");\r\n            saveProgress();\r\n        }\r\n    }, 30000);\r\n    \r\n    // Save progress when the window is about to unload\r\n    window.addEventListener(\"beforeunload\", () => {\r\n        if (gameState.currentStage && gameState.currentSet && gameState.currentLevel) {\r\n            console.log(\"Saving progress before page unload\");\r\n            saveProgress();\r\n        }\r\n    });\r\n    \r\n    return autoSaveInterval;\r\n}\r\n\r\n// Call this function at initialization\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    setupAutoSave();\r\n});\r\n\r\nfunction showPremiumCelebration() {\r\n    // Create the celebration overlay\r\n    const celebrationOverlay = document.createElement('div');\r\n    celebrationOverlay.className = 'premium-celebration';\r\n    \r\n    celebrationOverlay.innerHTML = `\r\n        <div class=\"celebration-content\">\r\n            <h1 class=\"celebration-title\">Congratulations!</h1>\r\n            <p class=\"celebration-message\">You've unlocked Premium Access!</p>\r\n            <button class=\"celebration-button\" onclick=\"handlePremiumCelebrationComplete()\">\r\n                Continue\r\n            </button>\r\n        </div>\r\n    `;\r\n    \r\n    // Add to body\r\n    document.body.appendChild(celebrationOverlay);\r\n    \r\n    // Trigger show animation\r\n    setTimeout(() => {\r\n        celebrationOverlay.classList.add('show');\r\n    }, 100);\r\n}\r\n\r\nfunction handlePremiumCelebrationComplete() {\r\n  const e = document.querySelector(\".premium-celebration\");\r\n  if (e) {\r\n    e.classList.remove(\"show\");\r\n    \r\n    // Check if we need to unlock a set for a previously completed stage\r\n    const completedStage = localStorage.getItem(\"unlockNextSetForStage\");\r\n    if (completedStage) {\r\n      const stageNum = parseInt(completedStage, 10);\r\n      if (!isNaN(stageNum) && stageNum >= 2 && stageNum <= 5) {\r\n        console.log(`Unlocking set 2 for previously completed stage ${stageNum}`);\r\n        \r\n        // Make sure the stage exists in unlockedSets\r\n        gameState.unlockedSets[stageNum] || (gameState.unlockedSets[stageNum] = new Set);\r\n        \r\n        // Add set 2 to the unlocked sets\r\n        gameState.unlockedSets[stageNum].add(2);\r\n        \r\n        // Make sure the set exists in unlockedLevels\r\n        const setKey = `${stageNum}_2`;\r\n        gameState.unlockedLevels[setKey] || (gameState.unlockedLevels[setKey] = new Set);\r\n        \r\n        // Add level 1 to the set\r\n        gameState.unlockedLevels[setKey].add(1);\r\n        \r\n        // Save progress\r\n        saveProgress();\r\n        \r\n        // Clear the flag\r\n        localStorage.removeItem(\"unlockNextSetForStage\");\r\n      }\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      e.remove();\r\n      showScreen(\"welcome-screen\");\r\n    }, 500);\r\n  }\r\n}\r\n\r\nfunction handlePremiumCelebrationComplete() {\r\n    const overlay = document.querySelector('.premium-celebration');\r\n    if (overlay) {\r\n        overlay.classList.remove('show');\r\n        setTimeout(() => {\r\n            overlay.remove();\r\n            // Refresh game state with new premium access\r\n            showScreen('welcome-screen');\r\n        }, 500);\r\n    }\r\n}\r\n\r\nfunction initializeStatusCheck() {\r\n  if (window.statusCheckInterval && clearInterval(window.statusCheckInterval), currentUser) {\r\n    const e = setInterval((async()=>{\r\n      try {\r\n        if (!currentUser || !currentUser.id)\r\n          return void clearInterval(window.statusCheckInterval);\r\n          \r\n        const {data: e, error: t} = await supabaseClient.from(\"user_profiles\").select(\"status\").eq(\"id\", currentUser.id).single();\r\n        \r\n        if (t || !e)\r\n          return clearInterval(window.statusCheckInterval), currentUser = null, void updateAuthUI();\r\n        \r\n        const previousStatus = currentUser.status;\r\n        updateUserStatusDisplay(e.status);\r\n        \r\n        if (\"premium\" === e.status && \"premium\" !== previousStatus) {\r\n          currentUser.status = \"premium\";\r\n          // Check if user completed a trial stage before upgrading\r\n          const completedStage = localStorage.getItem(\"completedTrialStage\");\r\n          if (completedStage) {\r\n            // Set flag to unlock next set after celebration\r\n            localStorage.setItem(\"unlockNextSetForStage\", completedStage);\r\n            // Clear the completed stage marker\r\n            localStorage.removeItem(\"completedTrialStage\");\r\n          }\r\n          showPremiumCelebration();\r\n        }\r\n      } catch(e) {\r\n        console.error(\"Status check error:\", e), clearInterval(window.statusCheckInterval), currentUser = null, updateAuthUI()\r\n      }\r\n    }), 3e3);\r\n    \r\n    window.statusCheckInterval = e\r\n  }\r\n}\r\n\r\n// ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE ARCADE\r\n\r\n\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const otpInput = document.getElementById('otpInput');\r\n    if (otpInput) {\r\n        otpInput.addEventListener('input', function(e) {\r\n            // Remove any non-numeric characters\r\n            this.value = this.value.replace(/[^0-9]/g, '');\r\n            \r\n            // Limit to 4 digits\r\n            if (this.value.length > 4) {\r\n                this.value = this.value.slice(0, 4);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nlet currentArcadeSession = {\r\n    eventId: null,\r\n    otp: null,\r\n    wordPool: [],\r\n    participants: [],\r\n    teacherId: null,\r\n    wordGoal: 50,\r\n    state: 'pre-start',  // 'pre-start', 'started', 'active', 'ended'\r\n    completedPlayers: [],  // To track players who already completed\r\n    playerRank: null,      // Current player's rank if completed\r\n    winnerScreenShown: false, // Flag to prevent multiple winner screens\r\n    startTime: null,       // When the session started\r\n    endTime: null          // When the session ended\r\n};\r\n\r\n\r\nasync function showArcadeModal() {\r\n    const modal = document.getElementById('arcade-modal');\r\n    const teacherView = document.getElementById('teacher-view');\r\n    const playerView = document.getElementById('player-view');\r\n    const usernameInput = document.getElementById('arcadeUsername');\r\n    const inputGroup = usernameInput ? usernameInput.closest('.input-group') : null;\r\n    \r\n    try {\r\n        if (currentUser) {\r\n            const { data } = await supabaseClient\r\n                .from('user_profiles')\r\n                .select('role')\r\n                .eq('id', currentUser.id)\r\n                .single();\r\n                \r\n            if (data?.role === 'teacher') {\r\n                // Always create a new OTP for a new session\r\n                const otp = Math.floor(1000 + Math.random() * 9000).toString();\r\n                currentArcadeSession.otp = otp;\r\n                currentArcadeSession.teacherId = currentUser.id;\r\n                currentArcadeSession.participants = [];\r\n                currentArcadeSession.isInitialized = false;\r\n                currentArcadeSession.state = \"pre-start\";\r\n                currentArcadeSession.celebrationTriggered = false;\r\n                \r\n                if (window.arcadeChannel) {\r\n                    window.arcadeChannel.unsubscribe();\r\n                }\r\n                \r\n                window.arcadeChannel = supabaseClient.channel(`arcade:${otp}`, {\r\n                    config: { broadcast: { self: true } }\r\n                });\r\n                \r\n                window.arcadeChannel.on('broadcast', { event: 'player_join' }, ({ payload: data }) => {\r\n                    console.log('Player join event received:', data);\r\n                    if (!currentArcadeSession.participants.find(p => p.username === data.username)) {\r\n                        currentArcadeSession.participants.push({\r\n                            username: data.username,\r\n                            wordsCompleted: 0,\r\n                            coins: 0\r\n                        });\r\n                        \r\n                        document.getElementById('player-count').textContent = currentArcadeSession.participants.length;\r\n                        \r\n                        const leaderboard = document.getElementById('arcade-leaderboard');\r\n                        if (leaderboard && leaderboard.offsetParent !== null) {\r\n                            updateAllPlayersProgress();\r\n                        }\r\n                    }\r\n                }).subscribe();\r\n                \r\n                const baseUrl = window.location.origin + window.location.pathname;\r\n                generateQRCode(otp);\r\n                \r\n                document.getElementById('otp').textContent = otp;\r\n                teacherView.style.display = 'block';\r\n                playerView.style.display = 'none';\r\n                \r\n                // Reset stage checkboxes\r\n                document.querySelectorAll('.stage-checkboxes input[type=\"checkbox\"]').forEach(checkbox => {\r\n                    checkbox.checked = false;\r\n                });\r\n                \r\n                // Reset word goal\r\n                const wordGoalInput = document.getElementById('wordGoalInput');\r\n                const wordGoalSlider = document.getElementById('wordGoalSlider');\r\n                const wordGoalDisplay = document.getElementById('wordGoalDisplay');\r\n                \r\n                if (wordGoalInput) wordGoalInput.value = \"50\";\r\n                if (wordGoalSlider) wordGoalSlider.value = \"50\";\r\n                if (wordGoalDisplay) wordGoalDisplay.textContent = \"50\";\r\n                \r\n                initializeWordGoalSlider();\r\n                \r\n                // Make sure End Arcade button is not visible\r\n                const endArcadeButton = document.querySelector('.end-arcade-button');\r\n                if (endArcadeButton) {\r\n                    endArcadeButton.classList.remove('visible');\r\n                }\r\n            } else {\r\n                teacherView.style.display = 'none';\r\n                playerView.style.display = 'block';\r\n                \r\n                if (usernameInput && inputGroup) {\r\n                    const username = currentUser.user_metadata?.username || currentUser.email.split('@')[0];\r\n                    usernameInput.value = username;\r\n                    usernameInput.readOnly = true;\r\n                    usernameInput.style.display = 'none';\r\n                    \r\n                    const usernameDisplay = document.createElement('div');\r\n                    usernameDisplay.className = 'username-display';\r\n                    usernameDisplay.textContent = `Joining as: ${username}`;\r\n                    inputGroup.insertBefore(usernameDisplay, usernameInput);\r\n                }\r\n            }\r\n        } else {\r\n            teacherView.style.display = 'none';\r\n            playerView.style.display = 'block';\r\n            \r\n            if (usernameInput) {\r\n                usernameInput.readOnly = false;\r\n                usernameInput.style.display = 'block';\r\n                \r\n                const usernameDisplay = inputGroup?.querySelector('.username-display');\r\n                if (usernameDisplay) {\r\n                    usernameDisplay.remove();\r\n                }\r\n            }\r\n        }\r\n        \r\n        modal.style.display = 'block';\r\n    } catch (error) {\r\n        console.error('Arcade setup error:', error);\r\n        alert('Failed to initialize arcade');\r\n    }\r\n}\r\n\r\nfunction initializeWordGoalSlider() {\r\n    const slider = document.getElementById('wordGoalSlider');\r\n    const display = document.getElementById('wordGoalDisplay');\r\n    const input = document.getElementById('wordGoalInput');\r\n    const stops = document.querySelectorAll('.slider-stop');\r\n    \r\n    if (!slider || !display || !input) return;\r\n    \r\n    // Set the min attribute to 0 to match visual display\r\n    slider.min = 0;\r\n    slider.max = 200;\r\n    slider.value = 50; // Default value\r\n    display.textContent = 50;\r\n    input.value = 50;\r\n    \r\n    // Update display and input when slider changes\r\n    slider.addEventListener('input', function() {\r\n        const value = parseInt(this.value);\r\n        display.textContent = value;\r\n        input.value = value;\r\n    });\r\n    \r\n    // Update slider and display when input changes\r\n    input.addEventListener('input', function() {\r\n        let value = parseInt(this.value) || 0;\r\n        \r\n        // Enforce min/max constraints\r\n        value = Math.max(0, Math.min(200, value));\r\n        \r\n        slider.value = value;\r\n        display.textContent = value;\r\n        this.value = value;\r\n    });\r\n    \r\n    // Allow clicking on preset stops\r\n    stops.forEach(stop => {\r\n        stop.addEventListener('click', function() {\r\n            const value = parseInt(this.dataset.value);\r\n            slider.value = value;\r\n            display.textContent = value;\r\n            input.value = value;\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction startPlayerCounting(teacherId) {\r\n    if (window.countInterval) clearInterval(window.countInterval);\r\n    \r\n    async function updateCount() {\r\n        try {\r\n            const { data } = await supabaseClient\r\n                .from('game_progress')\r\n                .select('arcade_session')\r\n                .eq('user_id', teacherId)\r\n                .single();\r\n                \r\n            if (data?.arcade_session?.participants) {\r\n                document.getElementById('player-count').textContent = \r\n                    data.arcade_session.participants.length;\r\n            }\r\n        } catch (error) {\r\n            console.error('Count update error:', error);\r\n        }\r\n    }\r\n    \r\n    updateCount();\r\n    window.countInterval = setInterval(updateCount, 2000);\r\n}\r\n\r\nasync function joinArcade() {\r\n  const otp = document.getElementById(\"otpInput\").value.trim().toUpperCase();\r\n  \r\n  try {\r\n    window.arcadeChannel = supabaseClient.channel(`arcade:${otp}`);\r\n    const username = currentUser ? currentUser.user_metadata?.username : getRandomSimploName();\r\n    let statusCheckInterval;\r\n    \r\n    currentArcadeSession.playerName = username;\r\n    \r\n    window.arcadeChannel\r\n      .on(\"broadcast\", { event: \"game_end\" }, ({ payload: event }) => {\r\n        handleGameEnd(event);\r\n        currentArcadeSession.state = event.state;\r\n        if (event.state === \"active\") {\r\n          currentArcadeSession.wordPool = event.wordPool;\r\n          currentArcadeSession.wordGoal = event.wordGoal;\r\n          startArcadeGame();\r\n          if (statusCheckInterval) clearInterval(statusCheckInterval);\r\n        }\r\n      })\r\n      .on(\"broadcast\", { event: \"game_playing\" }, ({ payload: event }) => {\r\n        if (event.state === \"active\") {\r\n          currentArcadeSession.state = \"active\";\r\n          currentArcadeSession.wordPool = event.wordPool;\r\n          currentArcadeSession.wordGoal = event.wordGoal;\r\n          startArcadeGame();\r\n          if (statusCheckInterval) clearInterval(statusCheckInterval);\r\n        }\r\n      })\r\n      .subscribe();\r\n    \r\n    // Send join event\r\n    await window.arcadeChannel.send({\r\n      type: \"broadcast\",\r\n      event: \"player_join\",\r\n      payload: {\r\n        username: username,\r\n        joinedAt: (new Date()).toISOString(),\r\n        coins: 0 // Always start with 0 coins in a new session\r\n      }\r\n    });\r\n    \r\n    currentArcadeSession.joinEventSent = true;\r\n    currentArcadeSession.otp = otp; // Store OTP for reference\r\n    \r\n    // Check game status\r\n    await window.arcadeChannel.send({\r\n      type: \"broadcast\",\r\n      event: \"check_game_status\",\r\n      payload: {\r\n        username: username,\r\n        requestType: \"lateJoin\",\r\n        timestamp: Date.now()\r\n      }\r\n    });\r\n    \r\n    document.getElementById(\"arcade-modal\").style.display = \"none\";\r\n    \r\n    setTimeout(() => {\r\n      if (currentArcadeSession.state !== \"active\") {\r\n        showWaitingScreen();\r\n      }\r\n    }, 500);\r\n    \r\n    // Periodically check game status\r\n    statusCheckInterval = setInterval(async () => {\r\n      await window.arcadeChannel.send({\r\n        type: \"broadcast\",\r\n        event: \"check_game_status\"\r\n      });\r\n    }, 2000);\r\n    \r\n    // Clean up the interval after 5 minutes\r\n    setTimeout(() => {\r\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\r\n    }, 300000);\r\n  } catch (error) {\r\n    console.error(\"Join error:\", error);\r\n    alert(\"Failed to join arcade\");\r\n  }\r\n}\r\n\r\n\r\nfunction showJoinButton() {\r\n    const joinButton = document.getElementById('joinGameButton');\r\n    if (joinButton) {\r\n        joinButton.style.display = 'block';\r\n        joinButton.textContent = 'Join Active Game';\r\n    }\r\n}\r\n\r\nasync function getCurrentCoins() {\r\n    if (!currentUser) return 0;\r\n    \r\n    const { data } = await supabaseClient\r\n        .from('game_progress')\r\n        .select('coins')\r\n        .eq('user_id', currentUser.id)\r\n        .single();\r\n        \r\n    return data?.coins || 0;\r\n}\r\n\r\nfunction getRandomSimploName() {\r\n    const names = [\r\n        'Simplosaurus', 'Simplodian', 'Simpleton', 'Simplonius', 'Simplomancer',\r\n        'Simplonaut', 'Simplobot', 'Simplozilla', 'Simplopedia', 'Simplotron',\r\n        'Simplodex', 'Simplomatic', 'Simplomobile', 'Simplocopter', 'Simplonium',\r\n        'Simplotastic', 'Simplominator', 'Simploverse', 'Simplonado', 'Simplophant',\r\n        'Simplowizard', 'Simplodragon', 'Simplosapien', 'Simploninja', 'Simplowarrior'\r\n    ];\r\n    return names[Math.floor(Math.random() * names.length)];\r\n}\r\n\r\nfunction showWaitingScreen() {\r\n  if (\"active\" === currentArcadeSession.state) {\r\n    return void startArcadeGame();\r\n  }\r\n  \r\n  document.querySelectorAll(\".screen\").forEach((e) => {\r\n    e.classList.remove(\"visible\");\r\n  });\r\n  \r\n  const waitingScreen = document.getElementById(\"waiting-screen\");\r\n  waitingScreen.classList.add(\"visible\");\r\n  \r\n  const joinGameButton = document.getElementById(\"joinGameButton\");\r\n  if (joinGameButton) {\r\n    joinGameButton.style.display = \"active\" === currentArcadeSession.state ? \"block\" : \"none\";\r\n  }\r\n  \r\n  // Start the mini-game while waiting\r\n  try {\r\n    initializeWaitingGame();\r\n  } catch (error) {\r\n    console.error(\"Error initializing waiting game:\", error);\r\n  }\r\n  \r\n  const intervalId = setInterval(() => {\r\n    if (window.arcadeChannel) {\r\n      try {\r\n        window.arcadeChannel.send({\r\n          type: \"broadcast\",\r\n          event: \"check_game_status\",\r\n          payload: {\r\n            username: currentArcadeSession.playerName,\r\n            requestType: \"waitingCheck\"\r\n          }\r\n        });\r\n      } catch (e) {\r\n        console.error(\"Error checking game status:\", e);\r\n      }\r\n    }\r\n  }, 2000);\r\n  \r\n  const playerCountElement = document.getElementById(\"waiting-player-count\");\r\n  if (playerCountElement) {\r\n    playerCountElement.parentElement.style.display = \"none\";\r\n  }\r\n  \r\n  waitingScreen.dataset.pollInterval = intervalId;\r\n  \r\n  setTimeout(() => {\r\n    if (intervalId) clearInterval(intervalId);\r\n  }, 300000);\r\n}\r\n\r\nasync function initializeArcade() {\r\n    try {\r\n        const initializeButton = document.querySelector('.initialize-button');\r\n        const endArcadeButton = document.querySelector('.end-arcade-button');\r\n        \r\n        if (initializeButton) initializeButton.style.display = 'none';\r\n        if (endArcadeButton) endArcadeButton.classList.add('visible');\r\n        \r\n        currentArcadeSession.state = 'active';\r\n        currentArcadeSession.isInitialized = true;\r\n        \r\n        // Ensure participants list is properly initialized with zero values\r\n        currentArcadeSession.participants = currentArcadeSession.participants.map(p => ({\r\n            ...p,\r\n            wordsCompleted: 0,\r\n            coins: p.coins || 0\r\n        }));\r\n        \r\n        updateAllPlayersProgress();\r\n        initializeModeratorInactivityTimer();\r\n        \r\n        await window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'game_playing',\r\n            payload: {\r\n                wordPool: currentArcadeSession.wordPool,\r\n                wordGoal: currentArcadeSession.wordGoal,\r\n                state: 'active',\r\n                timestamp: Date.now()\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Initialize error:', error);\r\n        alert('Failed to start game');\r\n    }\r\n}\r\n\r\nfunction showModeratorScreen() {\r\n    // Hide all other screens\r\n    document.querySelectorAll('.screen').forEach(screen => {\r\n        screen.classList.remove('visible');\r\n    });\r\n    \r\n    // Show moderator screen\r\n    document.getElementById('moderator-screen').classList.add('visible');\r\n    \r\n    // Update OTP display\r\n    const otpDisplay = document.getElementById('moderatorOtp');\r\n    if (otpDisplay && currentArcadeSession.otp) {\r\n        otpDisplay.textContent = currentArcadeSession.otp;\r\n        \r\n        // Generate QR code\r\n        const qrUrl = `${window.location.origin + window.location.pathname}#join=${currentArcadeSession.otp}`;\r\n        console.log('QR URL generated:', qrUrl);\r\n        new QRious({\r\n            element: document.getElementById('qrCode'),\r\n            value: qrUrl,\r\n            size: 200,\r\n            backgroundAlpha: 1,\r\n            foreground: \"#16213e\",\r\n            background: \"#ffffff\",\r\n            level: \"H\"\r\n        });\r\n        \r\n        // Update session metadata\r\n        const now = new Date();\r\n        const sessionInfo = {\r\n            sessionDate: now.toLocaleDateString(),\r\n            sessionStartTime: now.toLocaleTimeString(),\r\n            sessionWordGoal: currentArcadeSession.wordGoal,\r\n            activeParticipantCount: currentArcadeSession.participants.length\r\n        };\r\n        \r\n        Object.entries(sessionInfo).forEach(([id, value]) => {\r\n            const element = document.getElementById(id);\r\n            if (element) {\r\n                element.textContent = value;\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Initialize leaderboard\r\n    initializeLeaderboard();\r\n    \r\n    // Set up proper button visibility based on session state\r\n    const initializeButton = document.querySelector('.initialize-button');\r\n    const endArcadeButton = document.querySelector('.end-arcade-button');\r\n    \r\n    if (currentArcadeSession.isInitialized && currentArcadeSession.state === 'active') {\r\n        // If session is already initialized and active, show end button and hide initialize button\r\n        if (initializeButton) initializeButton.style.display = 'none';\r\n        if (endArcadeButton) endArcadeButton.classList.add('visible');\r\n    } else {\r\n        // For new or reset sessions, show initialize button and hide end button\r\n        if (initializeButton) initializeButton.style.display = 'block';\r\n        if (endArcadeButton) endArcadeButton.classList.remove('visible');\r\n    }\r\n    \r\n    // Set up inactivity timer\r\n    initializeModeratorInactivityTimer();\r\n    \r\n    // Update player progress if needed\r\n    setTimeout(() => {\r\n        if (currentArcadeSession.participants && currentArcadeSession.participants.length > 0) {\r\n            updateAllPlayersProgress();\r\n        }\r\n    }, 500);\r\n}\r\n\r\nfunction initializeLeaderboard() {\r\n    const leaderboard = document.getElementById('arcade-leaderboard');\r\n    \r\n    // Add header\r\n    leaderboard.innerHTML = `\r\n        <div class=\"leaderboard-header\">\r\n            <div>Rank</div>\r\n            <div>Player</div>\r\n            <div>Words</div>\r\n            <div>Coins</div>\r\n        </div>\r\n    `;\r\n    \r\n    // Show any existing participants\r\n    if (currentArcadeSession.participants.length > 0) {\r\n        updateAllPlayersProgress();\r\n    }\r\n}\r\n\r\n\r\nconst readyPhrases = [\r\n    \"Born Ready!\",\r\n    \"Ready to Roll!\",\r\n    \"All Set!\",\r\n    \"Locked & Loaded!\",\r\n    \"Ready Player!\",\r\n    \"Game Face On!\",\r\n    \"In Position!\",\r\n    \"Ready to Rock!\",\r\n    \"Standing By!\",\r\n    \"Powered Up!\",\r\n    \"Challenge Ready!\",\r\n    \"Mission Ready!\",\r\n    \"Ready to Shine!\",\r\n    \"Bring it On!\",\r\n    \"Ready to Rumble!\",\r\n    \"Set for Success!\",\r\n    \"Level Ready!\",\r\n    \"Shields Up!\",\r\n    \"Word Warrior Ready!\",\r\n    \"Let's Do This!\"\r\n];\r\n\r\nconst shineColors = [\r\n    '#1E90FF',  // Blue\r\n    '#FF1493',  // Deep Pink\r\n    '#00CED1',  // Dark Turquoise\r\n    '#9370DB',  // Medium Purple\r\n    '#FFD700',  // Gold\r\n    '#FF4500',  // Orange Red\r\n    '#32CD32',  // Lime Green\r\n    '#FF69B4',  // Hot Pink\r\n    '#4169E1',  // Royal Blue\r\n    '#8A2BE2'   // Blue Violet\r\n];\r\n\r\n\r\nfunction updateAllPlayersProgress() {\r\n  // Get current state from DOM for progress preservation\r\n  const currentProgressMap = {};\r\n  document.querySelectorAll(\".leaderboard-entry\").forEach(entry => {\r\n    const usernameEl = entry.querySelector(\"[data-username]\");\r\n    const wordsEl = entry.querySelector(\"[data-words]\");\r\n    \r\n    if (usernameEl && wordsEl) {\r\n      const username = usernameEl.dataset.username;\r\n      const words = parseInt(wordsEl.textContent) || 0;\r\n      currentProgressMap[username] = words;\r\n    }\r\n  });\r\n  \r\n  // Ensure participants maintain their highest progress values\r\n  currentArcadeSession.participants.forEach(participant => {\r\n    const username = participant.username;\r\n    if (currentProgressMap[username] && currentProgressMap[username] > participant.wordsCompleted) {\r\n      participant.wordsCompleted = currentProgressMap[username];\r\n      console.log(`Restored higher progress for ${username}: ${currentProgressMap[username]}`);\r\n    }\r\n  });\r\n  \r\n  // Sort participants by progress\r\n  const sortedParticipants = [...currentArcadeSession.participants].sort((a, b) => \r\n    b.wordsCompleted !== a.wordsCompleted ? \r\n      b.wordsCompleted - a.wordsCompleted : \r\n      b.coins - a.coins\r\n  );\r\n  \r\n  // Build updated leaderboard HTML\r\n  const leaderboardHtml = `\r\n      <div class=\"leaderboard-header\">\r\n          <div>Rank</div>\r\n          <div>Player</div>\r\n          <div>Words</div>\r\n          <div>Coins</div>\r\n      </div>\r\n      ${sortedParticipants.map((player, index) => \r\n        \"active\" === currentArcadeSession.state && player.username ? \r\n          `<div class=\"leaderboard-entry ${index < 3 ? `rank-${index+1}` : \"\"}\"\r\n                 data-rank=\"${index+1}\">\r\n              <div class=\"rank\">${index+1}</div>\r\n              <div data-username=\"${player.username}\" class=\"player-name\">${player.username}</div>\r\n              <div data-words=\"${player.wordsCompleted || 0}\" class=\"words\">${player.wordsCompleted || 0}</div>\r\n              <div data-coins=\"${player.coins || 0}\" class=\"coins\">${player.coins || 0}</div>\r\n          </div>` \r\n        : \r\n          `<div class=\"leaderboard-entry waiting ${index < 3 ? `rank-${index+1}` : \"\"}\"\r\n                 data-rank=\"${index+1}\">\r\n              <div class=\"rank\">${index+1}</div>\r\n              <div data-username=\"${player.username}\" class=\"player-name\">${player.username}</div>\r\n              <div class=\"player-status-waiting\">\r\n                  <span class=\"status-text\" style=\"color: ${shineColors[Math.floor(Math.random() * shineColors.length)]}\">${readyPhrases[Math.floor(Math.random() * readyPhrases.length)]}</span>\r\n              </div>\r\n              <div class=\"waiting-indicator\">\r\n                  <span class=\"dot\"></span>\r\n                  <span class=\"dot\"></span>\r\n                  <span class=\"dot\"></span>\r\n              </div>\r\n          </div>`\r\n      ).join(\"\")}\r\n  `;\r\n  \r\n  // Update the DOM\r\n  const leaderboardEl = document.getElementById(\"arcade-leaderboard\");\r\n  if (leaderboardEl) {\r\n    leaderboardEl.innerHTML = leaderboardHtml;\r\n  }\r\n  \r\n  // Update other display elements\r\n  const countEl = document.getElementById(\"activeParticipantCount\");\r\n  if (countEl) countEl.textContent = sortedParticipants.length;\r\n  \r\n  const dateEl = document.getElementById(\"sessionDate\");\r\n  if (dateEl) dateEl.textContent = (new Date).toLocaleDateString();\r\n  \r\n  const timeEl = document.getElementById(\"sessionStartTime\");\r\n  if (timeEl) timeEl.textContent = (new Date).toLocaleTimeString();\r\n  \r\n  const goalEl = document.getElementById(\"sessionWordGoal\");\r\n  if (goalEl) goalEl.textContent = currentArcadeSession.wordGoal;\r\n}\r\n\r\nasync function startArcade() {\r\n    // Get selected stages\r\n    const selectedStages = Array.from(document.querySelectorAll('.stage-checkboxes input:checked')).map(el => parseInt(el.value));\r\n    const warningElement = document.querySelector('.stage-warning');\r\n    \r\n    if (selectedStages.length === 0) {\r\n        if (warningElement) warningElement.style.display = 'block';\r\n        console.error('No stages selected');\r\n        return;\r\n    }\r\n    \r\n    if (warningElement) warningElement.style.display = 'none';\r\n    \r\n    // Generate word pool from selected stages\r\n    currentArcadeSession.wordPool = generateWordPool(selectedStages);\r\n    \r\n    // Get word goal from input\r\n    const wordGoalInput = document.getElementById('wordGoal') || document.getElementById('wordGoalSlider');\r\n    if (wordGoalInput) {\r\n        const wordGoalValue = parseInt(wordGoalInput.value);\r\n        currentArcadeSession.wordGoal = isNaN(wordGoalValue) ? 50 : wordGoalValue;\r\n        console.log('Selected word goal:', currentArcadeSession.wordGoal);\r\n    } else {\r\n        console.error('Word goal slider element not found. Available elements:', document.querySelectorAll('select, input[type=\"range\"]'));\r\n        currentArcadeSession.wordGoal = 50;\r\n        console.warn('Defaulting to word goal of 50');\r\n    }\r\n    \r\n    // Initialize arcade session state with clear tracking properties\r\n    currentArcadeSession.state = 'started';\r\n    currentArcadeSession.participants = [];\r\n    currentArcadeSession.completedPlayers = [];\r\n    currentArcadeSession.podiumRanks = {};\r\n    currentArcadeSession.isInitialized = false;\r\n    currentArcadeSession.startTime = null;  // Will be set when game becomes active\r\n    currentArcadeSession.endTime = null;\r\n    currentArcadeSession.winnerScreenShown = false;\r\n    \r\n    // Set up event listeners for progress updates and status checks\r\n    window.arcadeChannel.on('broadcast', { event: 'progress_update' }, ({ payload }) => {\r\n        if (payload && payload.username) {\r\n            // Safe update to prevent accidental progress resets\r\n            const playerIndex = currentArcadeSession.participants.findIndex(p => p.username === payload.username);\r\n            \r\n            if (playerIndex !== -1) {\r\n                const player = currentArcadeSession.participants[playerIndex];\r\n                const currentProgress = player.wordsCompleted || 0;\r\n                \r\n                // Only allow progress to increase, never decrease (prevents accidental resets)\r\n                if (payload.wordsCompleted !== undefined && payload.wordsCompleted < currentProgress) {\r\n                    console.warn(`Prevented progress reset for ${payload.username}: ${currentProgress} → ${payload.wordsCompleted}`);\r\n                    payload.wordsCompleted = currentProgress; // Keep current progress\r\n                }\r\n                \r\n                // Update player data\r\n                currentArcadeSession.participants[playerIndex] = {\r\n                    ...player,\r\n                    ...payload\r\n                };\r\n            } else {\r\n                // New player\r\n                currentArcadeSession.participants.push({\r\n                    username: payload.username,\r\n                    wordsCompleted: payload.wordsCompleted || 0,\r\n                    coins: payload.coins || 0\r\n                });\r\n            }\r\n            updatePlayerRankDisplay();\r\n            updatePlayerProgress(payload);\r\n            checkGameEnd();\r\n        }\r\n    }).on('broadcast', { event: 'check_game_status' }, async ({ payload }) => {\r\n        console.log('Received game status check:', payload);\r\n        \r\n        // Respond with current game state\r\n        await window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'game_state_response',\r\n            payload: {\r\n                state: currentArcadeSession.state,\r\n                wordPool: currentArcadeSession.wordPool,\r\n                wordGoal: currentArcadeSession.wordGoal,\r\n                requestType: payload?.requestType || 'standard'\r\n            }\r\n        });\r\n        \r\n        // Handle late joining players\r\n        if (payload?.requestType === 'lateJoin' && \r\n            currentArcadeSession.state === 'active' && \r\n            payload.username && \r\n            !currentArcadeSession.participants.find(p => p.username === payload.username)) {\r\n            \r\n            currentArcadeSession.participants.push({\r\n                username: payload.username,\r\n                wordsCompleted: 0,\r\n                coins: 0,\r\n                lateJoin: true\r\n            });\r\n            \r\n            const participantCountElement = document.getElementById('activeParticipantCount');\r\n            if (participantCountElement) {\r\n                participantCountElement.textContent = currentArcadeSession.participants.length;\r\n            }\r\n            \r\n            updateAllPlayersProgress();\r\n        }\r\n    }).on('broadcast', { event: 'player_completed' }, ({ payload }) => {\r\n        console.log('Player completed event:', payload);\r\n        \r\n        // Only add to completed players if not already there\r\n        if (payload.username && !currentArcadeSession.completedPlayers.includes(payload.username)) {\r\n            currentArcadeSession.completedPlayers.push(payload.username);\r\n            \r\n            // Store rank information if provided\r\n            if (payload.rank && payload.rank <= 3) {\r\n                currentArcadeSession.podiumRanks[payload.username] = {\r\n                    rank: payload.rank,\r\n                    completionTime: payload.timestamp || Date.now()\r\n                };\r\n            }\r\n            \r\n            updatePlayerProgress(payload);\r\n            \r\n            // End game if 3 players have completed\r\n            if (currentArcadeSession.completedPlayers.length >= 3) {\r\n                endArcadeForAll();\r\n            }\r\n        }\r\n    });\r\n    \r\n    // Hide modal and show moderator screen\r\n    const arcadeModal = document.getElementById('arcade-modal');\r\n    if (arcadeModal) arcadeModal.style.display = 'none';\r\n    \r\n    showModeratorScreen();\r\n    \r\n    // Special handling for teachers\r\n    if (currentUser?.id === currentArcadeSession.teacherId) {\r\n        const idleDetection = initializeModeratorIdleDetection();\r\n        currentArcadeSession.idleDetection = idleDetection;\r\n    }\r\n}\r\n\r\nfunction generateWordPool(stages) {\r\n    let pool = [];\r\n    \r\n    stages.forEach(stage => {\r\n        Object.keys(vocabularySets).forEach(key => {\r\n            if (key.startsWith(`${stage}_`)) {\r\n                const set = vocabularySets[key];\r\n                set.words.forEach((word, index) => {\r\n                    pool.push({\r\n                        word: word,\r\n                        translation: set.translations[index]\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    });\r\n    \r\n    return pool.sort(() => Math.random() - 0.5);\r\n}\r\n\r\nfunction cleanupModeratorScreen() {\r\n    const moderatorScreen = document.getElementById('moderator-screen');\r\n    if (moderatorScreen && moderatorScreen.dataset.channelSubscription) {\r\n        supabaseClient.removeChannel(moderatorScreen.dataset.channelSubscription);\r\n        delete moderatorScreen.dataset.channelSubscription;\r\n    }\r\n}\r\n\r\nfunction startArcadeGame() {\r\n  const waitingScreen = document.getElementById('waiting-screen');\r\n  if (waitingScreen && waitingScreen.dataset.pollInterval) {\r\n    clearInterval(parseInt(waitingScreen.dataset.pollInterval));\r\n    delete waitingScreen.dataset.pollInterval;\r\n  }\r\n  document.getElementById('question-screen').classList.add('visible');\r\n  document.getElementById('waiting-screen').classList.remove('visible');\r\n\r\n  const playerName = currentArcadeSession.playerName || currentUser?.user_metadata?.username || getRandomSimploName();\r\n  \r\n  updatePlayerRankDisplay();\r\n  \r\n  document.querySelectorAll('.coin-count').forEach(el => {\r\n    el.textContent = \"0\";\r\n    el.style.display = \"flex\";\r\n  });\r\n  \r\n  document.querySelectorAll('.coins-container').forEach(el => {\r\n    el.style.display = \"flex\";\r\n  });\r\n  \r\n  const perksContainer = document.querySelector('.perks-container');\r\n  const powerupsContainer = document.querySelector('.powerups-container');\r\n  perksContainer.style.display = 'none';\r\n  powerupsContainer.style.display = 'flex';\r\n  \r\n  let initialCoins = 0;\r\n  if (currentUser && currentUser.status === 'premium') {\r\n    try {\r\n      const { data, error } = supabaseClient.from('game_progress').select('coins').eq('user_id', currentUser.id).single();\r\n      if (!error && data) {\r\n        initialCoins = data.coins;\r\n        console.log(\"Loaded initial coins:\", initialCoins);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to load coins:\", err);\r\n    }\r\n  } else {\r\n    initialCoins = parseInt(localStorage.getItem(\"simploxCustomCoins\") || \"0\");\r\n  }\r\n  \r\n  currentGame.coins = initialCoins;\r\n  currentArcadeSession.initialCoins = initialCoins;\r\n  \r\n  document.querySelectorAll('.coin-count').forEach(el => {\r\n    el.textContent = initialCoins.toString();\r\n  });\r\n  \r\n  try {\r\n    window.arcadeChannel.send({\r\n      type: 'broadcast',\r\n      event: 'progress_update',\r\n      payload: {\r\n        username: playerName,\r\n        wordsCompleted: 0,\r\n        coins: initialCoins,\r\n        timestamp: Date.now()\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('Failed to send initial progress update:', err);\r\n  }\r\n  \r\n  // Request a complete list of participants for synchronization\r\n  window.arcadeChannel.send({\r\n    type: 'broadcast',\r\n    event: 'sync_request',\r\n    payload: {\r\n      username: playerName,\r\n      timestamp: Date.now()\r\n    }\r\n  });\r\n  \r\n  updatePlayerRankDisplay();\r\n  \r\n  currentArcadeSession.startTime = Date.now();\r\n  \r\n  currentGame = {\r\n    currentIndex: 0,\r\n    correctStreak: 0,\r\n    wrongStreak: 0,\r\n    words: currentArcadeSession.wordPool || [],\r\n    wordsCompleted: 0,\r\n    coins: initialCoins,\r\n    lastBroadcast: Date.now(),\r\n    initialCoinsLoaded: true,\r\n    playerUsername: playerName\r\n  };\r\n  \r\n  if (!currentGame.words || currentGame.words.length === 0) {\r\n    if (!(currentArcadeSession.wordPool && currentArcadeSession.wordPool.length > 0)) {\r\n      showErrorToast(\"Failed to join game: No words available\");\r\n      showScreen('welcome-screen');\r\n      return;\r\n    }\r\n    currentGame.words = currentArcadeSession.wordPool;\r\n  }\r\n  \r\n  // Initialize powerups\r\n  initializePowerups();\r\n  \r\n  // Set up leaderboard channel and broadcast handlers\r\n  const leaderboardChannel = supabaseClient.channel('arcade_leaderboard')\r\n    .on('postgres_changes', {\r\n      event: '*',\r\n      schema: 'public',\r\n      table: 'arcade_participants'\r\n    }, (payload) => {\r\n      console.log('Direct DB Change:', payload);\r\n      updateAllPlayersProgress();\r\n    })\r\n    .subscribe();\r\n  \r\n  currentArcadeSession.leaderboardChannel = leaderboardChannel;\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'player_initialized'}, (({payload: data}) => {\r\n    console.log('Player Initialization Received:', data);\r\n    const index = currentArcadeSession.participants.findIndex(p => p.username === data.username);\r\n    const participantData = {\r\n      username: data.username,\r\n      wordsCompleted: 0,\r\n      coins: data.initialCoins || 0,\r\n      lateJoin: data.lateJoin || false\r\n    };\r\n    \r\n    if (index === -1) {\r\n      currentArcadeSession.participants.push(participantData);\r\n    } else {\r\n      currentArcadeSession.participants[index] = participantData;\r\n    }\r\n    \r\n    updateAllPlayersProgress();\r\n    updateArcadeProgress();\r\n  }));\r\n  \r\n  window.arcadeChannel.on(\"broadcast\", {event: \"progress_update\"}, (({payload: e}) => {\r\n  console.log(\"Progress update received:\", e);\r\n  \r\n  // Don't process our own updates\r\n  if (e.username !== currentArcadeSession.playerName) {\r\n    const playerIndex = currentArcadeSession.participants.findIndex(p => p.username === e.username);\r\n    \r\n    if (playerIndex !== -1) {\r\n      // Existing player - make sure we don't reduce their wordsCompleted\r\n      const existingPlayer = currentArcadeSession.participants[playerIndex];\r\n      const currentWords = existingPlayer.wordsCompleted || 0;\r\n      const newWords = e.wordsCompleted || 0;\r\n      \r\n      currentArcadeSession.participants[playerIndex] = {\r\n        ...existingPlayer,\r\n        ...e,\r\n        // Ensure we don't downgrade progress\r\n        wordsCompleted: Math.max(currentWords, newWords)\r\n      };\r\n    } else {\r\n      // New player - add to participants list\r\n      currentArcadeSession.participants.push({\r\n        username: e.username,\r\n        wordsCompleted: e.wordsCompleted || 0,\r\n        coins: e.coins || 0,\r\n        lateJoin: e.lateJoin || false\r\n      });\r\n    }\r\n    \r\n    updatePlayerProgress({\r\n      username: e.username,\r\n      wordsCompleted: e.wordsCompleted,\r\n      coins: e.coins\r\n    });\r\n  }\r\n  \r\n  updatePlayerRankDisplay();\r\n}));\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'sync_request'}, (({payload: data}) => {\r\n    // Anyone who's already playing responds with the current participants list\r\n    if (currentGame && currentGame.wordsCompleted > 0) {\r\n      window.arcadeChannel.send({\r\n        type: 'broadcast',\r\n        event: 'sync_response',\r\n        payload: {\r\n          participants: currentArcadeSession.participants,\r\n          respondingPlayer: currentArcadeSession.playerName,\r\n          requestingPlayer: data.username,\r\n          timestamp: Date.now()\r\n        }\r\n      });\r\n    }\r\n  }));\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'sync_response'}, (({payload: data}) => {\r\n    // Only update if this response is for our request\r\n    if (data.requestingPlayer === currentArcadeSession.playerName) {\r\n      // Merge participants data from response with our local data\r\n      if (Array.isArray(data.participants)) {\r\n        data.participants.forEach(participant => {\r\n          const existingIndex = currentArcadeSession.participants.findIndex(\r\n            p => p.username === participant.username\r\n          );\r\n          \r\n          if (existingIndex === -1) {\r\n            // Add participants we didn't know about\r\n            currentArcadeSession.participants.push(participant);\r\n          } else {\r\n            // Update participants we already know about\r\n            // Only accept higher values to prevent desyncs\r\n            const existing = currentArcadeSession.participants[existingIndex];\r\n            currentArcadeSession.participants[existingIndex] = {\r\n              ...existing,\r\n              wordsCompleted: Math.max(existing.wordsCompleted || 0, participant.wordsCompleted || 0),\r\n              coins: Math.max(existing.coins || 0, participant.coins || 0)\r\n            };\r\n          }\r\n        });\r\n        \r\n        // Update rank display with merged data\r\n        updatePlayerRankDisplay();\r\n      }\r\n    }\r\n  }));\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'player_completed'}, (({payload: data}) => {\r\n    console.log('Player completed event:', data);\r\n    if (!currentArcadeSession.completedPlayers.includes(data.username)) {\r\n      currentArcadeSession.completedPlayers.push(data.username);\r\n    }\r\n    updatePlayerProgress(data);\r\n    if (currentArcadeSession.completedPlayers.length >= 3) {\r\n      endArcadeForAll();\r\n    }\r\n  }));\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'powerup_effect'}, (({payload: data}) => {\r\n    if (data.targetUser === currentArcadeSession.playerName) {\r\n      const powerup = data.powerup;\r\n      showNotification(`${data.fromUser} ${powerup.message} you!`, powerup.type);\r\n      \r\n      switch(powerup.name) {\r\n        case 'High Five':\r\n        case 'Fist Bump':\r\n          const oldCoins = currentGame.coins;\r\n          currentGame.coins += powerup.effect;\r\n          document.querySelectorAll('.coin-count').forEach(el => {\r\n            animateNumber(el, oldCoins, currentGame.coins);\r\n          });\r\n          break;\r\n        case 'Energy Boost':\r\n          currentGame.coinMultiplier = 2;\r\n          currentGame.boostedAnswersLeft = 3;\r\n          break;\r\n        case 'Freeze':\r\n          const buttons = document.querySelectorAll('.buttons button');\r\n          buttons.forEach(btn => btn.disabled = true);\r\n          setTimeout(() => {\r\n            buttons.forEach(btn => btn.disabled = false);\r\n          }, powerup.duration);\r\n          break;\r\n        case 'Coin Storm':\r\n          currentGame.coinBlockedAnswers = 3;\r\n          break;\r\n        case 'Screen Shake':\r\n          const questionScreen = document.getElementById('question-screen');\r\n          questionScreen.classList.add('screen-shake');\r\n          setTimeout(() => {\r\n            questionScreen.classList.remove('screen-shake');\r\n          }, powerup.duration);\r\n          break;\r\n      }\r\n      \r\n      updatePlayerProgress({\r\n        username: currentArcadeSession.playerName,\r\n        coins: currentGame.coins,\r\n        wordsCompleted: currentGame.wordsCompleted\r\n      });\r\n    }\r\n  }));\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'coin_effect'}, (({payload: data}) => {\r\n    if (data.targetUser === currentArcadeSession.playerName) {\r\n      const oldCoins = currentGame.coins;\r\n      currentGame.coins += data.amount;\r\n      \r\n      document.querySelectorAll('.coin-count').forEach(el => {\r\n        animateNumber(el, oldCoins, currentGame.coins);\r\n      });\r\n      \r\n      const index = currentArcadeSession.participants.findIndex(p => \r\n        p.username === currentArcadeSession.playerName\r\n      );\r\n      \r\n      if (index !== -1) {\r\n        currentArcadeSession.participants[index].coins = currentGame.coins;\r\n        updateModeratorLeaderboard();\r\n      }\r\n      \r\n      if (data.type === 'blessing') {\r\n        showNotification(`${data.fromUser} high-fived you!`, 'blessing');\r\n      } else if (data.type === 'curse') {\r\n        showNotification(`${data.fromUser} poisoned you!`, 'curse');\r\n      }\r\n      \r\n      updatePlayerProgress({\r\n        username: currentArcadeSession.playerName,\r\n        coins: currentGame.coins,\r\n        wordsCompleted: currentGame.wordsCompleted\r\n      });\r\n    }\r\n  }));\r\n  \r\n  window.arcadeChannel.on('broadcast', {event: 'game_end'}, (({payload: data}) => {\r\n    handleGameEnd(data);\r\n  }));\r\n  \r\n  updateAllCoinDisplays();\r\n  loadNextArcadeQuestion();\r\n  \r\n  // Store timeouts and intervals for cleanup\r\n  window.arcadeTimeouts = [];\r\n  window.arcadeIntervals = [];\r\n}\r\n\r\nasync function updateArcadeCoins(amount) {\r\n    const oldCoins = currentGame.coins;\r\n    currentGame.coins += amount;\r\n\r\n    // For registered users, update their game_progress\r\n    if (currentUser) {\r\n        try {\r\n            const { error } = await supabaseClient\r\n                .from('game_progress')\r\n                .update({ coins: currentGame.coins })\r\n                .eq('user_id', currentUser.id);\r\n\r\n            if (error) throw error;\r\n        } catch (error) {\r\n            console.error('Failed to update coins in database:', error);\r\n            currentGame.coins = oldCoins; // Rollback on error\r\n        }\r\n    }\r\n\r\n// Check if this is a new player joining an active game\r\nconst isNewPlayerJoining = currentArcadeSession.participants.some(p => \r\n  p.wordsCompleted > 0 && p.username !== currentArcadeSession.playerName);\r\n\r\n// Only send a progress_update with wordsCompleted: 0 if this is truly a new session\r\n// or we're the first player\r\nif (!isNewPlayerJoining) {\r\n  try {\r\n    window.arcadeChannel.send({\r\n      type: \"broadcast\",\r\n      event: \"progress_update\",\r\n      payload: {\r\n        username: currentArcadeSession.playerName,\r\n        wordsCompleted: 0,\r\n        coins: currentGame.coins || 0,\r\n        timestamp: Date.now(),\r\n        lateJoin: isNewPlayerJoining\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Failed to send initial progress update:\", err);\r\n  }\r\n}\r\n\r\n// Additional special sync request for new joining players\r\nif (isNewPlayerJoining) {\r\n  try {\r\n    window.arcadeChannel.send({\r\n      type: \"broadcast\",\r\n      event: \"sync_request\",\r\n      payload: {\r\n        username: currentArcadeSession.playerName,\r\n        requestType: \"newPlayerJoin\",\r\n        timestamp: Date.now()\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Failed to send sync request:\", err);\r\n  }\r\n}\r\n\r\n    // Update displays with animation\r\n    const displays = document.querySelectorAll('.coin-count');\r\n    displays.forEach(display => {\r\n        animateCoinsChange(display, oldCoins, currentGame.coins);\r\n    });\r\n\r\n    return currentGame.coins;\r\n}\r\n\r\nasync function getCurrentCoinsForArcade() {\r\n    if (!currentUser) {\r\n        // For guest users, use localStorage or default\r\n        return parseInt(localStorage.getItem('simploxCustomCoins') || '0');\r\n    }\r\n\r\n    // For logged-in users, especially premium\r\n    try {\r\n        const { data, error } = await supabaseClient\r\n            .from('game_progress')\r\n            .select('coins')\r\n            .eq('user_id', currentUser.id)\r\n            .single();\r\n\r\n        if (error) console.error('Coin retrieval error:', error);\r\n        return data?.coins || 0;\r\n    } catch (error) {\r\n        console.error('Unexpected coin retrieval error:', error);\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction loadNextArcadeQuestion() {\r\n    if (!currentGame.words.length) return;\r\n    \r\n    const questionWord = document.getElementById('question-word');\r\n    const buttonsDiv = document.getElementById('buttons');\r\n    \r\n    // Get random word from pool\r\n    const currentIndex = Math.floor(Math.random() * currentGame.words.length);\r\n    const currentWord = currentGame.words[currentIndex];\r\n    \r\n    // 50% chance for Hebrew to English\r\n    const isHebrewToEnglish = Math.random() < 0.5;\r\n    \r\n    questionWord.textContent = isHebrewToEnglish ? \r\n        currentWord.translation : currentWord.word;\r\n    \r\n    // Generate options\r\n    let options = [isHebrewToEnglish ? currentWord.word : currentWord.translation];\r\n    while (options.length < 3) {\r\n        const randomWord = currentGame.words[Math.floor(Math.random() * currentGame.words.length)];\r\n        const option = isHebrewToEnglish ? randomWord.word : randomWord.translation;\r\n        if (!options.includes(option)) {\r\n            options.push(option);\r\n        }\r\n    }\r\n    \r\n    // Shuffle options\r\n    options = options.sort(() => Math.random() - 0.5);\r\n    \r\n    // Create buttons\r\n    buttonsDiv.innerHTML = '';\r\n    options.forEach(option => {\r\n        const button = document.createElement('button');\r\n        button.textContent = option;\r\n        button.onclick = () => handleArcadeAnswer(\r\n            option === (isHebrewToEnglish ? currentWord.word : currentWord.translation)\r\n        );\r\n        buttonsDiv.appendChild(button);\r\n    });\r\n    \r\n    // Remove used word from pool\r\n    currentGame.words.splice(currentIndex, 1);\r\n}\r\n\r\n\r\nfunction updateArcadeProgress() {\r\n    const circle = document.querySelector('.progress-circle .progress');\r\n    const radius = 54;\r\n    const circumference = 2 * Math.PI * radius;\r\n    \r\n    // Default to 0 for initial state\r\n    const progress = currentGame.wordsCompleted \r\n        ? currentGame.wordsCompleted / currentArcadeSession.wordGoal \r\n        : 0;\r\n    \r\n    circle.style.strokeDasharray = `${circumference} ${circumference}`;\r\n    circle.style.strokeDashoffset = circumference * (1 - progress);\r\n}\r\n\r\nfunction showArcadeCompletionScreen(playerData) {\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'arcade-completion-modal';\r\n    overlay.innerHTML = `\r\n        <div class=\"completion-modal-content\">\r\n            <h2>Arcade Complete!</h2>\r\n            <div class=\"completion-stats\">\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-book\"></i>\r\n                    <span>Words: ${playerData.wordsCompleted}</span>\r\n                </div>\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-coins\"></i>\r\n                    <span>Coins: ${playerData.coins}</span>\r\n                </div>\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-trophy\"></i>\r\n                    <span>Rank: ${playerData.rank}</span>\r\n                </div>\r\n            </div>\r\n            <button onclick=\"exitArcade()\" class=\"start-button\">Exit</button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    requestAnimationFrame(() => overlay.classList.add('show'));\r\n}\r\n\r\nfunction exitArcadeCompletion() {\r\n    const modal = document.querySelector('.arcade-completion-modal');\r\n    if (modal) {\r\n        modal.classList.remove('show');\r\n        setTimeout(() => {\r\n            modal.remove();\r\n            showScreen('welcome-screen');\r\n        }, 300);\r\n    }\r\n}\r\n\r\nfunction exitArcade() {\r\n    // Clean up\r\n    if (window.arcadeChannel) {\r\n        window.arcadeChannel.unsubscribe();\r\n    }\r\n    currentArcadeSession = {\r\n        eventId: null,\r\n        otp: null,\r\n        wordPool: [],\r\n        participants: [],\r\n        teacherId: null,\r\n        wordGoal: 50\r\n    };\r\n    \r\n    // Return to welcome screen\r\n    showScreen('welcome-screen');\r\n    document.querySelector('.completion-overlay')?.remove();\r\n}\r\n\r\nfunction handleAnswer(isCorrect, skipMode = false) {\r\n  const now = Date.now();\r\n  if (now - (currentGame.lastAnswerTime || 0) < 1000) {\r\n    console.warn(\"Answer too quickly. Please wait a moment.\");\r\n    return;\r\n  }\r\n  \r\n  if (!currentGame || !currentGame.words || currentGame.words.length === 0 || currentGame.currentIndex >= currentGame.words.length) {\r\n    console.error(\"Invalid game state or index\");\r\n    return;\r\n  }\r\n  \r\n  currentGame.lastAnswerTime = now;\r\n  currentGame.perks = currentGame.perks || { clue: 0, skip: 0, timeFreeze: 0, reveal: 0 };\r\n  \r\n  try {\r\n    if (isCorrect) {\r\n      currentGame.currentIndex++;\r\n      \r\n      if (currentGame.isBossLevel) {\r\n        const bossOrb = document.querySelector(\".boss-orb-inner\");\r\n        if (bossOrb) {\r\n          const colors = [\"yellow\", \"purple\", \"turquoise\", \"darkgreen\", \"brown\"];\r\n          const randomColor = colors[Math.floor(Math.random() * colors.length)];\r\n          const originalBackground = bossOrb.style.background;\r\n          bossOrb.style.background = `radial-gradient(circle at 30% 30%, ${randomColor}, #990000)`;\r\n          bossOrb.style.transform = \"scale(1.3)\";\r\n          bossOrb.style.filter = \"brightness(1.5)\";\r\n          setTimeout(() => {\r\n            bossOrb.style.transform = \"\";\r\n            bossOrb.style.filter = \"\";\r\n            bossOrb.style.background = originalBackground;\r\n          }, 300);\r\n        }\r\n        \r\n        // Check if this was the final boss hit\r\n        if (currentGame.currentIndex >= currentGame.words.length) {\r\n          console.log(\"Boss defeated - final hit!\");\r\n          currentGame.bossDefeated = true; // Mark boss as defeated\r\n          clearTimer(); // Clear the timer\r\n          \r\n          // Force health bar to zero\r\n          const progressCircle = document.querySelector('.progress-circle');\r\n          if (progressCircle) {\r\n            const progress = progressCircle.querySelector('.progress');\r\n            if (progress) {\r\n              const circumference = 2 * Math.PI * 54;\r\n              progress.style.strokeDashoffset = circumference; // Set to full circumference (empty)\r\n            }\r\n          }\r\n          \r\n          // Direct call to defeat sequence with forced update\r\n          showBossDefeatEffect();\r\n          CoinsManager.updateCoins(100).then(() => {\r\n            updateAllCoinDisplays(); // Update coin display explicitly\r\n          });\r\n          \r\n          return; // Exit function early\r\n        }\r\n        \r\n        // Otherwise just update the health bar\r\n        updateBossHealthBar();\r\n      } else {\r\n        updateProgressCircle();\r\n      }\r\n      \r\n      if (!skipMode) {\r\n        let coinsEarned = 0;\r\n        const timeBonus = awardTimeBonus();\r\n        if (timeBonus > 0) {\r\n          coinsEarned += timeBonus;\r\n          pulseCoins(timeBonus);\r\n        }\r\n        \r\n        if (currentGame.firstAttempt) {\r\n          coinsEarned += 3;\r\n          pulseCoins(3);\r\n        } else {\r\n          coinsEarned += 1;\r\n          pulseCoins(1);\r\n        }\r\n        \r\n        CoinsManager.updateCoins(coinsEarned).then(() => {\r\n          updatePerkButtons();\r\n          updateAllCoinDisplays(); // Added to ensure coin display updates\r\n        }).catch(err => {\r\n          console.error(\"Error updating total coins:\", err);\r\n        });\r\n        \r\n        currentGame.correctAnswers++;\r\n        \r\n        // Track word for any registered user without status check\r\n        if (currentUser) {\r\n          const wordIndex = currentGame.currentIndex - 1;\r\n          const word = currentGame.isHebrewToEnglish ? \r\n            currentGame.words[wordIndex] : \r\n            currentGame.translations[wordIndex];\r\n          \r\n          const gameMode = currentGame.isCustomPractice ? 'custom' : \r\n                           currentGame.isArcadeMode ? 'arcade' : 'story';\r\n          \r\n          // Call trackWordEncounter without status check\r\n          trackWordEncounter(word, gameMode);\r\n        }\r\n      }\r\n    } else {\r\n      currentGame.firstAttempt = false;\r\n      currentGame.streakBonus = false;\r\n      currentGame.wrongStreak++;\r\n      \r\n      CoinsManager.updateCoins(-3).then(() => {\r\n        updatePerkButtons();\r\n        updateAllCoinDisplays(); // Added to ensure coin display updates\r\n      }).catch(err => {\r\n        console.error(\"Error updating coins:\", err);\r\n      });\r\n      \r\n      if (currentGame.currentIndex > 0) {\r\n        currentGame.progressLost++;\r\n        currentGame.currentIndex = Math.max(0, currentGame.currentIndex - 1);\r\n        if (currentGame.isBossLevel) {\r\n          updateBossHealthBar();\r\n        }\r\n      }\r\n      \r\n      if (currentGame.wrongStreak >= 3) {\r\n        showGameOverOverlay();\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // Clear previous visual indicators from all buttons\r\n    const allButtons = document.querySelectorAll(\".buttons button\");\r\n    \r\n    // Get current question's correct answer\r\n    const currentCorrectAnswer = currentGame.isHebrewToEnglish\r\n      ? currentGame.words[Math.max(0, currentGame.currentIndex - 1)]\r\n      : currentGame.translations[Math.max(0, currentGame.currentIndex - 1)];\r\n      \r\n    // Highlight current answer status (right or wrong)\r\n    allButtons.forEach((button) => {\r\n      if (button.textContent === currentCorrectAnswer) {\r\n        button.classList.add(\"correct\");\r\n      } else if (!isCorrect && event && event.target && button.textContent === event.target.textContent) {\r\n        button.classList.add(\"wrong\");\r\n      }\r\n    });\r\n    \r\n    saveProgress();\r\n    \r\n    // Use a promise to ensure proper timing and button state clearance\r\n    const transitionDelay = 500; // ms\r\n    \r\n    setTimeout(() => {\r\n      // Clear all button classes before loading next question\r\n      allButtons.forEach(btn => {\r\n        btn.classList.remove(\"correct\", \"wrong\");\r\n      });\r\n      \r\n      // Check if game is still valid (not a defeated boss)\r\n      if (currentGame && (!currentGame.bossDefeated || !currentGame.isBossLevel)) {\r\n        if (currentGame.currentIndex < currentGame.words.length) {\r\n          startTimer(currentGame.words.length - currentGame.currentIndex);\r\n          \r\n          if (currentGame.isBossLevel) {\r\n            loadNextBossQuestion();\r\n          } else {\r\n            loadNextQuestion();\r\n          }\r\n          \r\n          updatePerkButtons();\r\n        } else if (!currentGame.isBossLevel) {\r\n          if (currentGame.isCustomPractice) {\r\n            handleCustomLevelCompletion();\r\n          } else {\r\n            handleLevelCompletion();\r\n          }\r\n        }\r\n      }\r\n    }, transitionDelay);\r\n    \r\n  } catch (err) {\r\n    console.error(\"Unexpected error in handleAnswer:\", err);\r\n    console.error(\"Error details:\", err.stack);\r\n    \r\n    try {\r\n      if (currentGame && currentGame.currentIndex < currentGame.words.length && !currentGame.bossDefeated) {\r\n        loadNextQuestion();\r\n      } else {\r\n        showScreen(\"welcome-screen\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to recover from error:\", err);\r\n      showScreen(\"welcome-screen\");\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleArcadeAnswer(isCorrect) {\r\n  const now = Date.now();\r\n  if (now - (currentGame.lastAnswerTime || 0) < 1000) {\r\n    return; // Prevent rapid consecutive answers\r\n  }\r\n  \r\n  currentGame.lastAnswerTime = now;\r\n  \r\n  const playerName = currentArcadeSession.playerName || currentUser?.user_metadata?.username || getRandomSimploName();\r\n  \r\n  if (isCorrect) {\r\n    // Increment word count and update streak\r\n    currentGame.wordsCompleted++;\r\n    currentGame.correctStreak++;\r\n    currentGame.wrongStreak = 0;\r\n    \r\n    // Update the player's coins if needed (game logic for coins)\r\n    if (currentUser) {\r\n      // If logged in user, update according to your business logic\r\n    } else {\r\n      // For guest/arcade users, add simple coin reward\r\n      let coinReward = 5;\r\n      if (currentGame.correctStreak >= 3) {\r\n        coinReward += 5;\r\n      }\r\n      \r\n      const oldCoins = currentGame.coins;\r\n      currentGame.coins += coinReward;\r\n      \r\n      document.querySelectorAll('.coin-count').forEach(el => {\r\n        animateCoinsChange(el, oldCoins, currentGame.coins);\r\n      });\r\n      \r\n      updateArcadePowerups();\r\n    }\r\n    \r\n    // Make sure we update our local participant entry first\r\n    const myIndex = currentArcadeSession.participants.findIndex(\r\n      p => p.username === playerName\r\n    );\r\n    \r\n    if (myIndex !== -1) {\r\n      currentArcadeSession.participants[myIndex].wordsCompleted = currentGame.wordsCompleted;\r\n      currentArcadeSession.participants[myIndex].coins = currentGame.coins;\r\n    } else {\r\n      currentArcadeSession.participants.push({\r\n        username: playerName,\r\n        wordsCompleted: currentGame.wordsCompleted,\r\n        coins: currentGame.coins\r\n      });\r\n    }\r\n    \r\n    // Update our rank display before sending updates\r\n    updatePlayerRankDisplay();\r\n    \r\n    // Send the update to all other players\r\n    try {\r\n      window.arcadeChannel.send({\r\n        type: 'broadcast',\r\n        event: 'progress_update',\r\n        payload: {\r\n          username: playerName,\r\n          wordsCompleted: currentGame.wordsCompleted,\r\n          coins: currentGame.coins,\r\n          timestamp: Date.now()\r\n        }\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error sending progress update:\", err);\r\n    }\r\n    \r\n    // Update arcade progress display\r\n    updateArcadeProgress();\r\n    \r\n    // Check if player has completed the word goal\r\n    if (currentGame.wordsCompleted >= currentArcadeSession.wordGoal) {\r\n      handlePlayerCompletedGoal(playerName);\r\n    }\r\n  } else {\r\n    // Handle incorrect answer\r\n    currentGame.correctStreak = 0;\r\n    currentGame.wrongStreak++;\r\n    \r\n    // Optionally add logic for penalties on wrong answers\r\n  }\r\n  \r\n  // Final rank update after all processing\r\n  updatePlayerRankDisplay();\r\n  \r\n  // Load the next question\r\n  loadNextArcadeQuestion();\r\n}\r\n\r\nfunction checkGameEnd() {\r\n    const completedPlayers = currentArcadeSession.participants\r\n        .filter(p => p.wordsCompleted >= currentArcadeSession.wordGoal)\r\n        .length;\r\n        \r\n    if (completedPlayers >= 3) {\r\n        window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'game_end'\r\n        });\r\n    }\r\n}\r\n\r\nfunction handleGameEnd(payload) {\r\n  console.log(\"Game End Payload:\", payload);\r\n  if (!payload) return;\r\n  \r\n  if (payload.forcedEnd) {\r\n    exitArcade(); // Ensure we clean up\r\n    showScreen(\"welcome-screen\");\r\n  } else if (currentUser?.id !== payload.teacherId) {\r\n    showFinalResultsForPlayer(payload.podiumPlayers || []);\r\n  } else {\r\n    showModeratorVictoryScreen(payload.podiumPlayers || []);\r\n  }\r\n}\r\n\r\nfunction showPodiumPlayerResults(players) {\r\n    const playerUsername = currentArcadeSession.playerName;\r\n    const playerRank = currentArcadeSession.podiumRanks[playerUsername].rank;\r\n    \r\n    // Calculate earned coins\r\n    const startingCoins = currentArcadeSession.initialCoins || 0;\r\n    const currentCoins = gameState.coins || currentGame.coins || 0;\r\n    const coinsEarned = currentCoins - startingCoins;\r\n    \r\n    // Get player's words completed\r\n    const wordsCompleted = currentGame.wordsCompleted || 0;\r\n    \r\n    // Create results modal for podium player\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'arcade-completion-modal';\r\n    \r\n    overlay.innerHTML = `\r\n        <div class=\"completion-modal-content\">\r\n            <h2>Congratulations!</h2>\r\n            <p class=\"personal-result\">You finished in ${getOrdinal(playerRank)} place!</p>\r\n            \r\n            <div class=\"your-stats\">\r\n                <h3>Your Results</h3>\r\n                <div class=\"completion-stats\" style=\"display: flex; justify-content: space-around; margin: 1.5rem 0;\">\r\n                    <div class=\"stat-item\" style=\"text-align: center;\">\r\n                        <i class=\"fas fa-language\" style=\"font-size: 2rem; color: var(--gold); display: block; margin-bottom: 0.5rem;\"></i>\r\n                        <span style=\"display: block; margin-bottom: 0.25rem;\">Words Learned</span>\r\n                        <strong style=\"font-size: 1.5rem;\">${wordsCompleted}</strong>\r\n                    </div>\r\n                    <div class=\"stat-item\" style=\"text-align: center;\">\r\n                        <i class=\"fas fa-coins\" style=\"font-size: 2rem; color: var(--gold); display: block; margin-bottom: 0.5rem;\"></i>\r\n                        <span style=\"display: block; margin-bottom: 0.25rem;\">Coins Earned</span>\r\n                        <strong style=\"font-size: 1.5rem;\">${coinsEarned}</strong>\r\n                    </div>\r\n                    <div class=\"stat-item\" style=\"text-align: center;\">\r\n                        <i class=\"fas fa-trophy\" style=\"font-size: 2rem; color: var(--gold); display: block; margin-bottom: 0.5rem;\"></i>\r\n                        <span style=\"display: block; margin-bottom: 0.25rem;\">Your Rank</span>\r\n                        <strong style=\"font-size: 1.5rem;\">${playerRank}</strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <button onclick=\"exitArcadeCompletion()\" class=\"start-button\">\r\n                Return to Welcome\r\n            </button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    requestAnimationFrame(() => overlay.classList.add('show'));\r\n}\r\n\r\nfunction showConsolationScreen() {\r\n    // Create a simple consolation modal\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'arcade-completion-modal';\r\n    \r\n    // Random encouraging emoji\r\n    const emojis = ['🌟', '🎮', '🚀', '💪', '🏆', '🔥', '👏', '✨'];\r\n    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\r\n    \r\n    overlay.innerHTML = `\r\n        <div class=\"completion-modal-content\">\r\n            <h2 style=\"font-size: 3rem; margin-bottom: 1rem;\">${randomEmoji}</h2>\r\n            <h2>Game Complete!</h2>\r\n            <p style=\"font-size: 1.2rem; margin: 1.5rem 0; line-height: 1.5;\">\r\n                Great effort! You did your best and gained valuable practice.\r\n                <br><br>\r\n                Keep playing to improve your skills and speed!\r\n            </p>\r\n            <button onclick=\"exitArcadeCompletion()\" class=\"start-button\" style=\"margin-top: 1.5rem;\">\r\n                Return to Welcome\r\n            </button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    requestAnimationFrame(() => overlay.classList.add('show'));\r\n}\r\n\r\n\r\nfunction showFinalResultsForPlayer(podiumPlayers) {\r\n    const playerName = currentArcadeSession.playerName;\r\n    const playerPodiumInfo = podiumPlayers.find(p => p.username === playerName);\r\n    \r\n    // If player is already on podium and has seen victory screen, don't show again\r\n    if (currentArcadeSession.winnerScreenShown && playerPodiumInfo && playerPodiumInfo.rank <= 3) {\r\n        return;\r\n    }\r\n    \r\n    // Find the player's rank (either from podium or calculate based on completion)\r\n    let playerRank;\r\n    if (playerPodiumInfo) {\r\n        playerRank = playerPodiumInfo.rank;\r\n    } else {\r\n        // For non-podium players, find their position in participants list\r\n        const sortedParticipants = [...currentArcadeSession.participants]\r\n            .sort((a, b) => b.wordsCompleted - a.wordsCompleted);\r\n        playerRank = sortedParticipants.findIndex(p => p.username === playerName) + 1;\r\n    }\r\n    \r\n    if (playerRank <= 3) {\r\n        showPersonalVictoryScreen(playerRank);\r\n    } else {\r\n        showConsolationScreen();\r\n    }\r\n}\r\n\r\nfunction showPersonalVictoryScreen(rank) {\r\n    if (currentArcadeSession.winnerScreenShown) return;\r\n    currentArcadeSession.winnerScreenShown = true;\r\n    \r\n    console.log(`Showing personal victory screen with rank: ${rank}`);\r\n    \r\n    // Create a personalized victory overlay\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'arcade-completion-modal';\r\n    \r\n    // Different messages based on rank\r\n    const rankMessages = {\r\n        1: {\r\n            title: \"🏆 FIRST PLACE! 🏆\",\r\n            message: \"Incredible! You've claimed the top spot!\",\r\n            color: \"var(--gold)\"\r\n        },\r\n        2: {\r\n            title: \"🥈 SECOND PLACE! 🥈\",\r\n            message: \"Amazing job! You've secured second place!\",\r\n            color: \"var(--silver)\"\r\n        },\r\n        3: {\r\n            title: \"🥉 THIRD PLACE! 🥉\",\r\n            message: \"Well done! You've earned third place!\",\r\n            color: \"var(--bronze)\"\r\n        }\r\n    };\r\n    \r\n    const message = rankMessages[rank] || {\r\n        title: \"Game Complete!\",\r\n        message: \"You've reached the word goal!\",\r\n        color: \"var(--accent)\"\r\n    };\r\n    \r\n    // Calculate coins earned during this arcade session\r\n    const startingCoins = currentArcadeSession.initialCoins || 0;\r\n    const currentCoins = gameState.coins || currentGame.coins || 0;\r\n    const coinsEarned = currentCoins - startingCoins;\r\n    \r\n    overlay.innerHTML = `\r\n        <div class=\"completion-modal-content\">\r\n            <h2 style=\"color: ${message.color}\">${message.title}</h2>\r\n            <p>${message.message}</p>\r\n            <div class=\"completion-stats\">\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-language\"></i>\r\n                    <span>Words Learned</span>\r\n                    <strong>${currentGame.wordsCompleted}</strong>\r\n                </div>\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-coins\"></i>\r\n                    <span>Coins Earned</span>\r\n                    <strong>${coinsEarned}</strong>\r\n                </div>\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-trophy\"></i>\r\n                    <span>Your Rank</span>\r\n                    <strong>${rank}</strong>\r\n                </div>\r\n            </div>\r\n            <button class=\"victory-button\" style=\"margin-top: 2rem;\" onclick=\"closePersonalVictory()\">\r\n            Continue\r\n        </button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(t);\r\n    setTimeout(() => {\r\n        t.style.opacity = \"1\";\r\n        startPlayerConfetti();\r\n    }, 100);\r\n}\r\n\r\nfunction showModeratorVictoryScreen(players) {\r\n    // Clean up any inactivity timers\r\n    if (moderatorActivityTimer) clearTimeout(moderatorActivityTimer);\r\n    if (countdownTimer) clearInterval(countdownTimer);\r\n    \r\n    // Hide inactivity overlay if present\r\n    const overlay = document.querySelector('.inactivity-overlay');\r\n    if (overlay) overlay.remove();\r\n    \r\n    // Use the confetti celebration instead\r\n    startLeaderboardCelebration(players);\r\n}\r\n\r\n\r\nfunction showPlayerFinalResults(players) {\r\n    // Find current player's data and rank\r\n    const playerUsername = currentArcadeSession.playerName;\r\n    const currentPlayer = players.find(p => p.username === playerUsername);\r\n    \r\n    // Get player's rank - should be explicitly set in the players array\r\n    const currentPlayerRank = currentPlayer?.rank || \r\n                            players.findIndex(p => p.username === playerUsername) + 1;\r\n    \r\n    // If we've already shown a victory screen for this player, don't show results\r\n    if (currentArcadeSession.winnerScreenShown && currentPlayerRank <= 3) {\r\n        return;\r\n    }\r\n    \r\n    // Create final results overlay\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'arcade-completion-modal';\r\n    \r\n    // Get the top 3 players\r\n    const top3 = players\r\n        .filter(p => p.rank <= 3)\r\n        .sort((a, b) => a.rank - b.rank);\r\n    \r\n    // Calculate coins earned during this arcade session\r\n    const startingCoins = currentArcadeSession.initialCoins || 0;\r\n    const currentCoins = gameState.coins || currentGame.coins || 0;\r\n    const coinsEarned = currentCoins - startingCoins;\r\n    \r\n    overlay.innerHTML = `\r\n        <div class=\"completion-modal-content\">\r\n            <h2>Arcade Game Complete!</h2>\r\n            ${currentPlayerRank <= 3 ? \r\n                `<p class=\"personal-result\">Congratulations! You finished in ${getOrdinal(currentPlayerRank)} place!</p>` : \r\n                `<p class=\"personal-result\">You earned ${getOrdinal(currentPlayerRank)} place. Better luck next time!</p>`\r\n            }\r\n            <div class=\"leaderboard-preview\">\r\n                <h3>Top Players</h3>\r\n                ${top3.map((player) => `\r\n                    <div class=\"podium-player rank-${player.rank} ${player.username === playerUsername ? 'current-player' : ''}\"\r\n                         style=\"display: flex; justify-content: space-between; padding: 0.75rem 1rem; margin: 0.5rem 0; \r\n                                background: ${getPlayerBackground(player.rank, player.username === playerUsername)};\r\n                                border-radius: 10px; color: ${player.rank === 1 ? '#000' : '#fff'};\">\r\n                        <div class=\"player-rank\">${player.rank}</div>\r\n                        <div class=\"player-name\">${player.username}</div>\r\n                        <div class=\"player-stats\">\r\n                            <span class=\"player-words\">${player.wordsCompleted || 0} words</span>\r\n                            <span class=\"player-coins\">${player.coins || 0} coins</span>\r\n                        </div>\r\n                    </div>\r\n                `).join('')}\r\n                \r\n                ${currentPlayerRank > 3 ? `\r\n                    <div class=\"divider\" style=\"border-top: 1px dashed rgba(255,255,255,0.2); margin: 1rem 0;\"></div>\r\n                    <div class=\"current-player-row podium-player\"\r\n                         style=\"display: flex; justify-content: space-between; padding: 0.75rem 1rem; margin: 0.5rem 0; \r\n                                background: rgba(255,255,255,0.1); border: 1px solid var(--accent);\r\n                                border-radius: 10px; color: var(--text);\">\r\n                        <div class=\"player-rank\">${currentPlayerRank}</div>\r\n                        <div class=\"player-name\">${playerUsername}</div>\r\n                        <div class=\"player-stats\">\r\n                            <span class=\"player-words\">${currentPlayer?.wordsCompleted || 0} words</span>\r\n                            <span class=\"player-coins\">${currentPlayer?.coins || 0} coins</span>\r\n                        </div>\r\n                    </div>\r\n                ` : ''}\r\n            </div>\r\n            <div class=\"your-stats\">\r\n                <h3>Your Results</h3>\r\n                <div class=\"completion-stats\" style=\"display: flex; justify-content: space-around; margin: 1.5rem 0;\">\r\n                    <div class=\"stat-item\" style=\"text-align: center;\">\r\n                        <i class=\"fas fa-language\" style=\"font-size: 2rem; color: var(--gold); display: block; margin-bottom: 0.5rem;\"></i>\r\n                        <span style=\"display: block; margin-bottom: 0.25rem;\">Words Learned</span>\r\n                        <strong style=\"font-size: 1.5rem;\">${currentPlayer?.wordsCompleted || 0}</strong>\r\n                    </div>\r\n                    <div class=\"stat-item\" style=\"text-align: center;\">\r\n                        <i class=\"fas fa-coins\" style=\"font-size: 2rem; color: var(--gold); display: block; margin-bottom: 0.5rem;\"></i>\r\n                        <span style=\"display: block; margin-bottom: 0.25rem;\">Coins Earned</span>\r\n                        <strong style=\"font-size: 1.5rem;\">${coinsEarned}</strong>\r\n                    </div>\r\n                    <div class=\"stat-item\" style=\"text-align: center;\">\r\n                        <i class=\"fas fa-trophy\" style=\"font-size: 2rem; color: var(--gold); display: block; margin-bottom: 0.5rem;\"></i>\r\n                        <span style=\"display: block; margin-bottom: 0.25rem;\">Your Rank</span>\r\n                        <strong style=\"font-size: 1.5rem;\">${currentPlayerRank}</strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button onclick=\"exitArcadeCompletion()\" class=\"start-button\">\r\n                Return to Welcome\r\n            </button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    requestAnimationFrame(() => overlay.classList.add('show'));\r\n    \r\n    // Helper function for podium background colors\r\n    function getPlayerBackground(rank, isCurrentPlayer) {\r\n        const backgrounds = {\r\n            1: 'linear-gradient(135deg, #FFD700 0%, #FFC800 100%)', // 1st place - gold\r\n            2: 'linear-gradient(135deg, #C0C0C0 0%, #A9A9A9 100%)', // 2nd place - silver\r\n            3: 'linear-gradient(135deg, #CD7F32 0%, #B87333 100%)'  // 3rd place - bronze\r\n        };\r\n        \r\n        if (isCurrentPlayer) {\r\n            return (backgrounds[rank] || 'rgba(255,255,255,0.1)') + \r\n                   '; border: 2px solid white; box-shadow: 0 0 15px rgba(255,255,255,0.5)';\r\n        }\r\n        \r\n        return backgrounds[rank] || 'rgba(255,255,255,0.1)';\r\n    }\r\n}\r\n\r\nfunction removePlayer(username) {\r\n    // Remove player from current arcade session\r\n    currentArcadeSession.participants = currentArcadeSession.participants.filter(\r\n        player => player.username !== username\r\n    );\r\n    \r\n    // Broadcast player removal\r\n    if (window.arcadeChannel) {\r\n        window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'player_removed',\r\n            payload: { username }\r\n        });\r\n    }\r\n    \r\n    // Update leaderboard\r\n    updateAllPlayersProgress();\r\n}\r\n\r\nfunction toggleSidePanel() {\r\n    const sidePanel = document.querySelector('.side-panel');\r\n    const hamburgerButton = document.querySelector('.hamburger-button');\r\n    const navContainer = document.querySelector('.vertical-nav-container');\r\n    const modalOverlay = document.querySelector('.modal-overlay');\r\n    \r\n    if (sidePanel.classList.contains('open')) {\r\n        sidePanel.classList.remove('open');\r\n        hamburgerButton.classList.remove('open');\r\n        navContainer.classList.remove('panel-open');\r\n        if (modalOverlay) modalOverlay.classList.remove('open');\r\n    } else {\r\n        sidePanel.classList.add('open');\r\n        hamburgerButton.classList.add('open');\r\n        navContainer.classList.add('panel-open');\r\n        if (modalOverlay) modalOverlay.classList.add('open');\r\n    }\r\n}\r\n\r\nfunction initVerticalNavigation() {\r\n    // Find existing buttons on the page\r\n    const existingButtons = {\r\n        hamburger: document.querySelector('.hamburger-button:not(.vertical-nav-container .hamburger-button)'),\r\n        home: document.querySelector('.home-button:not(.vertical-nav-container .home-button)'),\r\n        fullscreen: document.querySelector('.fullscreen-button:not(.vertical-nav-container .fullscreen-button)'),\r\n        reset: document.querySelector('.reset-button:not(.vertical-nav-container .reset-button)'),\r\n        settings: document.querySelector('.settings-button:not(.vertical-nav-container .settings-button)'),\r\n        accessibility: document.querySelector('.accessibility-toggle')\r\n    };\r\n    \r\n    // Get or create the navigation container\r\n    let navContainer = document.querySelector('.vertical-nav-container');\r\n    if (!navContainer) {\r\n        navContainer = document.createElement('div');\r\n        navContainer.className = 'vertical-nav-container';\r\n        document.body.appendChild(navContainer);\r\n    }\r\n    \r\n    // Clear container\r\n    navContainer.innerHTML = '';\r\n    \r\n    // Create new buttons in the container with the same functionality\r\n    // Hamburger button\r\n    const hamburgerBtn = document.createElement('button');\r\n    hamburgerBtn.className = 'hamburger-button';\r\n    hamburgerBtn.id = 'nav-hamburger-btn';\r\n    hamburgerBtn.innerHTML = '<i class=\"fas fa-bars\"></i>';\r\n    hamburgerBtn.onclick = toggleSidePanel;\r\n    navContainer.appendChild(hamburgerBtn);\r\n    \r\n    // Home button\r\n    const homeBtn = document.createElement('button');\r\n    homeBtn.className = 'nav-button home-button';\r\n    homeBtn.id = 'nav-home-btn';\r\n    homeBtn.innerHTML = '<i class=\"fas fa-home\"></i>';\r\n    homeBtn.onclick = navigateHome || function() { showScreen('welcome-screen'); };\r\n    navContainer.appendChild(homeBtn);\r\n    \r\n    // Fullscreen button\r\n    const fullscreenBtn = document.createElement('button');\r\n    fullscreenBtn.className = 'nav-button fullscreen-button';\r\n    fullscreenBtn.id = 'nav-fullscreen-btn';\r\n    fullscreenBtn.innerHTML = '<i class=\"fas fa-expand\"></i>';\r\n    fullscreenBtn.onclick = toggleFullScreen;\r\n    navContainer.appendChild(fullscreenBtn);\r\n    \r\n    // Reset button\r\n    const resetBtn = document.createElement('button');\r\n    resetBtn.className = 'nav-button reset-button';\r\n    resetBtn.id = 'nav-reset-btn';\r\n    resetBtn.innerHTML = '<i class=\"fas fa-trash-alt\"></i>';\r\n    resetBtn.onclick = handleResetProgress;\r\n    navContainer.appendChild(resetBtn);\r\n    \r\n    // Settings button\r\n    const settingsBtn = document.createElement('button');\r\n    settingsBtn.className = 'nav-button settings-button';\r\n    settingsBtn.id = 'nav-settings-btn';\r\n    settingsBtn.innerHTML = '<i class=\"fas fa-cog\"></i>';\r\n    settingsBtn.onclick = function() { \r\n        // Replace with actual settings function if available\r\n        const accessibilityModal = document.querySelector('.accessibility-modal');\r\n        if (accessibilityModal) accessibilityModal.classList.add('show');\r\n    };\r\n    navContainer.appendChild(settingsBtn);\r\n    \r\n    // Accessibility button\r\n    const accessBtn = document.createElement('button');\r\n    accessBtn.className = 'nav-button accessibility-button';\r\n    accessBtn.id = 'nav-accessibility-btn';\r\n    accessBtn.innerHTML = '<i class=\"fas fa-universal-access\"></i>';\r\n    accessBtn.onclick = function() { \r\n        const accessibilityModal = document.querySelector('.accessibility-modal');\r\n        if (accessibilityModal) accessibilityModal.classList.add('show');\r\n    };\r\n    navContainer.appendChild(accessBtn);\r\n    \r\n    // Remove original buttons\r\n    Object.values(existingButtons).forEach(button => {\r\n        if (button && button.parentNode) {\r\n            button.parentNode.removeChild(button);\r\n        }\r\n    });\r\n}\r\n\r\n// Call this function when the DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', initVerticalNavigation);\r\n\r\nfunction showAuthModal() {\r\n    const modal = document.getElementById('authModal');\r\n    if (modal) {\r\n        modal.classList.add('open');\r\n    }\r\n}\r\n\r\nfunction hideAuthModal() {\r\n    const modal = document.getElementById('authModal');\r\n    if (modal) {\r\n        modal.classList.remove('open');\r\n    }\r\n}\r\n\r\nfunction updateAuthUI() {\r\n    const sidePanel = document.querySelector('.side-panel');\r\n    const userProfileSection = document.querySelector('.user-profile-section');\r\n    const userEmailElement = document.getElementById('userEmail');\r\n    const logoutButton = document.querySelector('.logout-button');\r\n    const mainLoginButton = document.querySelector('.main-button');\r\n\r\n    if (currentUser) {\r\n        // Show side panel elements\r\n        if (userProfileSection) userProfileSection.style.display = 'block';\r\n        if (logoutButton) logoutButton.style.display = 'block';\r\n        \r\n        // Update username/email display\r\n        if (userEmailElement) {\r\n            userEmailElement.textContent = currentUser.user_metadata?.username || currentUser.email;\r\n        }\r\n        \r\n        // Hide main login button\r\n        if (mainLoginButton) {\r\n            mainLoginButton.style.display = 'none';\r\n        }\r\n        \r\n        // Update stats\r\n        updateUserStats();\r\n    } else {\r\n        // Hide user info and logout in side panel\r\n        if (userProfileSection) userProfileSection.style.display = 'none';\r\n        if (logoutButton) logoutButton.style.display = 'none';\r\n        \r\n        // Show main login button\r\n        if (mainLoginButton) {\r\n            mainLoginButton.style.display = 'block';\r\n        }\r\n    }\r\n}\r\n\r\nfunction showAuthModal() {\r\n    const modal = document.getElementById('authModal');\r\n    if (modal) {\r\n        modal.classList.add('show');\r\n    }\r\n}\r\n\r\nfunction hideAuthModal() {\r\n    const modal = document.getElementById('authModal');\r\n    if (modal) {\r\n        modal.classList.remove('show');\r\n    }\r\n}\r\n\r\n// Add click outside handler for auth modal\r\ndocument.addEventListener('click', (e) => {\r\n    const authModal = document.getElementById('authModal');\r\n    const authContent = authModal?.querySelector('.auth-modal-content');\r\n    const arcadeModal = document.getElementById('arcade-modal');\r\n    const arcadeContent = arcadeModal?.querySelector('.modal-content');\r\n    \r\n    // Handle auth modal\r\n    if (authModal?.classList.contains('show') && \r\n        !authContent.contains(e.target) && \r\n        !e.target.matches('.main-button')) {\r\n        hideAuthModal();\r\n    }\r\n    \r\n    // Handle arcade modal\r\n    if (arcadeModal?.style.display === 'block' && \r\n        !arcadeContent.contains(e.target) && \r\n        !e.target.matches('.arcade-button')) {\r\n        arcadeModal.style.display = 'none';\r\n    }\r\n});\r\n\r\n// Update toggle auth mode function\r\nfunction toggleAuthMode() {\r\n    const loginForm = document.getElementById('loginForm');\r\n    const signupForm = document.getElementById('signupForm');\r\n    \r\n    loginForm.classList.toggle('hidden');\r\n    signupForm.classList.toggle('hidden');\r\n}\r\n\r\nfunction updateGuestPlayButton() {\r\n    const guestPlayButton = document.querySelector('.guest-play-button');\r\n    \r\n    if (!currentUser || (currentUser && currentUser.status === 'unregistered')) {\r\n        guestPlayButton.textContent = 'Play as Guest';\r\n    } else {\r\n        guestPlayButton.textContent = 'Start Game';\r\n    }\r\n}\r\n\r\nfunction showPricesScreen() {\r\n    // TODO: Implement prices screen\r\n    alert('Prices screen coming soon!');\r\n}\r\n\r\nfunction showRightsAndPolicies() {\r\n    // TODO: Implement rights and policies page\r\n    alert('Rights & Policies page coming soon!');\r\n}\r\n\r\nfunction showAboutPage() {\r\n    // TODO: Implement about page\r\n    alert('About page coming soon!');\r\n}\r\n\r\nfunction showContactUs() {\r\n    // TODO: Implement contact us functionality\r\n    alert('Contact Us page coming soon!');\r\n}\r\n\r\nfunction animateNumber(element, start, end, duration = 500) {\r\n    // Ensure start and end are numbers\r\n    start = Number(start);\r\n    end = Number(end);\r\n    \r\n    // If start and end are the same, just set the value\r\n    if (start === end) {\r\n        element.textContent = end;\r\n        return;\r\n    }\r\n\r\n    const difference = end - start;\r\n    const frames = 30; // Increased for smoother animation\r\n    const step = difference / frames;\r\n    let current = start;\r\n    let frameCount = 0;\r\n    \r\n    function updateNumber() {\r\n        current += step;\r\n        frameCount++;\r\n        \r\n        // Round to handle floating point imprecision\r\n        if (frameCount >= frames || \r\n            (step > 0 && current >= end) || \r\n            (step < 0 && current <= end)) {\r\n            element.textContent = Math.round(end);\r\n            return;\r\n        }\r\n        \r\n        element.textContent = Math.round(current);\r\n        requestAnimationFrame(updateNumber);\r\n    }\r\n    \r\n    requestAnimationFrame(updateNumber);\r\n}\r\n\r\nfunction showNotification(message, type) {\r\n    const notification = document.createElement('div');\r\n    notification.className = `game-notification ${type}`;\r\n    notification.textContent = message;\r\n    document.body.appendChild(notification);\r\n    \r\n    setTimeout(() => notification.classList.add('show'), 10);\r\n    \r\n    setTimeout(() => {\r\n        notification.classList.remove('show');\r\n        setTimeout(() => notification.remove(), 300);\r\n    }, 2000);\r\n}\r\n\r\nfunction createParticles(x, y, type) {\r\n    const particleCount = 15;\r\n    const colors = type === 'blessing' ? \r\n        ['#3498db', '#2980b9', '#1abc9c'] : \r\n        ['#e74c3c', '#c0392b', '#d35400'];\r\n    \r\n    for (let i = 0; i < particleCount; i++) {\r\n        const particle = document.createElement('div');\r\n        particle.className = `particle ${type}`;\r\n        \r\n        const size = Math.random() * 8 + 4;\r\n        const angle = (Math.random() * Math.PI * 2);\r\n        const velocity = Math.random() * 100 + 50;\r\n        \r\n        particle.style.width = `${size}px`;\r\n        particle.style.height = `${size}px`;\r\n        particle.style.borderRadius = '50%';\r\n        particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\r\n        particle.style.position = 'fixed';\r\n        particle.style.left = `${x}px`;\r\n        particle.style.top = `${y}px`;\r\n        \r\n        document.body.appendChild(particle);\r\n        \r\n        const destinationX = x + Math.cos(angle) * velocity;\r\n        const destinationY = y + Math.sin(angle) * velocity;\r\n        \r\n        particle.animate([\r\n            { transform: 'translate(0, 0) scale(1)', opacity: 1 },\r\n            { transform: `translate(${destinationX - x}px, ${destinationY - y}px) scale(0)`, opacity: 0 }\r\n        ], {\r\n            duration: 1000,\r\n            easing: 'cubic-bezier(0.4, 0, 0.2, 1)'\r\n        }).onfinish = () => particle.remove();\r\n    }\r\n}\r\n\r\nasync function joinArcadeWithUsername() {\r\n    const usernameInput = document.getElementById('arcadeUsername');\r\n    const otpInput = document.getElementById('otpInput');\r\n    \r\n    // Get username either from input or from current user\r\n    let username;\r\n    if (currentUser) {\r\n        username = currentUser.user_metadata?.username || \r\n                  currentUser.email.split('@')[0];\r\n    } else {\r\n        username = usernameInput.value.trim();\r\n        \r\n        // Username validation for guest users\r\n        if (!username || username.length < 2 || username.length > 15) {\r\n            showErrorToast('Username must be between 2 and 15 characters');\r\n            usernameInput.focus();\r\n            return;\r\n        }\r\n\r\n        // Validate username characters\r\n        const validUsernameRegex = /^[a-zA-Z0-9\\u0590-\\u05FF\\s._-]+$/;\r\n        if (!validUsernameRegex.test(username)) {\r\n            showErrorToast('Username can contain letters, numbers, spaces, periods, underscores, and hyphens');\r\n            usernameInput.focus();\r\n            return;\r\n        }\r\n    }\r\n    \r\n    const otp = otpInput.value.trim();\r\n    \r\n    // OTP validation\r\n    if (!otp || otp.length !== 4 || !/^\\d+$/.test(otp)) {\r\n        showErrorToast('Please enter a valid 4-digit game code');\r\n        otpInput.focus();\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Get initial coins for registered users\r\n        let initialCoins = 0;\r\n        if (currentUser) {\r\n            try {\r\n                const { data, error } = await supabaseClient\r\n                    .from('game_progress')\r\n                    .select('coins')\r\n                    .eq('user_id', currentUser.id)\r\n                    .single();\r\n                    \r\n                if (!error && data) {\r\n                    initialCoins = data.coins;\r\n                    console.log('Retrieved initial coins:', initialCoins);\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to load initial coins:', error);\r\n            }\r\n        }\r\n\r\n        // Create Supabase channel for the specific arcade session\r\n        window.arcadeChannel = supabaseClient.channel(`arcade:${otp}`);\r\n        \r\n        // Set player name and initial state\r\n        currentArcadeSession.playerName = username;\r\n        currentArcadeSession.initialCoins = initialCoins;\r\n        currentArcadeSession.otp = otp;\r\n        \r\n        // First, subscribe to channel\r\n        await window.arcadeChannel.subscribe();\r\n        \r\n        // Set up celebration handler after channel initialization\r\n        setupCelebrationHandler();\r\n        \r\n        // Set up standard event listeners\r\n        window.arcadeChannel\r\n            .on('broadcast', { event: 'game_end' }, ({ payload }) => {\r\n                handleGameEnd(payload);\r\n                currentArcadeSession.state = 'ended';\r\n            })\r\n            .on('broadcast', { event: 'game_playing' }, ({ payload }) => {\r\n                if (payload.state === 'active') {\r\n                    currentArcadeSession.state = 'active';\r\n                    currentArcadeSession.wordPool = payload.wordPool;\r\n                    currentArcadeSession.wordGoal = payload.wordGoal;\r\n                    startArcadeGame();\r\n                }\r\n            })\r\n            .on('broadcast', { event: 'player_join' }, ({ payload }) => {\r\n                console.log('Player join event received:', payload);\r\n                if (!currentArcadeSession.participants.find(p => p.username === payload.username)) {\r\n                    currentArcadeSession.participants.push({\r\n                        username: payload.username,\r\n                        wordsCompleted: 0,\r\n                        coins: 0\r\n                    });\r\n\r\n                    // Update player count \r\n                    const playerCountElement = document.getElementById('player-count');\r\n                    if (playerCountElement) {\r\n                        playerCountElement.textContent = currentArcadeSession.participants.length;\r\n                    }\r\n\r\n                    // Update leaderboard if visible\r\n                    const leaderboard = document.getElementById('arcade-leaderboard');\r\n                    if (leaderboard && leaderboard.offsetParent !== null) {\r\n                        updateAllPlayersProgress();\r\n                    }\r\n                }\r\n            });\r\n        \r\n        // Set up game state check listener\r\n        window.arcadeChannel.on('broadcast', { event: 'game_state_response' }, ({ payload }) => {\r\n            console.log('Received game state response:', payload);\r\n            if (payload && payload.state === 'active') {\r\n                // Game is active, store state \r\n                currentArcadeSession.state = 'active';\r\n                currentArcadeSession.wordPool = payload.wordPool;\r\n                currentArcadeSession.wordGoal = payload.wordGoal;\r\n                \r\n                // If we've already sent the join event, go straight to game\r\n                if (currentArcadeSession.joinEventSent) {\r\n                    // Hide arcade modal first\r\n                    document.getElementById('arcade-modal').style.display = 'none';\r\n                    startArcadeGame();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Broadcast initial join\r\n        await window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'player_join',\r\n            payload: {\r\n                username: username,\r\n                type: 'initialJoin',\r\n                coins: initialCoins,\r\n                joinedAt: new Date().toISOString()\r\n            }\r\n        });\r\n        currentArcadeSession.joinEventSent = true;\r\n        \r\n        // Now check if game is active\r\n        await window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'check_game_status',\r\n            payload: {\r\n                username: username,\r\n                requestType: 'lateJoin',\r\n                timestamp: Date.now()\r\n            }\r\n        });\r\n        \r\n        // Hide arcade modal\r\n        document.getElementById('arcade-modal').style.display = 'none';\r\n        \r\n        // Wait a moment to see if we get a response indicating the game is active\r\n        setTimeout(() => {\r\n            // If state has been updated to active by a response, startArcadeGame will have been called\r\n            // Otherwise, show waiting screen\r\n            if (currentArcadeSession.state !== 'active') {\r\n                showWaitingScreen();\r\n            }\r\n        }, 500);\r\n\r\n    } catch (error) {\r\n        console.error('Join arcade error:', error);\r\n        showErrorToast('Failed to join arcade. Please try again.');\r\n    }\r\n}\r\n\r\nconst powerupPool = {\r\n    highFive: {\r\n        id: 'highFiveCard',\r\n        cost: 30,\r\n        effect: 50,\r\n        type: 'goodie',\r\n        icon: 'fa-hand-paper',\r\n        name: 'High Five',\r\n        message: 'high-fived'\r\n    },\r\n    fistBump: {\r\n        id: 'fistBumpCard',\r\n        cost: 40,\r\n        effect: 75,\r\n        type: 'goodie',\r\n        icon: 'fa-fist-raised',\r\n        name: 'Fist Bump',\r\n        message: 'fist-bumped'\r\n    },\r\n    energyBoost: {\r\n        id: 'energyBoostCard',\r\n        cost: 45,\r\n        type: 'goodie',\r\n        icon: 'fa-bolt',\r\n        name: 'Energy Boost',\r\n        message: 'boosted'\r\n    },\r\n    freeze: {\r\n        id: 'freezeCard',\r\n        cost: 150,\r\n        duration: 10000,\r\n        type: 'baddie',\r\n        icon: 'fa-snowflake',\r\n        name: 'Freeze',\r\n        message: 'froze'\r\n    },\r\n    coinStorm: {\r\n        id: 'coinStormCard',\r\n        cost: 160,\r\n        duration: 3,\r\n        type: 'baddie',\r\n        icon: 'fa-cloud-showers-heavy',\r\n        name: 'Coin Storm',\r\n        message: 'cast a coin storm on'\r\n    },\r\n    screenShake: {\r\n        id: 'screenShakeCard',\r\n        cost: 130,\r\n        duration: 5000,\r\n        type: 'baddie',\r\n        icon: 'fa-shake',\r\n        name: 'Screen Shake',\r\n        message: 'shook'\r\n    }\r\n};\r\n\r\nfunction initializePowerups() {\r\n    // Powerup definitions\r\n    const powerupDefinitions = {\r\n        highFive: {\r\n            id: \"highFiveCard\",\r\n            cost: 30,\r\n            effect: 50,\r\n            type: \"goodie\",\r\n            icon: \"fa-hand-paper\",\r\n            name: \"High Five\",\r\n            message: \"high-fived\"\r\n        },\r\n        fistBump: {\r\n            id: \"fistBumpCard\",\r\n            cost: 40,\r\n            effect: 75,\r\n            type: \"goodie\",\r\n            icon: \"fa-fist-raised\",\r\n            name: \"Fist Bump\",\r\n            message: \"fist-bumped\"\r\n        },\r\n        energyBoost: {\r\n            id: \"energyBoostCard\",\r\n            cost: 45,\r\n            type: \"goodie\",\r\n            icon: \"fa-bolt\",\r\n            name: \"Energy Boost\",\r\n            message: \"boosted\"\r\n        },\r\n        freeze: {\r\n            id: \"freezeCard\",\r\n            cost: 150,\r\n            duration: 10000,\r\n            type: \"baddie\",\r\n            icon: \"fa-snowflake\",\r\n            name: \"Freeze\",\r\n            message: \"froze\"\r\n        },\r\n        coinStorm: {\r\n            id: \"coinStormCard\",\r\n            cost: 160,\r\n            type: \"baddie\",\r\n            icon: \"fa-cloud-showers-heavy\",\r\n            name: \"Coin Storm\",\r\n            message: \"cast a coin storm on\"\r\n        },\r\n        screenShake: {\r\n            id: \"screenShakeCard\",\r\n            cost: 130,\r\n            duration: 5000,\r\n            type: \"baddie\",\r\n            icon: \"fa-shake\",\r\n            name: \"Screen Shake\", \r\n            message: \"shook\"\r\n        }\r\n    };\r\n\r\n    // Function to check and update powerup availability\r\n    function updateAvailability() {\r\n        document.querySelectorAll('.powerup-card').forEach(card => {\r\n            const costElement = card.querySelector('.powerup-cost');\r\n            if (!costElement) return;\r\n            \r\n            const cost = parseInt(costElement.textContent);\r\n            const isAffordable = currentGame.coins >= cost;\r\n            \r\n            card.classList.toggle('disabled', !isAffordable);\r\n            card.style.cursor = isAffordable ? 'pointer' : 'not-allowed';\r\n            card.style.opacity = isAffordable ? '1' : '0.5';\r\n        });\r\n    }\r\n\r\n    // Create a random selection of powerups\r\n    function getRandomPowerups(count = 3) {\r\n        const powerupKeys = Object.keys(powerupDefinitions);\r\n        const selectedKeys = [];\r\n        \r\n        while (selectedKeys.length < count && powerupKeys.length > 0) {\r\n            const randomIndex = Math.floor(Math.random() * powerupKeys.length);\r\n            selectedKeys.push(powerupKeys.splice(randomIndex, 1)[0]);\r\n        }\r\n        \r\n        return selectedKeys;\r\n    }\r\n    \r\n    // Set up the powerups container\r\n    const container = document.querySelector('.powerups-container');\r\n    if (!container) return;\r\n    \r\n    // Clear existing powerups\r\n    container.innerHTML = '';\r\n    \r\n    // Add random powerups\r\n    getRandomPowerups(3).forEach(key => {\r\n        const powerup = powerupDefinitions[key];\r\n        \r\n        const powerupCard = document.createElement('div');\r\n        powerupCard.className = `powerup-card ${powerup.type}`;\r\n        powerupCard.id = powerup.id;\r\n        \r\n        powerupCard.innerHTML = `\r\n            <i class=\"fas ${powerup.icon} powerup-icon\"></i>\r\n            <div class=\"powerup-name\">${powerup.name}</div>\r\n            <div class=\"powerup-cost\">${powerup.cost}</div>\r\n        `;\r\n        \r\n        // Add click handler\r\n        powerupCard.onclick = async () => {\r\n            console.log(\"Powerup clicked:\", powerup.name);\r\n            \r\n            // Check if player has enough coins\r\n            if (currentGame.coins < powerup.cost) {\r\n                showNotification(\"Not enough coins!\", \"error\");\r\n                return;\r\n            }\r\n            \r\n            // Find a random player to target (excluding self)\r\n            const otherPlayers = currentArcadeSession.participants.filter(p => \r\n                p.username !== currentArcadeSession.playerName && \r\n                p.username !== undefined && \r\n                p.username !== null\r\n            );\r\n            \r\n            if (otherPlayers.length === 0) {\r\n                showNotification(\"Waiting for other players to join...\", \"info\");\r\n                return;\r\n            }\r\n            \r\n            // Select random target and deduct coins\r\n            const targetPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];\r\n            const oldCoins = currentGame.coins;\r\n            currentGame.coins -= powerup.cost;\r\n            \r\n            // Update displayed coins\r\n            document.querySelectorAll('.coin-count').forEach(el => {\r\n                el.textContent = currentGame.coins;\r\n            });\r\n            \r\n            try {\r\n                // Send powerup effect to target player\r\n                await window.arcadeChannel.send({\r\n                    type: 'broadcast',\r\n                    event: 'powerup_effect',\r\n                    payload: {\r\n                        powerupKey: key,\r\n                        targetUser: targetPlayer.username,\r\n                        fromUser: currentArcadeSession.playerName,\r\n                        powerup: powerup\r\n                    }\r\n                });\r\n                \r\n                // Show feedback notification\r\n                showNotification(`Used ${powerup.name} on ${targetPlayer.username}!`, powerup.type);\r\n                \r\n                // Update participant list with new coin count\r\n                await window.arcadeChannel.send({\r\n                    type: 'broadcast',\r\n                    event: 'progress_update',\r\n                    payload: {\r\n                        username: currentArcadeSession.playerName,\r\n                        wordsCompleted: currentGame.wordsCompleted,\r\n                        coins: currentGame.coins,\r\n                        timestamp: Date.now()\r\n                    }\r\n                });\r\n                \r\n                // Refresh powerups with the new coin amount\r\n                initializePowerups();\r\n                \r\n            } catch (error) {\r\n                console.error(\"Powerup use error:\", error);\r\n                // Restore coins on error\r\n                currentGame.coins = oldCoins;\r\n                document.querySelectorAll('.coin-count').forEach(el => {\r\n                    el.textContent = oldCoins;\r\n                });\r\n                showNotification(\"Failed to use powerup!\", \"error\");\r\n            }\r\n            updatePlayerRankDisplay();\r\n        };\r\n        \r\n        container.appendChild(powerupCard);\r\n    });\r\n    \r\n    // Initial availability check\r\n    updateAvailability();\r\n    \r\n    // Set up an observer to watch for coin count changes\r\n    const coinDisplay = document.querySelector('.coin-count');\r\n    if (coinDisplay) {\r\n        const observer = new MutationObserver(() => {\r\n            updateAvailability();\r\n        });\r\n        \r\n        observer.observe(coinDisplay, {\r\n            childList: true,\r\n            characterData: true,\r\n            subtree: true\r\n        });\r\n    }\r\n    \r\n    // Return the updateAvailability function so it can be called externally\r\n    return updateAvailability;\r\n}\r\n\r\n// Update powerup availability whenever coin count changes\r\nfunction updatePowerupAvailability() {\r\n  document.querySelectorAll('.powerup-card').forEach(card => {\r\n    const costElement = card.querySelector('.powerup-cost');\r\n    if (!costElement) return;\r\n    \r\n    const cost = parseInt(costElement.textContent);\r\n    const isAffordable = currentGame.coins >= cost;\r\n    \r\n    card.classList.toggle('disabled', !isAffordable);\r\n    card.style.cursor = isAffordable ? 'pointer' : 'not-allowed';\r\n    card.style.opacity = isAffordable ? '1' : '0.5';\r\n  });\r\n}\r\n\r\nfunction updateArcadePowerups() {\r\n    // Get all powerup cards\r\n    const powerupCards = document.querySelectorAll('.powerup-card');\r\n    \r\n    // Current coin amount\r\n    const currentCoins = currentGame.coins || 0;\r\n    \r\n    // Update each powerup card's availability\r\n    powerupCards.forEach(card => {\r\n        const costElement = card.querySelector('.powerup-cost');\r\n        if (!costElement) return;\r\n        \r\n        // Parse cost from the element\r\n        const cost = parseInt(costElement.textContent);\r\n        \r\n        // Determine if player can afford this powerup\r\n        const canAfford = currentCoins >= cost;\r\n        \r\n        // Update visual state\r\n        card.classList.toggle('disabled', !canAfford);\r\n        card.style.opacity = canAfford ? '1' : '0.5';\r\n        card.style.cursor = canAfford ? 'pointer' : 'not-allowed';\r\n    });\r\n}\r\n\r\nfunction updateArcadeCoinDisplay() {\r\n  const currentCoins = currentGame.coins || 0;\r\n  document.querySelectorAll(\".coin-count\").forEach((element => {\r\n    const displayedValue = parseInt(element.textContent) || 0;\r\n    if (displayedValue !== currentCoins) {\r\n      animateCoinsChange(element, displayedValue, currentCoins);\r\n    }\r\n  }));\r\n  updatePowerupAvailability();\r\n}\r\n\r\n\r\n\r\nfunction generateQRCode(otp) {\r\n    // Get the base URL without any parameters or hash\r\n    const baseUrl = window.location.origin + window.location.pathname;\r\n    const joinUrl = `${baseUrl}#join=${otp}`;\r\n    \r\n    // Add console logging for debugging\r\n    console.log('Generating QR code with URL:', joinUrl);\r\n    \r\n    new QRious({\r\n        element: document.getElementById('qrCode'),\r\n        value: joinUrl,\r\n        size: 200,\r\n        backgroundAlpha: 1,\r\n        foreground: '#16213e',\r\n        background: '#ffffff',\r\n        level: 'H'\r\n    });\r\n}\r\n\r\nfunction handleHashChange() {\r\n    console.log('Hash change detected:', window.location.hash);\r\n    \r\n    if (window.location.hash.startsWith('#join=')) {\r\n        const otp = window.location.hash.replace('#join=', '');\r\n        console.log('Join OTP detected:', otp);\r\n        \r\n        // Show landing page on mobile\r\n        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\r\n            const qrLanding = document.getElementById('qr-landing');\r\n            const codeDisplay = qrLanding.querySelector('.game-code-display');\r\n            \r\n            // Hide all other screens\r\n            document.querySelectorAll('.screen').forEach(screen => {\r\n                screen.style.display = 'none';\r\n            });\r\n            \r\n            // Show and populate landing page\r\n            qrLanding.style.display = 'flex';\r\n            codeDisplay.textContent = otp;\r\n            \r\n            // Store OTP for later use\r\n            qrLanding.dataset.otp = otp;\r\n        } else {\r\n            // Desktop behavior\r\n            history.pushState(\"\", document.title, window.location.pathname);\r\n            showJoinModal(otp);\r\n        }\r\n    }\r\n}\r\n\r\nfunction proceedToGame() {\r\n    const qrLanding = document.getElementById('qr-landing');\r\n    const otp = qrLanding.dataset.otp;\r\n    \r\n    // Hide landing page\r\n    qrLanding.style.display = 'none';\r\n    \r\n    // Show join modal with OTP\r\n    showJoinModal(otp);\r\n}\r\n\r\n\r\n\r\nfunction showNotification(message, type = 'info') {\r\n    const notification = document.createElement('div');\r\n    notification.className = `game-notification ${type}`;\r\n    notification.textContent = message;\r\n    \r\n    document.body.appendChild(notification);\r\n    requestAnimationFrame(() => notification.classList.add('show'));\r\n    \r\n    setTimeout(() => {\r\n        notification.classList.remove('show');\r\n        setTimeout(() => notification.remove(), 300);\r\n    }, 3000);\r\n}\r\n\r\nfunction switchAuthForm(type) {\r\n    const loginForm = document.getElementById('loginForm');\r\n    const signupForm = document.getElementById('signupForm');\r\n    \r\n    if (type === 'signup') {\r\n        loginForm.classList.add('hidden');\r\n        signupForm.classList.remove('hidden');\r\n    } else {\r\n        loginForm.classList.remove('hidden');\r\n        signupForm.classList.add('hidden');\r\n    }\r\n}\r\n\r\nasync function combineCustomLists(listIds) {\r\n    if (!currentUser?.role === 'teacher') return;\r\n    \r\n    const combinedList = {\r\n        id: Date.now(),\r\n        name: 'Combined List',\r\n        words: [],\r\n        translations: [],\r\n        isTeacherList: true\r\n    };\r\n    \r\n    // Merge selected lists\r\n    for (const listId of listIds) {\r\n        const list = customPracticeLists.lists.find(l => l.id === listId);\r\n        if (list) {\r\n            combinedList.words.push(...list.words);\r\n            combinedList.translations.push(...list.translations);\r\n        }\r\n    }\r\n    \r\n    return combinedList;\r\n}\r\n\r\nasync function convertListToArcade(listId) {\r\n    if (!currentUser?.role === 'teacher') return;\r\n    \r\n    const list = customPracticeLists.lists.find(l => l.id === listId);\r\n    if (!list) return;\r\n    \r\n    // Create arcade configuration\r\n    const arcadeConfig = {\r\n        wordPool: list.words.map((word, index) => ({\r\n            word: word,\r\n            translation: list.translations[index]\r\n        })),\r\n        isCustomArcade: true,\r\n        teacherId: currentUser.id,\r\n        listId: listId\r\n    };\r\n    \r\n    return arcadeConfig;\r\n}\r\n\r\nfunction initializeBossLevel() {\r\n    console.log(\"Initializing boss level\");\r\n    \r\n    // Create boss timer\r\n    const { container: timerContainer, display: timerDisplay } = createBossTimer();\r\n    document.getElementById('question-screen').appendChild(timerContainer);\r\n    \r\n    currentGame.bossFirstHealthRestored = false;\r\n    currentGame.bossSecondHealthRestored = false;\r\n    \r\n    applyBossLevelStyles();\r\n    \r\n    document.querySelectorAll(\".perk-button\").forEach((e) => {\r\n        if (e) {\r\n            e.disabled = true;\r\n            e.style.opacity = \"0.3\";\r\n            \r\n            const disabledOverlay = document.createElement(\"div\");\r\n            disabledOverlay.className = \"perk-disabled\";\r\n            disabledOverlay.innerHTML = \"❌\";\r\n            disabledOverlay.style.cssText = `\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n                font-size: 1.5em;\r\n                color: red;\r\n                pointer-events: none;\r\n            `;\r\n            \r\n            e.style.position = 'relative';\r\n            e.appendChild(disabledOverlay);\r\n        }\r\n    });\r\n    \r\n    const progressCircle = document.querySelector(\".progress-circle\");\r\n    if (progressCircle) {\r\n        const progressElement = progressCircle.querySelector(\".progress\");\r\n        if (progressElement) {\r\n            progressElement.style.stroke = \"#4CAF50\";\r\n        }\r\n    }\r\n    \r\n    // Set timer update logic in startTimer\r\n    currentGame.updateBossTimer = (timeRemaining) => {\r\n        const timerDisplay = document.querySelector('#boss-timer div');\r\n        updateBossTimer(timerDisplay, timeRemaining);\r\n    };\r\n    \r\n    setTimeout(applyBossLevelStyles, 100);\r\n    setTimeout(applyBossLevelStyles, 500);\r\n    \r\n    console.log(\"Boss level initialization complete\");\r\n}\r\n\r\n\r\nfunction replaceCoinWithBossOrb() {\r\n  const coinsContainer = document.querySelector('.coins-container');\r\n  if (!coinsContainer) {\r\n    console.error(\"Coins container not found\");\r\n    return;\r\n  }\r\n  \r\n  // Create boss orb\r\n  const bossOrb = document.createElement('div');\r\n  bossOrb.className = 'boss-orb';\r\n  bossOrb.innerHTML = `<div class=\"boss-orb-inner\"></div>`;\r\n  \r\n  // Apply direct styles\r\n  bossOrb.style.cssText = `\r\n    position: absolute;\r\n    width: 60px;\r\n    height: 60px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 10;\r\n  `;\r\n  \r\n  bossOrb.querySelector('.boss-orb-inner').style.cssText = `\r\n    width: 50px;\r\n    height: 50px;\r\n    background: radial-gradient(circle at 30% 30%, #ff3333, #990000);\r\n    border-radius: 50%;\r\n    box-shadow: 0 0 20px #ff3333, inset 0 0 10px rgba(255,255,255,0.3);\r\n    animation: pulseOrb 2s infinite;\r\n  `;\r\n  \r\n  // Add animation for orb\r\n  const orbStyle = document.createElement('style');\r\n  orbStyle.innerHTML = `\r\n    @keyframes pulseOrb {\r\n      0%, 100% { transform: scale(1); filter: brightness(1); }\r\n      50% { transform: scale(1.1); filter: brightness(1.2); }\r\n    }\r\n  `;\r\n  document.head.appendChild(orbStyle);\r\n  \r\n  // Clear existing content and add boss orb\r\n  coinsContainer.innerHTML = '';\r\n  coinsContainer.appendChild(bossOrb);\r\n}\r\n\r\nfunction initializeBossHealthBar() {\r\n  const progressCircle = document.querySelector('.progress-circle');\r\n  if (!progressCircle) return;\r\n  \r\n  const progress = progressCircle.querySelector('.progress');\r\n  if (!progress) return;\r\n  \r\n  // Start with full health - bright green\r\n  progress.style.stroke = '#4CAF50';\r\n  \r\n  // Add health warning animation style\r\n  const healthStyle = document.createElement('style');\r\n  healthStyle.innerHTML = `\r\n    .progress.warning {\r\n      animation: healthWarning 0.8s infinite alternate;\r\n    }\r\n    @keyframes healthWarning {\r\n      from { stroke: #ff3333; }\r\n      to { stroke: #ffffff; }\r\n    }\r\n  `;\r\n  document.head.appendChild(healthStyle);\r\n}\r\n\r\nfunction addBossLevelStyles() {\r\n  // Remove existing styles first\r\n  const existingStyle = document.getElementById('boss-level-style');\r\n  if (existingStyle) {\r\n    existingStyle.remove();\r\n  }\r\n  \r\n  const bossStyle = document.createElement('style');\r\n  bossStyle.id = 'boss-level-style';\r\n  bossStyle.innerHTML = `\r\n    .boss-mode {\r\n      background: linear-gradient(135deg, #800000, #3a0000) !important;\r\n    }\r\n    \r\n    @keyframes pulseBg {\r\n      0%, 100% { filter: brightness(1); }\r\n      50% { filter: brightness(1.2); }\r\n    }\r\n    \r\n    .boss-orb {\r\n      position: relative;\r\n      width: 60px;\r\n      height: 60px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .boss-orb-inner {\r\n      width: 50px;\r\n      height: 50px;\r\n      background: radial-gradient(circle at 30% 30%, #ff3333, #990000);\r\n      border-radius: 50%;\r\n      position: relative;\r\n      box-shadow: 0 0 20px #ff3333, inset 0 0 10px rgba(255,255,255,0.3);\r\n      animation: pulseOrb 2s infinite;\r\n    }\r\n    \r\n    .boss-orb-glow {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      background: radial-gradient(circle at 30% 30%, rgba(255,255,255,0.3), transparent 70%);\r\n      animation: rotateGlow 3s linear infinite;\r\n    }\r\n    \r\n    @keyframes pulseOrb {\r\n      0%, 100% { transform: scale(1); filter: brightness(1); }\r\n      50% { transform: scale(1.1); filter: brightness(1.2); }\r\n    }\r\n    \r\n    @keyframes rotateGlow {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n    \r\n    .boss-health {\r\n      transition: stroke 0.3s ease, stroke-dashoffset 0.5s ease;\r\n    }\r\n    \r\n    .boss-health.warning {\r\n      animation: healthWarning 0.8s infinite alternate;\r\n    }\r\n    \r\n    @keyframes healthWarning {\r\n      from { stroke: #ff3333; }\r\n      to { stroke: #ffffff; }\r\n    }\r\n    \r\n    .boss-word {\r\n      color: #ff3333;\r\n      text-shadow: 0 0 10px rgba(255, 0, 0, 0.5);\r\n      animation: pulseWord 2s infinite;\r\n    }\r\n    \r\n    @keyframes pulseWord {\r\n      0%, 100% { transform: scale(1); }\r\n      50% { transform: scale(1.05); }\r\n    }\r\n    \r\n    .boss-hit {\r\n      animation: bossHitEffect 0.3s;\r\n    }\r\n    \r\n    @keyframes bossHitEffect {\r\n      0% { transform: scale(1); }\r\n      50% { transform: scale(1.02); filter: brightness(1.3); }\r\n      100% { transform: scale(1); }\r\n    }\r\n    \r\n    .boss-orb-hit {\r\n      animation: bossOrbHit 0.3s;\r\n    }\r\n    \r\n    @keyframes bossOrbHit {\r\n      0% { transform: scale(1); }\r\n      50% { transform: scale(1.3); filter: brightness(1.5); }\r\n      100% { transform: scale(1); }\r\n    }\r\n    \r\n    .boss-restore-health {\r\n      animation: bossRestoreHealth 1s;\r\n    }\r\n    \r\n    @keyframes bossRestoreHealth {\r\n      0% { filter: brightness(1); }\r\n      50% { filter: brightness(2); }\r\n      100% { filter: brightness(1); }\r\n    }\r\n    \r\n    .boss-defeated {\r\n      animation: bossDefeated 2s forwards;\r\n    }\r\n    \r\n    @keyframes bossDefeated {\r\n      0% { transform: scale(1); opacity: 1; }\r\n      50% { transform: scale(1.5); opacity: 0.7; filter: brightness(2); }\r\n      100% { transform: scale(0); opacity: 0; }\r\n    }\r\n    \r\n    .raining-letter {\r\n      position: absolute;\r\n      color: rgba(255, 0, 0, 0.3);\r\n      font-size: 16px;\r\n      animation: letterRain linear forwards;\r\n      z-index: 1;\r\n    }\r\n    \r\n    @keyframes letterRain {\r\n      0% { transform: translateY(-20px); opacity: 0; }\r\n      10% { opacity: 0.7; }\r\n      90% { opacity: 0.7; }\r\n      100% { transform: translateY(100vh); opacity: 0; }\r\n    }\r\n    \r\n    .boss-victory {\r\n      position: fixed;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      background: linear-gradient(135deg, #00c6ff, #0072ff);\r\n      padding: 2rem;\r\n      border-radius: 20px;\r\n      text-align: center;\r\n      box-shadow: 0 0 30px rgba(0, 198, 255, 0.5);\r\n      z-index: 1000;\r\n      max-width: 500px;\r\n      width: 90%;\r\n    }\r\n    \r\n    .boss-victory h2 {\r\n      font-size: 2rem;\r\n      color: white;\r\n      margin-bottom: 1rem;\r\n    }\r\n    \r\n    .boss-victory p {\r\n      font-size: 1.2rem;\r\n      color: rgba(255, 255, 255, 0.9);\r\n      margin-bottom: 2rem;\r\n    }\r\n    \r\n    .victory-buttons {\r\n      display: flex;\r\n      justify-content: center;\r\n      gap: 1rem;\r\n    }\r\n    \r\n.victory-button {\r\n    background: var(--accent);\r\n    color: var(--text);\r\n    border: none;\r\n    padding: 1rem 2.5rem;\r\n    border-radius: 50px;\r\n    font-size: 1.2rem;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    transition: all 0.3s ease;\r\n    box-shadow: 0 5px 15px rgba(30, 144, 255, 0.3);\r\n    margin-top: 1.5rem;\r\n    min-width: 200px;\r\n}\r\n\r\n.victory-button:hover {\r\n    transform: translateY(-3px);\r\n    background: color-mix(in srgb, var(--accent) 80%, white);\r\n    box-shadow: 0 8px 20px rgba(30, 144, 255, 0.5);\r\n}\r\n\r\n.victory-button:active {\r\n    transform: translateY(1px);\r\n    box-shadow: 0 3px 10px rgba(30, 144, 255, 0.3);\r\n}\r\n    \r\n    .victory-button.continue {\r\n      background: #4CAF50;\r\n      color: white;\r\n    }\r\n    \r\n    .victory-button.home {\r\n      background: rgba(255, 255, 255, 0.2);\r\n      color: white;\r\n      border: 2px solid white;\r\n    }\r\n    \r\n   \r\n    \r\n    .incineration-effect {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      background: radial-gradient(circle, #ff9900, #ff3300);\r\n      opacity: 0;\r\n      transform: scale(0);\r\n      animation: incinerateEffect 2s forwards;\r\n    }\r\n    \r\n    @keyframes incinerateEffect {\r\n      0% { transform: scale(0); opacity: 0; }\r\n      10% { transform: scale(0.5); opacity: 0.8; }\r\n      50% { transform: scale(1.5); opacity: 1; }\r\n      100% { transform: scale(3); opacity: 0; }\r\n    }\r\n  `;\r\n  \r\n  document.head.appendChild(bossStyle);\r\n}\r\n\r\nfunction updateBossHealthBar() {\r\n  // Only update if we're in boss level\r\n  if (!currentGame.isBossLevel) return false;\r\n  \r\n  console.log(\"Updating boss health bar\");\r\n\r\n  const progressCircle = document.querySelector('.progress-circle');\r\n  if (!progressCircle) {\r\n    console.error(\"Progress circle not found\");\r\n    return false;\r\n  }\r\n  \r\n  const progress = progressCircle.querySelector('.progress');\r\n  if (!progress) {\r\n    console.error(\"Progress element not found\");\r\n    return false;\r\n  }\r\n  \r\n  // Calculate health values\r\n  const totalWords = currentGame.words.length;\r\n  const currentIndex = currentGame.currentIndex || 0;\r\n  const remainingWords = Math.max(0, totalWords - currentIndex);\r\n  const remainingPercentage = remainingWords / totalWords;\r\n  \r\n  console.log(`Boss health: ${(remainingPercentage * 100).toFixed(2)}% (${remainingWords}/${totalWords})`);\r\n  \r\n  // Calculate the circumference\r\n  const circumference = 2 * Math.PI * 54;\r\n  \r\n  // Update the stroke dash offset (reverse of normal progress)\r\n  progress.style.strokeDashoffset = circumference * (1 - remainingPercentage);\r\n  \r\n  // Update boss orb size\r\n  const bossOrb = document.querySelector('.boss-orb-inner');\r\n  if (bossOrb) {\r\n    const minSize = 5;  // Minimum size of the orb\r\n    const maxSize = 50; // Maximum size of the orb\r\n    const currentSize = Math.max(minSize, maxSize * remainingPercentage);\r\n    \r\n    bossOrb.style.width = `${currentSize}px`;\r\n    bossOrb.style.height = `${currentSize}px`;\r\n    \r\n    // Center the shrinking orb\r\n    bossOrb.style.left = `${(50 - currentSize/2)}%`;\r\n    bossOrb.style.top = `${(50 - currentSize/2)}%`;\r\n  }\r\n  \r\n  // Change color based on health\r\n  if (remainingPercentage > 0.66) {\r\n    // Full health - green\r\n    progress.style.stroke = '#4CAF50';\r\n    progress.classList.remove('warning');\r\n  } else if (remainingPercentage > 0.33) {\r\n    // Medium health - yellow/orange\r\n    progress.style.stroke = '#FFA500';\r\n    progress.classList.remove('warning');\r\n    \r\n    // Boss health restoration at 2/3 health (once)\r\n    if (remainingPercentage <= 0.66 && !currentGame.bossFirstHealthRestored) {\r\n      currentGame.bossFirstHealthRestored = true;\r\n      console.log(\"First boss health restoration\");\r\n      \r\n      if (bossOrb) {\r\n        // White flash\r\n        bossOrb.style.background = 'radial-gradient(circle at 30% 30%, white, #FFEB3B)';\r\n        bossOrb.style.transform = 'scale(1.3)';\r\n        bossOrb.style.filter = 'brightness(1.8)';\r\n        \r\n        setTimeout(() => {\r\n          bossOrb.style.transform = '';\r\n          bossOrb.style.filter = '';\r\n          bossOrb.style.background = 'radial-gradient(circle at 30% 30%, #ff3333, #990000)';\r\n        }, 1000);\r\n      }\r\n      \r\n      // Restore health to 75%\r\n      const restoredIndex = Math.floor(totalWords * 0.25); // 75% health\r\n      currentGame.currentIndex = restoredIndex;\r\n      \r\n      // Re-update the health bar after restoration\r\n      setTimeout(() => updateBossHealthBar(), 100);\r\n    }\r\n  } else {\r\n    // Low health - red\r\n    progress.style.stroke = '#FF3333';\r\n    progress.classList.add('warning');\r\n    \r\n    // Boss health restoration at 1/3 health (once)\r\n    if (remainingPercentage <= 0.33 && !currentGame.bossSecondHealthRestored) {\r\n      currentGame.bossSecondHealthRestored = true;\r\n      console.log(\"Second boss health restoration\");\r\n      \r\n      if (bossOrb) {\r\n        // Green-white flash\r\n        bossOrb.style.background = 'radial-gradient(circle at 30% 30%, white, #4CAF50)';\r\n        bossOrb.style.transform = 'scale(1.3)';\r\n        bossOrb.style.filter = 'brightness(1.8)';\r\n        \r\n        setTimeout(() => {\r\n          bossOrb.style.transform = '';\r\n          bossOrb.style.filter = '';\r\n          bossOrb.style.background = 'radial-gradient(circle at 30% 30%, #ff3333, #990000)';\r\n        }, 1000);\r\n      }\r\n      \r\n      // Restore health to 50%\r\n      const restoredIndex = Math.floor(totalWords * 0.5); // 50% health\r\n      currentGame.currentIndex = restoredIndex;\r\n      \r\n      // Re-update the health bar after restoration\r\n      setTimeout(() => updateBossHealthBar(), 100);\r\n    }\r\n  }\r\n\r\n  // Only trigger defeat effect here if not already marked as defeated\r\n  if (remainingPercentage <= 0 && !currentGame.bossDefeated) {\r\n    console.log(\"Boss defeated via health bar check!\");\r\n    currentGame.bossDefeated = true;\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nfunction startBossLevel() {\r\n    showLevelIntro(21, () => {\r\n        initializeBossLevel();\r\n        startTimer(currentGame.words.length * 8); // Less time per word\r\n        loadNextBossQuestion();\r\n    });\r\n}\r\n\r\nfunction loadNextBossQuestion() {\r\n  console.log('Loading next boss question');\r\n  setTimeout(applyBossLevelStyles, 100);\r\n  createLightningEffect();\r\n  createBossRainingLetters();\r\n  \r\n  const questionWordElement = document.getElementById('question-word');\r\n  if (questionWordElement) {\r\n    questionWordElement.style.setProperty('color', '#ff3333', 'important');\r\n    questionWordElement.style.setProperty('text-shadow', '0 0 10px rgba(255, 0, 0, 0.5)', 'important');\r\n    questionWordElement.style.setProperty('animation', 'pulseWord 2s infinite', 'important');\r\n  }\r\n  \r\n  try {\r\n    if (currentGame.currentIndex > 0 && questionWordElement) {\r\n      questionWordElement.classList.add('exiting');\r\n      setTimeout(() => {\r\n        loadNextQuestion();\r\n        questionWordElement.classList.remove('exiting');\r\n        questionWordElement.classList.add('entering');\r\n        setTimeout(() => {\r\n          questionWordElement.classList.remove('entering');\r\n        }, 500); // Match the animation duration\r\n      }, 500); // Match the animation duration\r\n    } else {\r\n      loadNextQuestion();\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      updateBossHealthBar();\r\n    }, 50);\r\n    \r\n    // Occasionally shuffle buttons to increase difficulty\r\n    const buttonsContainer = document.getElementById('buttons');\r\n    if (buttonsContainer && Math.random() < 0.3) {\r\n      const buttons = Array.from(buttonsContainer.children);\r\n      buttons.sort(() => Math.random() - 0.5).forEach(button => {\r\n        buttonsContainer.appendChild(button);\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading boss question:', error);\r\n  }\r\n}\r\n\r\nfunction restoreFromBossLevel() {\r\n  const questionScreen = document.getElementById(\"question-screen\");\r\n  if (questionScreen) {\r\n    // First remove any inline styles\r\n    questionScreen.removeAttribute(\"style\");\r\n    \r\n    // Then apply default styles\r\n    questionScreen.style.background = \"radial-gradient(circle at center, var(--secondary) 0%, var(--primary-dark) 100%)\";\r\n  }\r\n\r\n  const questionWord = document.getElementById(\"question-word\");\r\n  if (questionWord) {\r\n    questionWord.removeAttribute(\"style\");\r\n  }\r\n\r\n  if (window.originalCoinsHTML) {\r\n    const coinsContainer = document.querySelector(\".coins-container\");\r\n    if (coinsContainer) {\r\n      coinsContainer.innerHTML = window.originalCoinsHTML;\r\n    }\r\n  }\r\n  \r\n  // Stop any boss-specific effects\r\n  if (typeof stopBossRainingLetters === 'function') {\r\n    stopBossRainingLetters();\r\n  }\r\n}\r\n\r\n// Arcade Participation Management\r\nfunction initializeArcadeParticipation() {\r\n    // Set up activity tracking\r\n    let lastActive = Date.now();\r\n    const INACTIVE_THRESHOLD = 60000; // 1 minute\r\n\r\n    // Heartbeat interval\r\n    setInterval(() => {\r\n        if (Date.now() - lastActive > INACTIVE_THRESHOLD) {\r\n            removeInactivePlayer();\r\n        }\r\n    }, 10000); // Check every 10 seconds\r\n\r\n    // Track user activity\r\n    ['mousemove', 'keypress', 'click'].forEach(event => {\r\n        document.addEventListener(event, () => {\r\n            lastActive = Date.now();\r\n        });\r\n    });\r\n\r\n    // Handle page refresh/close\r\n    window.addEventListener('beforeunload', () => {\r\n        if (window.arcadeChannel) {\r\n            window.arcadeChannel.send({\r\n                type: 'broadcast',\r\n                event: 'player_left',\r\n                payload: {\r\n                    username: currentArcadeSession.playerName\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction removeInactivePlayer() {\r\n    window.arcadeChannel.send({\r\n        type: 'broadcast',\r\n        event: 'player_inactive',\r\n        payload: {\r\n            username: currentArcadeSession.playerName\r\n        }\r\n    });\r\n}\r\n\r\n// Arcade Completion Handling\r\nfunction handleArcadeCompletion(playerData) {\r\n    const completionRank = currentArcadeSession.participants\r\n        .sort((a, b) => b.wordsCompleted - a.wordsCompleted)\r\n        .findIndex(p => p.username === playerData.username) + 1;\r\n\r\n    if (completionRank <= 3) {\r\n        showPersonalizedCompletion(completionRank);\r\n        \r\n        if (completionRank === 3) {\r\n            // End game for all players\r\n            window.arcadeChannel.send({\r\n                type: 'broadcast',\r\n                event: 'game_complete',\r\n                payload: {\r\n                    topThree: currentArcadeSession.participants\r\n                        .sort((a, b) => b.wordsCompleted - a.wordsCompleted)\r\n                        .slice(0, 3)\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nasync function handlePlayerCompletedGoal(username) {\r\n    // Skip if player already completed\r\n    if (currentArcadeSession.completedPlayers.includes(username)) return;\r\n    \r\n    // Record completion time\r\n    const completionTime = Date.now();\r\n    currentArcadeSession.completedPlayers.push(username);\r\n    \r\n    // Determine rank based on completion order (1st, 2nd, 3rd)\r\n    let rank = 0;\r\n    const completionIndex = currentArcadeSession.completedPlayers.indexOf(username);\r\n    if (completionIndex < 3) {\r\n        // 1st, 2nd, or 3rd place based strictly on completion order\r\n        rank = completionIndex + 1;\r\n        \r\n        // Store the rank information\r\n        if (!currentArcadeSession.podiumRanks) {\r\n            currentArcadeSession.podiumRanks = {};\r\n        }\r\n        currentArcadeSession.podiumRanks[username] = {\r\n            rank: rank,\r\n            completionTime: completionTime\r\n        };\r\n        console.log(`Player ${username} earned podium rank ${rank} (first to finish)`);\r\n    }\r\n    \r\n    // Update player data\r\n    const playerData = currentArcadeSession.participants.find(p => p.username === username);\r\n    if (playerData) {\r\n        if (rank > 0) {\r\n            playerData.rank = rank;\r\n            playerData.completionTime = completionTime;\r\n        }\r\n        playerData.wordsCompleted = currentGame.wordsCompleted;\r\n        playerData.coins = gameState.coins || currentGame.coins || 0;\r\n        playerData.completed = true;\r\n    }\r\n    \r\n    // Broadcast completion to all players\r\n    await window.arcadeChannel.send({\r\n        type: \"broadcast\",\r\n        event: \"player_completed\",\r\n        payload: {\r\n            username: username,\r\n            rank: rank,\r\n            wordsCompleted: currentGame.wordsCompleted,\r\n            coins: gameState.coins || currentGame.coins || 0,\r\n            timestamp: completionTime,\r\n            completed: true\r\n        }\r\n    });\r\n    \r\n    // Show victory screen for this player if they placed\r\n    if (username === currentArcadeSession.playerName && rank > 0) {\r\n        showPersonalVictoryScreen(rank);\r\n    }\r\n    \r\n    // End game if all podium positions are filled\r\n    if (currentArcadeSession.completedPlayers.length >= 3) {\r\n        await endArcadeForAll();\r\n    }\r\n}\r\n\r\nfunction endArcade() {\r\n    // Disable game activity monitoring\r\n    moderatorInactivity.isGameActive = false;\r\n    \r\n    // Mark celebration as triggered to prevent duplicate celebrations\r\n    currentArcadeSession.celebrationTriggered = true;\r\n    \r\n    // Update session state\r\n    currentArcadeSession.state = \"ended\";\r\n    currentArcadeSession.endTime = Date.now();\r\n    \r\n    // For sessions with enough participants, show celebration\r\n    if (currentArcadeSession.participants.length >= 3) {\r\n        const podiumPlayers = [...currentArcadeSession.participants]\r\n            .sort((a, b) => b.wordsCompleted !== a.wordsCompleted ? \r\n                 b.wordsCompleted - a.wordsCompleted : b.coins - a.coins)\r\n            .slice(0, 3)\r\n            .map((player, index) => ({...player, rank: index + 1, completionTime: Date.now() - 1000 * index}));\r\n            \r\n        window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'game_end',\r\n            payload: {\r\n                state: 'ended',\r\n                podiumPlayers: podiumPlayers,\r\n                teacherId: currentArcadeSession.teacherId,\r\n                forcedEnd: false,\r\n                duration: currentArcadeSession.endTime - (currentArcadeSession.startTime || currentArcadeSession.endTime)\r\n            }\r\n        });\r\n        \r\n        startLeaderboardCelebration(podiumPlayers);\r\n    } else {\r\n        window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'game_end',\r\n            payload: {\r\n                state: 'ended',\r\n                forcedEnd: true,\r\n                teacherId: currentArcadeSession.teacherId\r\n            }\r\n        });\r\n        \r\n        showScreen('welcome-screen');\r\n    }\r\n    \r\n    // Completely reset the arcade session\r\n    resetArcadeSession();\r\n    \r\n    // Unsubscribe from the arcade channel\r\n    if (window.arcadeChannel) {\r\n        window.arcadeChannel.unsubscribe();\r\n        window.arcadeChannel = null;\r\n    }\r\n}\r\n\r\nfunction resetArcadeSession() {\r\n    const newOtp = Math.floor(1000 + Math.random() * 9000).toString();\r\n    \r\n    // Clear timeouts and intervals\r\n    if (window.arcadeTimeouts) {\r\n        window.arcadeTimeouts.forEach(timeout => clearTimeout(timeout));\r\n    }\r\n    if (window.arcadeIntervals) {\r\n        window.arcadeIntervals.forEach(interval => clearInterval(interval));\r\n    }\r\n    if (window.celebrationConfettiInterval) {\r\n        clearInterval(window.celebrationConfettiInterval);\r\n    }\r\n    if (window.playerConfettiInterval) {\r\n        clearInterval(window.playerConfettiInterval);\r\n    }\r\n    \r\n    // Reset session state completely\r\n    currentArcadeSession = {\r\n        eventId: null,\r\n        otp: newOtp,\r\n        wordPool: [],\r\n        participants: [],\r\n        teacherId: currentUser?.id || null,\r\n        wordGoal: 50,\r\n        state: \"pre-start\",\r\n        completedPlayers: [],\r\n        playerRank: null,\r\n        winnerScreenShown: false,\r\n        startTime: null,\r\n        endTime: null,\r\n        podiumRanks: {},\r\n        isInitialized: false,\r\n        initialCoins: 0,\r\n        playerName: null,\r\n        joinEventSent: false,\r\n        celebrationTriggered: false\r\n    };\r\n    \r\n    lastLeaderboardUpdate = Date.now();\r\n    \r\n    // Reset arcadeChannel subscription\r\n    if (window.arcadeChannel) {\r\n        window.arcadeChannel.unsubscribe();\r\n        window.arcadeChannel = null;\r\n    }\r\n    \r\n    // Reset UI elements\r\n    const leaderboard = document.getElementById('arcade-leaderboard');\r\n    if (leaderboard) {\r\n        const header = leaderboard.querySelector('.leaderboard-header');\r\n        leaderboard.innerHTML = header ? header.outerHTML : '';\r\n    }\r\n    \r\n    // Update OTP display\r\n    const otpDisplay = document.getElementById('moderatorOtp');\r\n    if (otpDisplay) {\r\n        otpDisplay.textContent = newOtp;\r\n    }\r\n    \r\n    // Update QR code\r\n    const qrCode = document.getElementById('qrCode');\r\n    if (qrCode) {\r\n        const url = `${window.location.origin + window.location.pathname}#join=${newOtp}`;\r\n        new QRious({\r\n            element: qrCode,\r\n            value: url,\r\n            size: 200,\r\n            backgroundAlpha: 1,\r\n            foreground: \"#16213e\",\r\n            background: \"#ffffff\",\r\n            level: \"H\"\r\n        });\r\n    }\r\n    \r\n    // Clean up any database state if needed\r\n    if (currentArcadeSession.eventId) {\r\n        supabaseClient.from('arcade_events')\r\n            .update({ status: 'waiting', game_state: {}, otp: newOtp })\r\n            .eq('id', currentArcadeSession.eventId)\r\n            .then(({ error }) => {\r\n                if (error) console.error('Failed to reset arcade event:', error);\r\n            });\r\n        \r\n        supabaseClient.from('arcade_participants')\r\n            .delete()\r\n            .eq('event_id', currentArcadeSession.eventId)\r\n            .then(({ error }) => {\r\n                if (error) console.error('Failed to clear participants:', error);\r\n            });\r\n    }\r\n    \r\n    // Reset End Arcade button\r\n    const endArcadeButton = document.querySelector('.end-arcade-button');\r\n    if (endArcadeButton) {\r\n        endArcadeButton.classList.remove('visible');\r\n    }\r\n    \r\n    // Remove any remaining UI elements from celebrations\r\n    document.querySelectorAll('.celebration-overlay, .home-button-container').forEach(el => el.remove());\r\n    \r\n    // Reset current game state\r\n    currentGame = {\r\n        currentIndex: 0,\r\n        correctStreak: 0,\r\n        wrongStreak: 0,\r\n        words: [],\r\n        wordsCompleted: 0,\r\n        coins: 0,\r\n        lastBroadcast: Date.now()\r\n    };\r\n    \r\n    // Reset any stage checkboxes in the arcade modal\r\n    document.querySelectorAll('.stage-checkboxes input[type=\"checkbox\"]').forEach(checkbox => {\r\n        checkbox.checked = false;\r\n    });\r\n    \r\n    // Reset word goal input\r\n    const wordGoalInput = document.getElementById('wordGoalInput');\r\n    const wordGoalSlider = document.getElementById('wordGoalSlider');\r\n    const wordGoalDisplay = document.getElementById('wordGoalDisplay');\r\n    \r\n    if (wordGoalInput) wordGoalInput.value = \"50\";\r\n    if (wordGoalSlider) wordGoalSlider.value = \"50\";\r\n    if (wordGoalDisplay) wordGoalDisplay.textContent = \"50\";\r\n    \r\n    console.log('Arcade session completely reset with new OTP:', newOtp);\r\n}\r\n\r\nfunction finishCelebrationAndGoHome() {\r\n  // Clean up UI elements\r\n  document.querySelector(\".celebration-overlay\")?.remove();\r\n  document.querySelector(\".home-button-container\")?.remove();\r\n  \r\n  if (window.celebrationConfettiInterval) {\r\n    clearInterval(window.celebrationConfettiInterval);\r\n  }\r\n  \r\n  document.querySelectorAll(\".confetti, .celebration-emoji, .winner-entry.celebrating\").forEach(\r\n    element => element.remove()\r\n  );\r\n  \r\n  // Clean up monitoring and reset session\r\n  cleanupModeratorInactivityMonitoring();\r\n  resetArcadeSession();\r\n  \r\n  // Return to welcome screen\r\n  showScreen(\"welcome-screen\");\r\n}\r\n\r\nfunction handleGameEnd(payload) {\r\n    console.log('Game End Payload:', payload);\r\n\r\n    // If no payload, exit\r\n    if (!payload) return;\r\n    \r\n    // If forcibly ended by moderator, just go back to welcome\r\n    if (payload.forcedEnd) {\r\n        showScreen('welcome-screen');\r\n        return;\r\n    }\r\n\r\n    // If this is the moderator, show victory screen with podium players\r\n    if (currentUser?.id === payload.teacherId) {\r\n        const podiumPlayers = payload.podiumPlayers || [];\r\n        showModeratorVictoryScreen(podiumPlayers);\r\n        return;\r\n    }\r\n\r\n    // For players: show appropriate completion screen based on their status\r\n    showFinalResultsForPlayer(payload.podiumPlayers || []);\r\n}\r\n\r\nfunction hidePersonalVictoryScreen() {\r\n    const modal = document.querySelector('.arcade-completion-modal');\r\n    if (modal) {\r\n        modal.classList.remove('show');\r\n        setTimeout(() => {\r\n            document.body.removeChild(modal);\r\n        }, 300);\r\n    }\r\n}\r\n\r\nasync function endArcadeForAll() {\r\n    currentArcadeSession.state = \"ended\";\r\n    currentArcadeSession.endTime = Date.now();\r\n    \r\n    // Create array of podium players based on completion order\r\n    const podiumPlayers = [];\r\n    \r\n    // Use the original ranking from podiumRanks if available\r\n    if (currentArcadeSession.podiumRanks) {\r\n        Object.entries(currentArcadeSession.podiumRanks).forEach(([username, rankInfo]) => {\r\n            const player = currentArcadeSession.participants.find(p => p.username === username);\r\n            if (player) {\r\n                podiumPlayers.push({\r\n                    username: player.username, \r\n                    wordsCompleted: player.wordsCompleted || 0,\r\n                    coins: player.coins || 0,\r\n                    rank: rankInfo.rank,\r\n                    completionTime: rankInfo.completionTime\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Sort by rank (not by words or coins)\r\n        podiumPlayers.sort((a, b) => a.rank - b.rank);\r\n    }\r\n    \r\n    // Fill up to 3 places if needed\r\n    while (podiumPlayers.length < 3) {\r\n        const rank = podiumPlayers.length + 1;\r\n        podiumPlayers.push({\r\n            username: \"---\",\r\n            wordsCompleted: 0,\r\n            coins: 0,\r\n            rank: rank\r\n        });\r\n    }\r\n    \r\n    console.log(\"Final podium players:\", podiumPlayers.map(p => ({\r\n        username: p.username, \r\n        rank: p.rank, \r\n        wordsCompleted: p.wordsCompleted\r\n    })));\r\n    \r\n    await window.arcadeChannel.send({\r\n        type: \"broadcast\",\r\n        event: \"game_end\",\r\n        payload: {\r\n            state: \"ended\",\r\n            podiumPlayers: podiumPlayers,\r\n            teacherId: currentArcadeSession.teacherId,\r\n            duration: currentArcadeSession.endTime - (currentArcadeSession.startTime || currentArcadeSession.endTime)\r\n        }\r\n    });\r\n    \r\n    if (currentUser?.id === currentArcadeSession.teacherId) {\r\n        showModeratorVictoryScreen(podiumPlayers);\r\n    } else {\r\n        showFinalResultsForPlayer(podiumPlayers);\r\n    }\r\n}\r\n\r\nfunction showFinalResults(players) {\r\n    // Different behavior for moderator vs player\r\n    if (currentUser?.id === currentArcadeSession.teacherId) {\r\n        showModeratorVictoryScreen(players);\r\n    } else {\r\n        showPlayerFinalResults(players);\r\n    }\r\n}\r\n\r\nfunction getOrdinal(n) {\r\n    const s = [\"th\", \"st\", \"nd\", \"rd\"];\r\n    const v = n % 100;\r\n    return n + (s[(v - 20) % 10] || s[v] || s[0]);\r\n}\r\n\r\n// Add this to moderator screen initialization\r\nfunction initializeModeratorIdleDetection() {\r\n    let lastUpdateTimestamp = Date.now();\r\n    let idleTimerActive = false;\r\n    let idleCountdown = null;\r\n    let overlayElement = null;\r\n    \r\n    // Function to update the timestamp whenever leaderboard changes\r\n    function updateTimestamp() {\r\n        lastUpdateTimestamp = Date.now();\r\n        \r\n        // If idle timer was active, clear it\r\n        if (idleTimerActive) {\r\n            clearIdleTimer();\r\n        }\r\n    }\r\n    \r\n    // Monitor progress updates and player movements\r\n    function setupActivityMonitoring() {\r\n        // Watch for DOM changes in the leaderboard\r\n        const leaderboardObserver = new MutationObserver(() => {\r\n            updateTimestamp();\r\n        });\r\n        \r\n        const leaderboard = document.getElementById('arcade-leaderboard');\r\n        if (leaderboard) {\r\n            leaderboardObserver.observe(leaderboard, { \r\n                childList: true, \r\n                subtree: true,\r\n                attributes: true,\r\n                characterData: true\r\n            });\r\n        }\r\n        \r\n        // Also update timestamp when new progress events come in\r\n        window.arcadeChannel.on('broadcast', { event: 'progress_update' }, () => {\r\n            updateTimestamp();\r\n        });\r\n    }\r\n    \r\n    // Check for inactivity periodically\r\n    const idleCheckInterval = setInterval(() => {\r\n        // Only run if game is active and this is the moderator\r\n        if (currentArcadeSession.state !== 'active' || \r\n            currentUser?.id !== currentArcadeSession.teacherId) {\r\n            clearInterval(idleCheckInterval);\r\n            return;\r\n        }\r\n        \r\n        const currentTime = Date.now();\r\n        const timeSinceLastUpdate = currentTime - lastUpdateTimestamp;\r\n        \r\n        // If no updates for 5 seconds and timer not already active, start idle timer\r\n        if (timeSinceLastUpdate > 5000 && !idleTimerActive) {\r\n            startIdleTimer();\r\n        }\r\n    }, 1000);\r\n    \r\n    // Create and start the visible countdown timer\r\n    function startIdleTimer() {\r\n        idleTimerActive = true;\r\n        let secondsRemaining = 5;\r\n        \r\n        // Create overlay with timer\r\n        overlayElement = document.createElement('div');\r\n        overlayElement.className = 'idle-timer-overlay';\r\n        overlayElement.style.cssText = `\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.7);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            z-index: 2000;\r\n            pointer-events: none;\r\n        `;\r\n        \r\n        const timerContent = document.createElement('div');\r\n        timerContent.style.cssText = `\r\n            background: var(--primary-dark);\r\n            padding: 2rem;\r\n            border-radius: 20px;\r\n            border: 2px solid var(--gold);\r\n            text-align: center;\r\n        `;\r\n        \r\n        const timerTitle = document.createElement('h2');\r\n        timerTitle.textContent = 'Game Inactive';\r\n        timerTitle.style.color = 'var(--gold)';\r\n        \r\n        const timerDisplay = document.createElement('div');\r\n        timerDisplay.className = 'countdown-timer';\r\n        timerDisplay.textContent = secondsRemaining;\r\n        timerDisplay.style.cssText = `\r\n            font-size: 5rem;\r\n            color: var(--gold);\r\n            margin: 1rem 0;\r\n            font-weight: bold;\r\n        `;\r\n        \r\n        const timerMessage = document.createElement('p');\r\n        timerMessage.textContent = 'No activity detected. Returning to welcome screen...';\r\n        \r\n        timerContent.appendChild(timerTitle);\r\n        timerContent.appendChild(timerDisplay);\r\n        timerContent.appendChild(timerMessage);\r\n        overlayElement.appendChild(timerContent);\r\n        document.body.appendChild(overlayElement);\r\n        \r\n        // Start countdown\r\n        idleCountdown = setInterval(() => {\r\n            secondsRemaining--;\r\n            timerDisplay.textContent = secondsRemaining;\r\n            \r\n            if (secondsRemaining <= 0) {\r\n                handleIdleTimeout();\r\n            }\r\n        }, 1000);\r\n    }\r\n    \r\n    // Clear the idle timer\r\n    function clearIdleTimer() {\r\n        idleTimerActive = false;\r\n        \r\n        if (idleCountdown) {\r\n            clearInterval(idleCountdown);\r\n            idleCountdown = null;\r\n        }\r\n        \r\n        if (overlayElement) {\r\n            document.body.removeChild(overlayElement);\r\n            overlayElement = null;\r\n        }\r\n    }\r\n    \r\n    // Handle what happens when timer reaches zero\r\n    function handleIdleTimeout() {\r\n        clearIdleTimer();\r\n        \r\n        // Count completed players\r\n        const completedPlayers = currentArcadeSession.participants.filter(\r\n            p => p.wordsCompleted >= currentArcadeSession.wordGoal\r\n        );\r\n        \r\n        // Case 2: If there are three podium winners, show victory screen\r\n        if (completedPlayers.length >= 3) {\r\n            // Sort players by words completed and coins\r\n            const topPlayers = [...completedPlayers]\r\n                .sort((a, b) => {\r\n                    if (b.wordsCompleted !== a.wordsCompleted) {\r\n                        return b.wordsCompleted - a.wordsCompleted;\r\n                    }\r\n                    return b.coins - a.coins;\r\n                })\r\n                .slice(0, 3)\r\n                .map((player, index) => ({\r\n                    ...player,\r\n                    rank: index + 1\r\n                }));\r\n                \r\n            // Mark game as ended\r\n            currentArcadeSession.state = 'ended';\r\n            \r\n            // Show victory screen\r\n            showModeratorVictoryScreen(topPlayers);\r\n        } \r\n        // Case 1: Otherwise, return to welcome screen\r\n        else {\r\n            showScreen('welcome-screen');\r\n        }\r\n    }\r\n    \r\n    // Start monitoring\r\n    setupActivityMonitoring();\r\n    \r\n    return {\r\n        clearIdleTimer,\r\n        idleCheckInterval\r\n    };\r\n}\r\n\r\n// Global variables for inactivity tracking\r\nlet moderatorActivityTimer = null;\r\nlet countdownTimer = null;\r\nlet lastLeaderboardUpdate = Date.now();\r\nlet isCountingDown = false;\r\n\r\nfunction initializeModeratorInactivityTimer() {\r\n    // Clear any existing timers\r\n    if (moderatorActivityTimer) {\r\n        clearTimeout(moderatorActivityTimer);\r\n    }\r\n    \r\n    if (countdownTimer) {\r\n        clearInterval(countdownTimer);\r\n    }\r\n    \r\n    // Reset timer state\r\n    lastLeaderboardUpdate = Date.now();\r\n    isCountingDown = false;\r\n    \r\n    // Create inactivity overlay\r\n    createInactivityOverlay();\r\n    \r\n    // Start monitoring for activity\r\n    startInactivityMonitoring();\r\n    \r\n    // Track leaderboard updates\r\n    trackLeaderboardUpdates();\r\n    \r\n    // Make sure buttons are in correct state based on session initialization\r\n    const initializeButton = document.querySelector('.initialize-button');\r\n    const endArcadeButton = document.querySelector('.end-arcade-button');\r\n    \r\n    if (currentArcadeSession.isInitialized && currentArcadeSession.state === 'active') {\r\n        if (initializeButton) initializeButton.style.display = 'none';\r\n        if (endArcadeButton) endArcadeButton.classList.add('visible');\r\n    } else {\r\n        if (initializeButton) initializeButton.style.display = 'block';\r\n        if (endArcadeButton) endArcadeButton.classList.remove('visible');\r\n    }\r\n}\r\n\r\nfunction createInactivityOverlay() {\r\n    // Remove any existing overlay\r\n    const existingOverlay = document.querySelector('.inactivity-overlay');\r\n    if (existingOverlay) existingOverlay.remove();\r\n    \r\n    // Create new overlay\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'inactivity-overlay';\r\n    overlay.innerHTML = `\r\n        <div class=\"countdown-timer\">5</div>\r\n        <div class=\"inactivity-message\">No activity detected. Redirecting...</div>\r\n        <div class=\"countdown-progress\">\r\n            <div class=\"countdown-bar\"></div>\r\n        </div>\r\n        <button class=\"countdown-cancel\">Cancel</button>\r\n    `;\r\n    \r\n    // Add event handler for cancel button\r\n    overlay.querySelector('.countdown-cancel').addEventListener('click', cancelCountdown);\r\n    \r\n    // Append to body\r\n    document.body.appendChild(overlay);\r\n}\r\n\r\nfunction startInactivityMonitoring() {\r\n    // Reset the timer whenever there's activity\r\n    const moderatorScreen = document.getElementById('moderator-screen');\r\n    \r\n    // Activity events to monitor\r\n    const events = ['mousemove', 'mousedown', 'keypress', 'scroll', 'touchstart'];\r\n    \r\n    // Add all event listeners\r\n    events.forEach(event => {\r\n        moderatorScreen.addEventListener(event, resetInactivityTimer);\r\n    });\r\n    \r\n    // Start the initial timer\r\n    resetInactivityTimer();\r\n}\r\n\r\nfunction resetInactivityTimer() {\r\n    // If already counting down, don't reset\r\n    if (isCountingDown) return;\r\n    \r\n    // Clear existing timer\r\n    if (moderatorActivityTimer) clearTimeout(moderatorActivityTimer);\r\n    \r\n    // Set new timer - 3 seconds of inactivity\r\n    moderatorActivityTimer = setTimeout(() => {\r\n        // Check if leaderboard has been updated recently\r\n        const timeSinceLastUpdate = Date.now() - lastLeaderboardUpdate;\r\n        \r\n        // If no updates for 5 seconds, start countdown\r\n        if (timeSinceLastUpdate > 5000) {\r\n            startCountdown();\r\n        }\r\n    }, 3000);\r\n}\r\n\r\nfunction trackLeaderboardUpdates() {\r\n    // Get leaderboard element\r\n    const leaderboard = document.getElementById('arcade-leaderboard');\r\n    if (!leaderboard) return;\r\n    \r\n    // Create mutation observer to detect changes\r\n    const observer = new MutationObserver(() => {\r\n        lastLeaderboardUpdate = Date.now();\r\n        \r\n        // If countdown is active, cancel it since we have activity\r\n        if (isCountingDown) {\r\n            cancelCountdown();\r\n        }\r\n    });\r\n    \r\n    // Start observing\r\n    observer.observe(leaderboard, { \r\n        childList: true, \r\n        subtree: true, \r\n        attributes: true,\r\n        characterData: true\r\n    });\r\n}\r\n\r\nfunction startCountdown() {\r\n    isCountingDown = true;\r\n    \r\n    // Show the overlay\r\n    const overlay = document.querySelector('.inactivity-overlay');\r\n    if (overlay) overlay.classList.add('visible');\r\n    \r\n    // Initialize countdown\r\n    let secondsLeft = 5;\r\n    const timerDisplay = overlay.querySelector('.countdown-timer');\r\n    const progressBar = overlay.querySelector('.countdown-bar');\r\n    \r\n    // Update initial display\r\n    timerDisplay.textContent = secondsLeft;\r\n    progressBar.style.transform = 'scaleX(1)';\r\n    \r\n    // Start countdown\r\n    countdownTimer = setInterval(() => {\r\n        secondsLeft--;\r\n        \r\n        // Update display\r\n        timerDisplay.textContent = secondsLeft;\r\n        progressBar.style.transform = `scaleX(${secondsLeft / 5})`;\r\n        \r\n        // Check if countdown is complete\r\n        if (secondsLeft <= 0) {\r\n            clearInterval(countdownTimer);\r\n            handleCountdownComplete();\r\n        }\r\n    }, 1000);\r\n}\r\n\r\nfunction cancelCountdown() {\r\n    // Hide overlay\r\n    const overlay = document.querySelector('.inactivity-overlay');\r\n    if (overlay) overlay.classList.remove('visible');\r\n    \r\n    // Reset state\r\n    isCountingDown = false;\r\n    if (countdownTimer) clearInterval(countdownTimer);\r\n    \r\n    // Restart inactivity monitoring\r\n    resetInactivityTimer();\r\n}\r\n\r\nfunction handleCountdownComplete() {\r\n    // Check if we have podium winners\r\n    const hasPodiumWinners = currentArcadeSession.completedPlayers && \r\n                             currentArcadeSession.completedPlayers.length >= 3;\r\n    \r\n    if (hasPodiumWinners) {\r\n        // Extract podium players\r\n        const podiumPlayers = [];\r\n        \r\n        if (currentArcadeSession.podiumRanks) {\r\n            // Get players by ranks\r\n            Object.entries(currentArcadeSession.podiumRanks).forEach(([username, data]) => {\r\n                const playerData = currentArcadeSession.participants.find(p => p.username === username);\r\n                if (playerData) {\r\n                    podiumPlayers.push({\r\n                        username: playerData.username,\r\n                        wordsCompleted: playerData.wordsCompleted || 0,\r\n                        coins: playerData.coins || 0,\r\n                        rank: data.rank\r\n                    });\r\n                }\r\n            });\r\n            \r\n            // Sort by rank\r\n            podiumPlayers.sort((a, b) => a.rank - b.rank);\r\n        } else {\r\n            // No explicit ranks, sort by words completed\r\n            const sortedPlayers = [...currentArcadeSession.participants]\r\n                .sort((a, b) => b.wordsCompleted - a.wordsCompleted)\r\n                .slice(0, 3);\r\n                \r\n            // Assign ranks\r\n            sortedPlayers.forEach((player, index) => {\r\n                podiumPlayers.push({\r\n                    ...player,\r\n                    rank: index + 1\r\n                });\r\n            });\r\n        }\r\n        \r\n        // Show victory screen\r\n        showModeratorVictoryScreen(podiumPlayers);\r\n    } else {\r\n        // No winners yet, just go back to welcome screen\r\n        showScreen('welcome-screen');\r\n    }\r\n}\r\n\r\n// Variables specific to moderator screen\r\nconst moderatorInactivity = {\r\n    activityTimer: null,\r\n    countdownTimer: null,\r\n    lastLeaderboardUpdate: Date.now(),\r\n    isCountingDown: false,\r\n    isInitialized: false,\r\n    isGameActive: false\r\n};\r\n\r\nfunction initializeModeratorInactivityTimer() {\r\n    // Only proceed if we're on the moderator screen and game has been initialized\r\n    if (!isModeratorScreenActive() || !currentArcadeSession.isInitialized) {\r\n        return;\r\n    }\r\n    \r\n    // Set game as active\r\n    moderatorInactivity.isGameActive = true;\r\n    \r\n    // Clear any existing timers\r\n    clearModeratorTimers();\r\n    \r\n    // Reset state\r\n    moderatorInactivity.lastLeaderboardUpdate = Date.now();\r\n    moderatorInactivity.isCountingDown = false;\r\n    moderatorInactivity.isInitialized = true;\r\n    \r\n    // Create overlay if it doesn't exist\r\n    createModeratorInactivityOverlay();\r\n    \r\n    // Start monitoring for inactivity\r\n    startModeratorInactivityMonitoring();\r\n    \r\n    // Start leaderboard update tracking\r\n    trackModeratorLeaderboardUpdates();\r\n    \r\n    console.log('Moderator inactivity timer initialized');\r\n}\r\n\r\nfunction isModeratorScreenActive() {\r\n    const moderatorScreen = document.getElementById('moderator-screen');\r\n    return moderatorScreen && moderatorScreen.classList.contains('visible');\r\n}\r\n\r\nfunction clearModeratorTimers() {\r\n    if (moderatorInactivity.activityTimer) {\r\n        clearTimeout(moderatorInactivity.activityTimer);\r\n        moderatorInactivity.activityTimer = null;\r\n    }\r\n    if (moderatorInactivity.countdownTimer) {\r\n        clearInterval(moderatorInactivity.countdownTimer);\r\n        moderatorInactivity.countdownTimer = null;\r\n    }\r\n}\r\n\r\nfunction createModeratorInactivityOverlay() {\r\n    // Remove any existing overlay\r\n    const existingOverlay = document.querySelector('.moderator-inactivity-overlay');\r\n    if (existingOverlay) existingOverlay.remove();\r\n    \r\n    // Create new overlay\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'moderator-inactivity-overlay';\r\n    overlay.innerHTML = `\r\n        <div class=\"moderator-countdown-timer\">5</div>\r\n        <div class=\"moderator-inactivity-message\">No leaderboard activity detected. Redirecting...</div>\r\n        <div class=\"moderator-countdown-progress\">\r\n            <div class=\"moderator-countdown-bar\"></div>\r\n        </div>\r\n        <button class=\"moderator-countdown-cancel\">Cancel</button>\r\n    `;\r\n    \r\n    // Add event handler for cancel button\r\n    overlay.querySelector('.moderator-countdown-cancel').addEventListener('click', cancelModeratorCountdown);\r\n    \r\n    // Append to moderator screen specifically\r\n    const moderatorScreen = document.getElementById('moderator-screen');\r\n    if (moderatorScreen) {\r\n        moderatorScreen.appendChild(overlay);\r\n    }\r\n}\r\n\r\nfunction startModeratorInactivityMonitoring() {\r\n    const moderatorScreen = document.getElementById('moderator-screen');\r\n    if (!moderatorScreen) return;\r\n    \r\n    // Activity events to monitor (only on moderator screen)\r\n    const events = ['mousemove', 'mousedown', 'keypress', 'scroll', 'touchstart'];\r\n    \r\n    // Add all event listeners\r\n    events.forEach(event => {\r\n        moderatorScreen.addEventListener(event, resetModeratorInactivityTimer);\r\n    });\r\n    \r\n    // Add screen change listener\r\n    document.addEventListener('visibilitychange', () => {\r\n        if (document.hidden || !isModeratorScreenActive()) {\r\n            // Stop monitoring when page is hidden or moderator screen is not active\r\n            clearModeratorTimers();\r\n        } else if (moderatorInactivity.isGameActive && isModeratorScreenActive()) {\r\n            // Restart when returning to visible state and on moderator screen\r\n            resetModeratorInactivityTimer();\r\n        }\r\n    });\r\n    \r\n    // Start the initial timer\r\n    resetModeratorInactivityTimer();\r\n}\r\n\r\nfunction resetModeratorInactivityTimer() {\r\n    // Only proceed if on moderator screen, game is active, and not already counting down\r\n    if (!isModeratorScreenActive() || !moderatorInactivity.isGameActive || moderatorInactivity.isCountingDown) {\r\n        return;\r\n    }\r\n    \r\n    // Clear existing timer\r\n    if (moderatorInactivity.activityTimer) {\r\n        clearTimeout(moderatorInactivity.activityTimer);\r\n    }\r\n    \r\n    // Set new timer - 3 seconds of inactivity\r\n    moderatorInactivity.activityTimer = setTimeout(() => {\r\n        // Check if leaderboard has been updated recently\r\n        const timeSinceLastUpdate = Date.now() - moderatorInactivity.lastLeaderboardUpdate;\r\n        \r\n        // If no updates for 5 seconds, start countdown\r\n        if (timeSinceLastUpdate > 5000 && isModeratorScreenActive()) {\r\n            startModeratorCountdown();\r\n        }\r\n    }, 3000);\r\n}\r\n\r\nfunction trackModeratorLeaderboardUpdates() {\r\n    // Get leaderboard element\r\n    const leaderboard = document.getElementById('arcade-leaderboard');\r\n    if (!leaderboard) return;\r\n    \r\n    // Create mutation observer to detect changes\r\n    const observer = new MutationObserver(() => {\r\n        // Only track updates if moderator screen is active and game is initialized\r\n        if (isModeratorScreenActive() && moderatorInactivity.isGameActive) {\r\n            moderatorInactivity.lastLeaderboardUpdate = Date.now();\r\n            \r\n            // If countdown is active, cancel it since we have activity\r\n            if (moderatorInactivity.isCountingDown) {\r\n                cancelModeratorCountdown();\r\n            }\r\n        }\r\n    });\r\n    \r\n    // Start observing\r\n    observer.observe(leaderboard, { \r\n        childList: true, \r\n        subtree: true, \r\n        attributes: true,\r\n        characterData: true\r\n    });\r\n}\r\n\r\nfunction startModeratorCountdown() {\r\n    // Only proceed if on moderator screen and game is active\r\n    if (!isModeratorScreenActive() || !moderatorInactivity.isGameActive) {\r\n        return;\r\n    }\r\n    \r\n    moderatorInactivity.isCountingDown = true;\r\n    \r\n    // Show the overlay\r\n    const overlay = document.querySelector('.moderator-inactivity-overlay');\r\n    if (overlay) overlay.classList.add('visible');\r\n    \r\n    // Initialize countdown\r\n    let secondsLeft = 5;\r\n    const timerDisplay = overlay.querySelector('.moderator-countdown-timer');\r\n    const progressBar = overlay.querySelector('.moderator-countdown-bar');\r\n    \r\n    // Update initial display\r\n    timerDisplay.textContent = secondsLeft;\r\n    progressBar.style.transform = 'scaleX(1)';\r\n    \r\n    // Start countdown\r\n    moderatorInactivity.countdownTimer = setInterval(() => {\r\n        // Stop if we're no longer on the moderator screen\r\n        if (!isModeratorScreenActive()) {\r\n            cancelModeratorCountdown();\r\n            return;\r\n        }\r\n        \r\n        secondsLeft--;\r\n        \r\n        // Update display\r\n        timerDisplay.textContent = secondsLeft;\r\n        progressBar.style.transform = `scaleX(${secondsLeft / 5})`;\r\n        \r\n        // Check if countdown is complete\r\n        if (secondsLeft <= 0) {\r\n            clearInterval(moderatorInactivity.countdownTimer);\r\n            handleModeratorCountdownComplete();\r\n        }\r\n    }, 1000);\r\n}\r\n\r\nfunction cancelModeratorCountdown() {\r\n    // Hide overlay\r\n    const overlay = document.querySelector('.moderator-inactivity-overlay');\r\n    if (overlay) overlay.classList.remove('visible');\r\n    \r\n    // Reset state\r\n    moderatorInactivity.isCountingDown = false;\r\n    if (moderatorInactivity.countdownTimer) {\r\n        clearInterval(moderatorInactivity.countdownTimer);\r\n        moderatorInactivity.countdownTimer = null;\r\n    }\r\n    \r\n    // Restart inactivity monitoring if still on moderator screen\r\n    if (isModeratorScreenActive() && moderatorInactivity.isGameActive) {\r\n        resetModeratorInactivityTimer();\r\n    }\r\n}\r\n\r\nfunction handleModeratorCountdownComplete() {\r\n   // Skip if celebration already triggered\r\n   if (currentArcadeSession.celebrationTriggered) {\r\n       return;\r\n   }\r\n   \r\n   // Check if we have podium winners\r\n   const completedPlayers = currentArcadeSession.participants.filter(\r\n       p => p.wordsCompleted >= currentArcadeSession.wordGoal\r\n   );\r\n   \r\n   const hasPodiumWinners = completedPlayers && \r\n                            completedPlayers.length >= 3;\r\n   \r\n   currentArcadeSession.celebrationTriggered = true;\r\n   \r\n   if (hasPodiumWinners) {\r\n       // Extract podium players\r\n       const podiumPlayers = [];\r\n       \r\n       if (currentArcadeSession.podiumRanks) {\r\n           // Get players by ranks\r\n           Object.entries(currentArcadeSession.podiumRanks).forEach(([username, data]) => {\r\n               const playerData = currentArcadeSession.participants.find(p => p.username === username);\r\n               if (playerData) {\r\n                   podiumPlayers.push({\r\n                       username: playerData.username,\r\n                       wordsCompleted: playerData.wordsCompleted || 0,\r\n                       coins: playerData.coins || 0,\r\n                       rank: data.rank\r\n                   });\r\n               }\r\n           });\r\n           \r\n           // Sort by rank\r\n           podiumPlayers.sort((a, b) => a.rank - b.rank);\r\n       } else {\r\n           // No explicit ranks, sort by words completed\r\n           const sortedPlayers = [...currentArcadeSession.participants]\r\n               .sort((a, b) => b.wordsCompleted - a.wordsCompleted)\r\n               .slice(0, 3);\r\n               \r\n           // Assign ranks\r\n           sortedPlayers.forEach((player, index) => {\r\n               podiumPlayers.push({\r\n                   ...player,\r\n                   rank: index + 1\r\n               });\r\n           });\r\n       }\r\n       \r\n       // Show victory screen\r\n       startLeaderboardCelebration(podiumPlayers);\r\n   } else {\r\n       // No winners yet, just go back to welcome screen\r\n       showScreen('welcome-screen');\r\n   }\r\n}\r\n\r\nfunction cleanupModeratorInactivityMonitoring() {\r\n    // Clean up all timers and state\r\n    clearModeratorTimers();\r\n    moderatorInactivity.isGameActive = false;\r\n    moderatorInactivity.isInitialized = false;\r\n    moderatorInactivity.isCountingDown = false;\r\n    \r\n    // Remove overlay if exists\r\n    const overlay = document.querySelector('.moderator-inactivity-overlay');\r\n    if (overlay) overlay.remove();\r\n}\r\n\r\nfunction startLeaderboardCelebration(podiumPlayers) {\r\n    const celebrationOverlay = document.querySelector('.moderator-inactivity-overlay');\r\n    if (celebrationOverlay) {\r\n        celebrationOverlay.classList.remove('visible');\r\n    }\r\n    \r\n    // Create celebration overlay\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'celebration-overlay';\r\n    document.body.appendChild(overlay);\r\n    setTimeout(() => overlay.classList.add('visible'), 10);\r\n    \r\n    // Get leaderboard entries\r\n    const leaderboardEntries = document.getElementById('arcade-leaderboard').querySelectorAll('.leaderboard-entry');\r\n    const entryPositions = new Map();\r\n    \r\n    // Create winner elements based on strict podium ranks\r\n    podiumPlayers.forEach(player => {\r\n        leaderboardEntries.forEach(entry => {\r\n            const usernameEl = entry.querySelector('[data-username]');\r\n            if (!usernameEl) return;\r\n            \r\n            const username = usernameEl.dataset.username;\r\n            if (username === player.username) {\r\n                const rect = entry.getBoundingClientRect();\r\n                entryPositions.set(username, {\r\n                    left: rect.left,\r\n                    top: rect.top,\r\n                    width: rect.width,\r\n                    height: rect.height\r\n                });\r\n                \r\n                // Create winner entry\r\n                const winnerEntry = entry.cloneNode(true);\r\n                winnerEntry.classList.add('winner-entry', 'celebrating');\r\n                \r\n                // Add appropriate class based on rank (not position in array)\r\n                if (player.rank === 1) {\r\n                    winnerEntry.classList.add('first-place');\r\n                    const winnerLabel = document.createElement('div');\r\n                    winnerLabel.className = 'winner-label';\r\n                    winnerLabel.textContent = 'CHAMPION';\r\n                    winnerEntry.appendChild(winnerLabel);\r\n                    addWinnerEmojis(winnerEntry, ['👑', '🏆', '🌟'], player.rank);\r\n                } else if (player.rank === 2) {\r\n                    winnerEntry.classList.add('second-place');\r\n                    const winnerLabel = document.createElement('div');\r\n                    winnerLabel.className = 'winner-label';\r\n                    winnerLabel.textContent = 'RUNNER-UP';\r\n                    winnerEntry.appendChild(winnerLabel);\r\n                    addWinnerEmojis(winnerEntry, ['🥈', '✨'], player.rank);\r\n                } else if (player.rank === 3) {\r\n                    winnerEntry.classList.add('third-place');\r\n                    const winnerLabel = document.createElement('div');\r\n                    winnerLabel.className = 'winner-label';\r\n                    winnerLabel.textContent = 'BRONZE MEDAL';\r\n                    winnerEntry.appendChild(winnerLabel);\r\n                    addWinnerEmojis(winnerEntry, ['🥉', '🎉'], player.rank);\r\n                }\r\n                \r\n                // Position and style the winner entry\r\n                winnerEntry.style.position = 'fixed';\r\n                winnerEntry.style.left = `${rect.left}px`;\r\n                winnerEntry.style.top = `${rect.top}px`;\r\n                winnerEntry.style.width = `${rect.width}px`;\r\n                winnerEntry.style.height = `${rect.height}px`;\r\n                winnerEntry.style.zIndex = 103 - player.rank;\r\n                \r\n                // Add to the document\r\n                document.body.appendChild(winnerEntry);\r\n                setTimeout(() => {\r\n                    winnerEntry.classList.add('centered');\r\n                }, 50);\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Start celebration effects\r\n    setTimeout(() => {\r\n        startConfettiShower();\r\n        window.arcadeChannel.send({\r\n            type: 'broadcast',\r\n            event: 'celebration',\r\n            payload: {\r\n                winners: podiumPlayers.map(p => ({\r\n                    username: p.username,\r\n                    rank: p.rank,\r\n                    wordsCompleted: p.wordsCompleted,\r\n                    coins: p.coins\r\n                }))\r\n            }\r\n        });\r\n    }, 1500);\r\n    \r\n    // Add home button\r\n    const homeButton = document.createElement('div');\r\n    homeButton.className = 'home-button-container';\r\n    homeButton.innerHTML = `\r\n       <button class=\"start-button\" onclick=\"finishCelebrationAndGoHome()\">\r\n           Return to Home\r\n       </button>\r\n   `;\r\n    document.body.appendChild(homeButton);\r\n    setTimeout(() => homeButton.classList.add('visible'), 2500);\r\n}\r\n\r\nfunction safeUpdateWordsCompleted(newValue, username) {\r\n  if (!username) return false;\r\n  \r\n  const playerIndex = currentArcadeSession.participants.findIndex(p => p.username === username);\r\n  if (playerIndex === -1) return false;\r\n  \r\n  const player = currentArcadeSession.participants[playerIndex];\r\n  const currentValue = player.wordsCompleted || 0;\r\n  \r\n  // Only update if the new value is higher than current value\r\n  if (newValue < currentValue) {\r\n    console.warn(`Prevented progress reset for ${username}: ${currentValue} → ${newValue}`);\r\n    return false;\r\n  }\r\n  \r\n  player.wordsCompleted = newValue;\r\n  return true;\r\n}\r\n\r\nfunction addWinnerEmojis(element, emojis, rank) {\r\n    setTimeout(() => {\r\n        // Create fixed emojis that don't overlap with winner entries\r\n        emojis.forEach((emoji, index) => {\r\n            const emojiElement = document.createElement('div');\r\n            emojiElement.className = 'celebration-emoji';\r\n            emojiElement.textContent = emoji;\r\n            \r\n            // Position in fixed locations around the screen edges\r\n            let x, y, size;\r\n            const baseSize = 2.5;\r\n            \r\n            // Calculate offset to avoid overlap\r\n            if (rank === 1) {\r\n                // First place: top area\r\n                size = baseSize + 0.5;\r\n                if (index % 2 === 0) {\r\n                    // Left side\r\n                    x = 5 + (index * 3) + '%';\r\n                    y = 5 + (index * 2) + '%';\r\n                } else {\r\n                    // Right side\r\n                    x = 95 - (index * 3) + '%';\r\n                    y = 5 + (index * 2) + '%';\r\n                }\r\n            } else if (rank === 2) {\r\n                // Second place: sides\r\n                size = baseSize;\r\n                if (index % 2 === 0) {\r\n                    // Left side  \r\n                    x = 5 + '%';\r\n                    y = 40 + (index * 5) + '%';\r\n                } else {\r\n                    // Right side\r\n                    x = 95 + '%';\r\n                    y = 40 + (index * 5) + '%';\r\n                }\r\n            } else {\r\n                // Third place: bottom\r\n                size = baseSize - 0.5;\r\n                if (index % 2 === 0) {\r\n                    // Left bottom\r\n                    x = 15 + (index * 5) + '%';\r\n                    y = 90 + '%';\r\n                } else {\r\n                    // Right bottom\r\n                    x = 85 - (index * 5) + '%';\r\n                    y = 90 + '%';\r\n                }\r\n            }\r\n            \r\n            emojiElement.style.fontSize = `${size}rem`;\r\n            emojiElement.style.left = x;\r\n            emojiElement.style.top = y;\r\n            emojiElement.style.zIndex = 300;\r\n            emojiElement.style.animationDelay = `${1.8 + index * 0.3}s`;\r\n            \r\n            document.body.appendChild(emojiElement);\r\n        });\r\n    }, 1800);\r\n}\r\n\r\nfunction startConfettiShower() {\r\n    // Colors for confetti\r\n    const colors = [\r\n        '#FFD700', '#FF1493', '#00BFFF', '#7CFC00', '#FF4500', \r\n        '#9400D3', '#FF8C00', '#1E90FF', '#32CD32', '#FF69B4'\r\n    ];\r\n    \r\n    // Create initial confetti\r\n    createConfettiBatch();\r\n    \r\n    // Continue creating confetti\r\n    const confettiInterval = setInterval(createConfettiBatch, 800);\r\n    \r\n    // Store interval ID globally for cleanup\r\n    window.celebrationConfettiInterval = confettiInterval;\r\n    \r\n    // Function to create a batch of confetti\r\n    function createConfettiBatch() {\r\n        for (let i = 0; i < 60; i++) {\r\n            const confetti = document.createElement('div');\r\n            confetti.className = 'confetti';\r\n            \r\n            // Random properties\r\n            const size = 5 + Math.random() * 15;\r\n            const color = colors[Math.floor(Math.random() * colors.length)];\r\n            const left = Math.random() * 100;\r\n            const delay = Math.random() * 3;\r\n            const duration = 3 + Math.random() * 4;\r\n            const isSquare = Math.random() > 0.5;\r\n            \r\n            confetti.style.width = `${size}px`;\r\n            confetti.style.height = `${size}px`;\r\n            confetti.style.backgroundColor = color;\r\n            confetti.style.left = `${left}vw`;\r\n            confetti.style.animationDuration = `${duration}s`;\r\n            confetti.style.animationDelay = `${delay}s`;\r\n            confetti.style.borderRadius = isSquare ? '0' : '50%';\r\n            \r\n            document.body.appendChild(confetti);\r\n            \r\n            // Remove after animation\r\n            setTimeout(() => {\r\n                confetti.remove();\r\n            }, (duration + delay) * 1000);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// Move this handler into a function that will be called after channel initialization\r\nfunction setupCelebrationHandler() {\r\n    if (!window.arcadeChannel) return;\r\n    \r\n    window.arcadeChannel.on('broadcast', { event: 'celebration' }, ({ payload }) => {\r\n        if (!payload.winners) return;\r\n        \r\n        // Check if current player is one of the winners\r\n        if (currentArcadeSession.playerName) {\r\n            const winnerEntry = payload.winners.find(w => w.username === currentArcadeSession.playerName);\r\n            \r\n            if (winnerEntry) {\r\n                // Show personal victory celebration\r\n                showPersonalVictoryCelebration(winnerEntry.rank);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction showPersonalVictoryCelebration(rank) {\r\n    // Don't show if already celebrating\r\n    if (currentArcadeSession.winnerScreenShown) return;\r\n    currentArcadeSession.winnerScreenShown = true;\r\n    \r\n    // Create celebration screen\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'personal-victory-overlay';\r\n    overlay.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0,0,0,0.8);\r\n        z-index: 2000;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        opacity: 0;\r\n        transition: opacity 0.5s ease;\r\n    `;\r\n    \r\n    // Define content based on rank\r\n    const rankContent = {\r\n        1: {\r\n            title: \"🏆 CHAMPION! 🏆\",\r\n            message: \"Incredible! You've claimed the top spot!\",\r\n            emoji: \"👑\",\r\n            color: \"var(--gold)\"\r\n        },\r\n        2: {\r\n            title: \"🥈 RUNNER UP! 🥈\",\r\n            message: \"Amazing job! You've secured second place!\",\r\n            emoji: \"⭐\",\r\n            color: \"var(--silver)\"\r\n        },\r\n        3: {\r\n            title: \"🥉 BRONZE MEDALIST! 🥉\",\r\n            message: \"Well done! You've earned third place!\",\r\n            emoji: \"🌟\",\r\n            color: \"var(--bronze)\"\r\n        }\r\n    };\r\n    \r\n    const content = rankContent[rank] || {\r\n        title: \"GREAT PERFORMANCE!\",\r\n        message: \"You've completed the challenge!\",\r\n        emoji: \"🎉\",\r\n        color: \"var(--accent)\"\r\n    };\r\n    \r\n    overlay.innerHTML = `\r\n        <div style=\"font-size: 8rem; margin-bottom: 1rem;\">${content.emoji}</div>\r\n        <h1 style=\"color: ${content.color}; font-size: 3rem; margin-bottom: 1rem;\">${content.title}</h1>\r\n        <p style=\"font-size: 1.5rem; margin-bottom: 2rem; text-align: center; max-width: 80%;\">\r\n            ${content.message}\r\n        </p>\r\n        <div style=\"margin: 2rem 0; display: flex; gap: 2rem;\">\r\n            <div style=\"text-align: center;\">\r\n                <div style=\"font-size: 1.2rem; color: var(--text); opacity: 0.8;\">YOUR RANK</div>\r\n                <div style=\"font-size: 3rem; color: ${content.color};\">${rank}</div>\r\n            </div>\r\n            <div style=\"text-align: center;\">\r\n                <div style=\"font-size: 1.2rem; color: var(--text); opacity: 0.8;\">WORDS COMPLETED</div>\r\n                <div style=\"font-size: 3rem; color: var(--text);\">${currentGame.wordsCompleted || 0}</div>\r\n            </div>\r\n            <div style=\"text-align: center;\">\r\n                <div style=\"font-size: 1.2rem; color: var(--text); opacity: 0.8;\">COINS EARNED</div>\r\n                <div style=\"font-size: 3rem; color: var(--gold);\">${currentGame.coins || 0}</div>\r\n            </div>\r\n        </div>\r\n        <button class=\"start-button\" style=\"margin-top: 2rem; padding: 1rem 2rem;\" onclick=\"closePersonalVictory()\">\r\n            Continue\r\n        </button>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    \r\n    // Fade in\r\n    setTimeout(() => {\r\n        overlay.style.opacity = '1';\r\n        \r\n        // Start player confetti\r\n        startPlayerConfetti();\r\n    }, 100);\r\n}\r\n\r\nfunction startPlayerConfetti() {\r\n    // Colors for player confetti\r\n    const colors = [\r\n        '#FFD700', '#FF1493', '#00BFFF', '#7CFC00', '#FF4500',\r\n        '#9400D3', '#FF8C00', '#1E90FF', '#32CD32', '#FF69B4'\r\n    ];\r\n    \r\n    function createPlayerConfettiBatch() {\r\n        for (let i = 0; i < 40; i++) {\r\n            const confetti = document.createElement('div');\r\n            confetti.className = 'player-confetti';\r\n            confetti.style.cssText = `\r\n                position: fixed;\r\n                width: ${5 + Math.random() * 10}px;\r\n                height: ${5 + Math.random() * 10}px;\r\n                background-color: ${colors[Math.floor(Math.random() * colors.length)]};\r\n                top: -20px;\r\n                left: ${Math.random() * 100}vw;\r\n                opacity: 1;\r\n                z-index: 2001;\r\n                border-radius: ${Math.random() > 0.5 ? '0' : '50%'};\r\n                animation: confettiFall ${3 + Math.random() * 3}s linear ${Math.random() * 2}s forwards;\r\n            `;\r\n            \r\n            document.body.appendChild(confetti);\r\n            \r\n            // Remove after animation\r\n            setTimeout(() => {\r\n                confetti.remove();\r\n            }, 5000);\r\n        }\r\n    }\r\n    \r\n    // Initial batch\r\n    createPlayerConfettiBatch();\r\n    \r\n    // Continue creating batches\r\n    const interval = setInterval(createPlayerConfettiBatch, 1000);\r\n    \r\n    // Store for cleanup\r\n    window.playerConfettiInterval = interval;\r\n    \r\n    // Stop after 10 seconds\r\n    setTimeout(() => {\r\n        clearInterval(interval);\r\n    }, 10000);\r\n}\r\n\r\nfunction closePersonalVictory() {\r\n  if (window.playerConfettiInterval) {\r\n    clearInterval(window.playerConfettiInterval);\r\n  }\r\n  \r\n  document.querySelectorAll(\".player-confetti\").forEach(el => el.remove());\r\n  \r\n  const overlay = document.querySelector(\".personal-victory-overlay\");\r\n  if (overlay) {\r\n    overlay.style.opacity = \"0\";\r\n    setTimeout(() => {\r\n      overlay.remove();\r\n      // Call exitArcade to properly clean up\r\n      exitArcade();\r\n    }, 500);\r\n  }\r\n}\r\n\r\n\r\n// REPLACE: Just the handleCustomLevelCompletion function\r\nfunction handleCustomLevelCompletion() {\r\n    clearTimer();\r\n    \r\n    console.log(\"Custom level completion: Level \" + customGameState.currentLevel);\r\n    console.log(\"Words count in list: \" + customGameState.words.length);\r\n    \r\n    const isPerfect = currentGame.streakBonus && currentGame.correctAnswers === currentGame.words.length;\r\n    \r\n    if (isPerfect) {\r\n        const bonus = currentGame.firstAttempt ? 5 : 3;\r\n        CoinsManager.updateCoins(bonus).then(() => {\r\n            pulseCoins(bonus);\r\n            customGameState.wordsCompleted += currentGame.words.length;\r\n            customGameState.completedLevels.add(customGameState.currentLevel);\r\n            \r\n            // Calculate max level for this list size\r\n            const wordCount = customGameState.words.length;\r\n            const maxLevel = wordCount >= 12 ? 9 : \r\n                             wordCount >= 9 ? 6 : 3;\r\n            \r\n            console.log(\"Max level for this list: \" + maxLevel);\r\n            console.log(\"Current level: \" + customGameState.currentLevel);\r\n            \r\n            // CRITICAL FIX: If this is level 3 and we have 6 or fewer words, show completion\r\n            if (customGameState.currentLevel === 3 && wordCount <= 6) {\r\n                console.log(\"Level 3 completed with 6 or fewer words - showing completion\");\r\n                setTimeout(() => showCustomCompletionScreen(), 1500);\r\n                return;\r\n            }\r\n            \r\n            // CRITICAL FIX: If this is level 6 and we have 7-9 words, show completion\r\n            if (customGameState.currentLevel === 6 && wordCount <= 9) {\r\n                console.log(\"Level 6 completed with 7-9 words - showing completion\");\r\n                setTimeout(() => showCustomCompletionScreen(), 1500);\r\n                return;\r\n            }\r\n            \r\n            // CRITICAL FIX: If this is level 9 and we have 10+ words, show completion\r\n            if (customGameState.currentLevel === 9 && wordCount >= 10) {\r\n                console.log(\"Level 9 completed with 10+ words - showing completion\");\r\n                setTimeout(() => showCustomCompletionScreen(), 1500);\r\n                return;\r\n            }\r\n            \r\n            // CRITICAL FIX: If this is the max level for any list size, show completion\r\n            if (customGameState.currentLevel >= maxLevel) {\r\n                console.log(\"Max level reached - showing completion\");\r\n                setTimeout(() => showCustomCompletionScreen(), 1500);\r\n                return;\r\n            }\r\n            \r\n            const nextLevel = customGameState.currentLevel + 1;\r\n            const nextLevelData = customGameState.getWordsForLevel(nextLevel);\r\n            \r\n            const screenRect = document.getElementById('question-screen').getBoundingClientRect();\r\n            createParticles(screenRect.left + screenRect.width / 2, screenRect.top + screenRect.height / 2);\r\n            \r\n            if (!nextLevelData || nextLevelData.words.length === 0) {\r\n                console.log(\"No valid data for next level - showing completion\");\r\n                setTimeout(() => showCustomCompletionScreen(), 1500);\r\n            } else {\r\n                console.log(\"Moving to next level: \" + nextLevel);\r\n                customGameState.currentLevel = nextLevel;\r\n                setTimeout(() => startCustomLevel(nextLevel), 1500);\r\n            }\r\n        });\r\n    } else {\r\n        // If not perfect, restart the same level\r\n        console.log(\"Level not completed perfectly - restarting level \" + customGameState.currentLevel);\r\n        setTimeout(() => startCustomLevel(customGameState.currentLevel), 1500);\r\n    }\r\n    \r\n    saveProgress();\r\n}\r\n\r\nfunction showCustomCompletionScreen() {\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'completion-overlay';\r\n    \r\n    const coinsEarned = gameState.coins - customGameState.startCoins;\r\n    \r\n    overlay.innerHTML = `\r\n        <div class=\"completion-content\">\r\n            <h2>Practice Complete!</h2>\r\n            <div class=\"completion-stats\">\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-book\"></i>\r\n                    <span>Words Practiced: ${customGameState.wordsCompleted}</span>\r\n                </div>\r\n                <div class=\"stat-item\">\r\n                    <i class=\"fas fa-coins\"></i>\r\n                    <span>Coins Earned: ${coinsEarned}</span>\r\n                </div>\r\n            </div>\r\n            <button onclick=\"exitCustomPractice()\" class=\"victory-button\">\r\n                Continue\r\n            </button>\r\n        </div>\r\n    `;\r\n    document.body.appendChild(overlay);\r\n}\r\n\r\n\r\nasync function handleCustomPracticeAnswer(e, t = false) {\r\n  if (e) {\r\n    // Increment index after correct answer\r\n    currentGame.currentIndex++;\r\n    \r\n    if (!t) {\r\n      let coinReward = 0;\r\n      const timeBonus = awardTimeBonus();\r\n      if (timeBonus > 0) {\r\n        coinReward += timeBonus;\r\n        pulseCoins(timeBonus);\r\n      }\r\n      \r\n      if (currentGame.firstAttempt) {\r\n        coinReward += 3;\r\n        pulseCoins(3);\r\n      } else {\r\n        coinReward += 1;\r\n        pulseCoins(1);\r\n      }\r\n      \r\n      try {\r\n        await CoinsManager.updateCoins(coinReward);\r\n        updatePerkButtons();\r\n      } catch (e) {\r\n        console.error(\"Error updating total coins:\", e);\r\n      }\r\n      \r\n      currentGame.correctAnswers++;\r\n      \r\n      if (currentUser && currentUser.status === \"premium\") {\r\n        const wordIndex = currentGame.currentIndex - 1; // Since we already incremented\r\n        const word = currentGame.isHebrewToEnglish\r\n          ? currentGame.words[wordIndex]\r\n          : currentGame.translations[wordIndex];\r\n        await trackWordEncounter(word, \"custom\");\r\n      }\r\n    }\r\n  } else {\r\n    currentGame.firstAttempt = false;\r\n    currentGame.streakBonus = false;\r\n    currentGame.wrongStreak++;\r\n    \r\n    try {\r\n      await CoinsManager.updateCoins(-3);\r\n      updatePerkButtons();\r\n    } catch (e) {\r\n      console.error(\"Error updating coins:\", e);\r\n    }\r\n    \r\n    if (currentGame.currentIndex > 0) {\r\n      currentGame.progressLost++;\r\n      currentGame.currentIndex = Math.max(0, currentGame.currentIndex - 1);\r\n    }\r\n    \r\n    if (currentGame.wrongStreak >= 3) {\r\n      showGameOverOverlay();\r\n      document.querySelector(\".restart-button\").onclick = () => {\r\n        document.querySelector(\".failure-overlay\").style.display = \"none\";\r\n        startCustomLevel(currentGame.customLevel);\r\n      }\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // Get current question's correct answer (before loading next)\r\n  const currentCorrectAnswer = currentGame.isHebrewToEnglish\r\n    ? currentGame.words[Math.max(0, currentGame.currentIndex - 1)]\r\n    : currentGame.translations[Math.max(0, currentGame.currentIndex - 1)];\r\n  \r\n  // Highlight correct/wrong answer only for current question\r\n  const allButtons = document.querySelectorAll(\".buttons button\");\r\n  allButtons.forEach((button) => {\r\n    if (button.textContent === currentCorrectAnswer) {\r\n      button.classList.add(\"correct\");\r\n    } else if (!e && event && event.target && button.textContent === event.target.textContent) {\r\n      button.classList.add(\"wrong\");\r\n    }\r\n  });\r\n  \r\n  updateProgressCircle();\r\n  saveProgress();\r\n  \r\n  // Wait for animation before loading next\r\n  setTimeout(() => {\r\n    // Clear all button classes before loading next question\r\n    allButtons.forEach(btn => {\r\n      btn.classList.remove(\"correct\", \"wrong\");\r\n    });\r\n    \r\n    if (currentGame.currentIndex < currentGame.words.length) {\r\n      loadNextQuestion();\r\n      updatePerkButtons();\r\n    } else {\r\n      handleCustomLevelCompletion();\r\n    }\r\n  }, 333);\r\n}\r\n\r\nfunction showReviveOverlay() {\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'revive-overlay';\r\n    overlay.innerHTML = `\r\n        <div class=\"revive-content\">\r\n            <div class=\"ankh-symbol\">☥</div>\r\n            <h2 class=\"revive-title\">Revive?</h2>\r\n            <div class=\"revive-timer\">5</div>\r\n            <button class=\"revive-button\">Revive</button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    \r\n    // Fade in animation\r\n    requestAnimationFrame(() => {\r\n        overlay.classList.add('show');\r\n    });\r\n    \r\n    // Set up countdown\r\n    let seconds = 5;\r\n    const timerDisplay = overlay.querySelector('.revive-timer');\r\n    \r\n    const countdownInterval = setInterval(() => {\r\n        seconds--;\r\n        timerDisplay.textContent = seconds;\r\n        \r\n        if (seconds <= 0) {\r\n            clearInterval(countdownInterval);\r\n            handleReviveTimeout();\r\n        }\r\n    }, 1000);\r\n    \r\n    // Handle revive button click\r\n    const reviveButton = overlay.querySelector('.revive-button');\r\n    reviveButton.onclick = () => {\r\n        clearInterval(countdownInterval);\r\n        handleRevive();\r\n    };\r\n    \r\n    // Store interval for cleanup\r\n    overlay.dataset.intervalId = countdownInterval;\r\n}\r\n\r\nfunction handleReviveTimeout() {\r\n    const overlay = document.querySelector('.revive-overlay');\r\n    \r\n    if (overlay) {\r\n        overlay.classList.remove('show');\r\n        setTimeout(() => {\r\n            overlay.remove();\r\n            showScreen('welcome-screen');\r\n        }, 500);\r\n    }\r\n}\r\n\r\nfunction handleRevive() {\r\n    const overlay = document.querySelector('.revive-overlay');\r\n    \r\n    if (overlay) {\r\n        // First change content to show resurrection animation\r\n        const content = overlay.querySelector('.revive-content');\r\n        content.innerHTML = `\r\n            <div class=\"resurrection-animation\">\r\n                <div class=\"progress-circle resurrection-circle\">\r\n                    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 120 120\">\r\n                        <circle class=\"bg\" cx=\"60\" cy=\"60\" r=\"54\" stroke-width=\"8\"/>\r\n                        <circle class=\"resurrection-progress\" cx=\"60\" cy=\"60\" r=\"54\" stroke-width=\"8\"/>\r\n                    </svg>\r\n                    <div class=\"ankh-symbol resurrection-ankh\">☥</div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        // Start resurrection animation\r\n        const progressCircle = overlay.querySelector('.resurrection-progress');\r\n        const circumference = 2 * Math.PI * 54;\r\n        progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;\r\n        progressCircle.style.strokeDashoffset = circumference;\r\n        \r\n        // Create light particles effect\r\n        createResurrectionParticles();\r\n        \r\n        // Animate progress circle filling\r\n        setTimeout(() => {\r\n            progressCircle.style.transition = 'stroke-dashoffset 2s cubic-bezier(0.4, 0, 0.2, 1)';\r\n            progressCircle.style.strokeDashoffset = '0';\r\n        }, 100);\r\n        \r\n        // After animation completes, restart level\r\n        setTimeout(() => {\r\n            overlay.classList.remove('show');\r\n            setTimeout(() => {\r\n                overlay.remove();\r\n                \r\n                // Reset game state\r\n                currentGame.wrongStreak = 0;\r\n                timeRemaining = currentGame.initialTimeRemaining;\r\n                \r\n                // If in custom practice, handle specially\r\n                if (currentGame.isCustomPractice) {\r\n                    startCustomLevel(currentGame.customLevel);\r\n                } else {\r\n                    startLevel(gameState.currentLevel);\r\n                }\r\n            }, 500);\r\n        }, 2500);\r\n    }\r\n}\r\n\r\nfunction createResurrectionParticles() {\r\n    const container = document.querySelector('.resurrection-animation');\r\n    if (!container) return;\r\n    \r\n    // Get center of container\r\n    const rect = container.getBoundingClientRect();\r\n    const centerX = rect.left + rect.width / 2;\r\n    const centerY = rect.top + rect.height / 2;\r\n    \r\n    // Create particles\r\n    for (let i = 0; i < 40; i++) {\r\n        const particle = document.createElement('div');\r\n        particle.className = 'resurrection-particle';\r\n        \r\n        // Random angle and distance\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const distance = 100 + Math.random() * 150;\r\n        const duration = 1 + Math.random() * 1.5;\r\n        const delay = Math.random() * 0.5;\r\n        const size = 3 + Math.random() * 7;\r\n        \r\n        // Calculate end position\r\n        const endX = Math.cos(angle) * distance;\r\n        const endY = Math.sin(angle) * distance;\r\n        \r\n        // Set particle style\r\n        particle.style.cssText = `\r\n            position: fixed;\r\n            left: ${centerX}px;\r\n            top: ${centerY}px;\r\n            width: ${size}px;\r\n            height: ${size}px;\r\n            background: #FFD700;\r\n            border-radius: 50%;\r\n            opacity: 0;\r\n            z-index: 1001;\r\n            box-shadow: 0 0 ${size}px #FFD700;\r\n            transform: translate(-50%, -50%);\r\n            animation: particleFlow ${duration}s ease-out ${delay}s forwards;\r\n        `;\r\n        \r\n        // Set custom properties for animation\r\n        particle.style.setProperty('--end-x', `${endX}px`);\r\n        particle.style.setProperty('--end-y', `${endY}px`);\r\n        \r\n        document.body.appendChild(particle);\r\n        \r\n        // Clean up after animation\r\n        setTimeout(() => {\r\n            particle.remove();\r\n        }, (duration + delay) * 1000);\r\n    }\r\n}\r\n\r\nfunction updateSidePanelLink() {\r\n    const levelMapLink = document.querySelector('.nav-link[onclick*=\"stage-screen\"]');\r\n    if (levelMapLink) {\r\n        levelMapLink.setAttribute('onclick', \"showScreen('stage-cascade-screen'); return false;\");\r\n    }\r\n}\r\n\r\n// Call the function immediately after defining it\r\nupdateSidePanelLink();\r\n\r\n// Also call it when DOM is loaded to ensure it works\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    updateSidePanelLink();\r\n});\r\n\r\n\r\nfunction renderStageCascadeScreen() {\r\n  const stagesContainer = document.querySelector(\".stages-container\");\r\n  if (!stagesContainer) return;\r\n  \r\n  // Clear the container\r\n  stagesContainer.innerHTML = \"\";\r\n  \r\n  // Debug: Log the current state of unlocked sets\r\n  console.log(\"Current unlocked sets:\", gameState.unlockedSets);\r\n  \r\n  // Render stages and sets\r\n  gameStructure.stages.forEach(stage => {\r\n    const stageWrapper = document.createElement(\"div\");\r\n    stageWrapper.className = \"stage-wrapper\";\r\n    stageWrapper.dataset.stage = stage.id;\r\n    \r\n    const numSets = stage.numSets;\r\n    const unlockedSets = gameState.unlockedSets[stage.id] || new Set();\r\n    const unlockedSetCount = unlockedSets.size;\r\n    \r\n    let completedSets = 0;\r\n    if (unlockedSetCount > 0) {\r\n      unlockedSets.forEach(setNum => {\r\n        // Check if this set is completed\r\n        if (isSetCompleted(stage.id, setNum)) {\r\n          completedSets++;\r\n        }\r\n      });\r\n    }\r\n    \r\n    const stageIcon = getStageIcon(stage.id);\r\n    const stageHebrewName = getStageHebrewName(stage.id);\r\n    const stageDescription = getStageDescription(stage.id);\r\n    const stageStatus = getStageStatus(stage.id, completedSets, numSets);\r\n    \r\n    stageWrapper.innerHTML = `\r\n      <div class=\"stage-button\">\r\n        <div class=\"stage-info\">\r\n          <div class=\"stage-icon\">\r\n            <i class=\"${stageIcon}\"></i>\r\n          </div>\r\n          <div class=\"stage-text\">\r\n            <div class=\"stage-name\">${stageHebrewName} - Stage ${stage.id}</div>\r\n            <div class=\"stage-desc\">${stageDescription}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"stage-status\">${stageStatus}</div>\r\n        <div class=\"stage-toggle\">\r\n          <i class=\"fas fa-chevron-down\"></i>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"sets-container\">\r\n        <div class=\"sets-grid\" id=\"sets-grid-${stage.id}\"></div>\r\n      </div>\r\n    `;\r\n    \r\n    stagesContainer.appendChild(stageWrapper);\r\n    \r\n    // Populate the sets grid for this stage\r\n    populateSetsGrid(stage.id);\r\n  });\r\n  \r\n  // Add toggle listeners for stage expansion\r\n  addStageToggleListeners();\r\n  \r\n  // Auto-expand the current stage\r\n  if (gameState.currentStage) {\r\n    const currentStageWrapper = document.querySelector(`.stage-wrapper[data-stage=\"${gameState.currentStage}\"]`);\r\n    if (currentStageWrapper) {\r\n      currentStageWrapper.classList.add(\"open\");\r\n    }\r\n  }\r\n  \r\n  // Show the stage cascade screen\r\n  const stageCascadeScreen = document.getElementById(\"stage-cascade-screen\");\r\n  if (stageCascadeScreen) {\r\n    document.querySelectorAll(\".screen\").forEach(screen => {\r\n      screen.classList.remove(\"visible\");\r\n    });\r\n    stageCascadeScreen.classList.add(\"visible\");\r\n  }\r\n}\r\n\r\n// Function to build and display the stage-set cascade UI\r\nfunction showStageCascadeScreen() {\r\n    // First, ensure we have the latest game state\r\n    if (currentUser) {\r\n        // For logged-in users, optionally refresh from database\r\n        const savedProgress = localStorage.getItem(\"simploxProgress\");\r\n        if (savedProgress) {\r\n            try {\r\n                const progress = JSON.parse(savedProgress);\r\n                updateGameStateFromProgress(progress);\r\n            } catch (error) {\r\n                console.error(\"Error parsing local progress:\", error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    console.log(\"Showing stage cascade screen, current game state:\", {\r\n        currentStage: gameState.currentStage,\r\n        unlockedSets: gameState.unlockedSets,\r\n        completedLevels: gameState.completedLevels ? Array.from(gameState.completedLevels).length : 0\r\n    });\r\n    \r\n    const container = document.querySelector('.stages-container');\r\n    if (!container) return;\r\n    \r\n    // Clear existing content\r\n    container.innerHTML = '';\r\n    \r\n    // Create stage wrappers for each stage\r\n    gameStructure.stages.forEach(stage => {\r\n        // Create stage wrapper\r\n        const stageWrapper = document.createElement('div');\r\n        stageWrapper.className = 'stage-wrapper';\r\n        stageWrapper.dataset.stage = stage.id;\r\n        \r\n        // Get stage completion data\r\n        const totalSets = stage.numSets;\r\n        const unlockedSets = gameState.unlockedSets[stage.id] || new Set();\r\n        \r\n        console.log(`Stage ${stage.id} unlocked sets:`, Array.from(unlockedSets));\r\n        \r\n        const unlockedCount = unlockedSets.size;\r\n        let completedSets = 0;\r\n        \r\n        // Count completed sets\r\n        if (unlockedSets.size > 0) {\r\n            unlockedSets.forEach(setId => {\r\n                const setKey = `${stage.id}_${setId}`;\r\n                const levelCount = gameStructure.stages[stage.id - 1].levelsPerSet;\r\n                const completedLevels = new Set();\r\n                \r\n                // Count levels that are in completedLevels or perfectLevels\r\n                for (let level = 1; level <= levelCount; level++) {\r\n                    const levelKey = `${stage.id}_${setId}_${level}`;\r\n                    if (gameState.completedLevels.has(levelKey) || gameState.perfectLevels.has(levelKey)) {\r\n                        completedLevels.add(level);\r\n                    }\r\n                }\r\n                \r\n                // If all levels in a set are completed, count it as a completed set\r\n                if (completedLevels.size === levelCount) {\r\n                    completedSets++;\r\n                    console.log(`Set ${stage.id}-${setId} is fully completed`);\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Stage button content\r\n        const stageIcon = getStageIcon(stage.id);\r\n        const stageName = getStageHebrewName(stage.id);\r\n        const stageDesc = getStageDescription(stage.id);\r\n        const stageStatus = getStageStatus(stage.id, completedSets, totalSets);\r\n        \r\n        // Create stage button\r\n        stageWrapper.innerHTML = `\r\n            <div class=\"stage-button\">\r\n                <div class=\"stage-info\">\r\n                    <div class=\"stage-icon\">\r\n                        <i class=\"${stageIcon}\"></i>\r\n                    </div>\r\n                    <div class=\"stage-text\">\r\n                        <div class=\"stage-name\">${stageName} - Stage ${stage.id}</div>\r\n                        <div class=\"stage-desc\">${stageDesc}</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"stage-status\">${stageStatus}</div>\r\n                <div class=\"stage-toggle\">\r\n                    <i class=\"fas fa-chevron-down\"></i>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"sets-container\">\r\n                <div class=\"sets-grid\" id=\"sets-grid-${stage.id}\"></div>\r\n            </div>\r\n        `;\r\n        \r\n        container.appendChild(stageWrapper);\r\n        \r\n        // Populate sets grid\r\n        populateSetsGrid(stage.id);\r\n    });\r\n    \r\n    // Add event listeners to stage buttons\r\n    addStageToggleListeners();\r\n    \r\n    // Initial state: open the current stage\r\n    if (gameState.currentStage) {\r\n        const currentStageWrapper = document.querySelector(`.stage-wrapper[data-stage=\"${gameState.currentStage}\"]`);\r\n        if (currentStageWrapper) {\r\n            currentStageWrapper.classList.add('open');\r\n        }\r\n    }\r\n    \r\n    const cascadeScreen = document.getElementById('stage-cascade-screen'); \r\n    if (cascadeScreen) {\r\n        document.querySelectorAll('.screen').forEach(screen => {\r\n            screen.classList.remove('visible');\r\n        });\r\n        cascadeScreen.classList.add('visible');\r\n    }\r\n}\r\n\r\n// Helper function to update game state from saved progress\r\nfunction updateGameStateFromProgress(progress) {\r\n    console.log(\"Updating game state from saved progress\");\r\n    \r\n    // Update unlocked sets\r\n    if (progress.unlocked_sets) {\r\n        console.log(\"Updating unlocked sets from:\", progress.unlocked_sets);\r\n        gameState.unlockedSets = {};\r\n        Object.entries(progress.unlocked_sets).forEach(([stage, sets]) => {\r\n            gameState.unlockedSets[stage] = new Set(Array.isArray(sets) ? sets : []);\r\n        });\r\n    }\r\n    \r\n    // Update unlocked levels\r\n    if (progress.unlocked_levels) {\r\n        console.log(\"Updating unlocked levels from saved data\");\r\n        gameState.unlockedLevels = {};\r\n        Object.entries(progress.unlocked_levels).forEach(([setKey, levels]) => {\r\n            gameState.unlockedLevels[setKey] = new Set(Array.isArray(levels) ? levels : []);\r\n        });\r\n    }\r\n    \r\n    // Update completed levels\r\n    if (progress.completed_levels) {\r\n        console.log(\"Updating completed levels from saved data\");\r\n        gameState.completedLevels = new Set(progress.completed_levels);\r\n    }\r\n    \r\n    // Update perfect levels\r\n    if (progress.perfect_levels) {\r\n        console.log(\"Updating perfect levels from saved data\");\r\n        gameState.perfectLevels = new Set(progress.perfect_levels);\r\n    }\r\n}\r\n\r\n\r\nfunction getStageIcon(stageId) {\r\n    const icons = {\r\n        1: 'fas fa-book',\r\n        2: 'fas fa-graduation-cap',\r\n        3: 'fas fa-school',\r\n        4: 'fas fa-university',\r\n        5: 'fas fa-brain'\r\n    };\r\n    return icons[stageId] || 'fas fa-star';\r\n}\r\n\r\nfunction getStageHebrewName(stageId) {\r\n    const names = {\r\n        1: 'מתחילים',\r\n        2: 'יסודי',\r\n        3: 'חטיבת ביניים',\r\n        4: 'תיכון',\r\n        5: 'אוניברסיטה'\r\n    };\r\n    return names[stageId] || `Stage ${stageId}`;\r\n}\r\n\r\nfunction getStageDescription(stageId) {\r\n    const descriptions = {\r\n        1: 'Beginner level words and simple phrases',\r\n        2: 'Elementary level vocabulary and structures',\r\n        3: 'Middle school level vocabulary',\r\n        4: 'High school level vocabulary',\r\n        5: 'University level vocabulary'\r\n    };\r\n    return descriptions[stageId] || 'Advanced vocabulary';\r\n}\r\n\r\nfunction getStageStatus(stageId, completedSets, totalSets) {\r\n    // For premium stages, show premium status for non-premium users\r\n    if (stageId > 2 && (!currentUser || currentUser.status !== 'premium')) {\r\n        return 'Premium Feature';\r\n    }\r\n    \r\n    // For unlocked stages, show completion status\r\n    return `${completedSets}/${totalSets} Sets Completed`;\r\n}\r\n\r\nfunction populateSetsGrid(e) {\r\n    const t = document.getElementById(`sets-grid-${e}`);\r\n    if (!t) return;\r\n    console.log(`Populating sets grid for stage ${e}`);\r\n    console.log(\"Unlocked sets:\", gameState.unlockedSets);\r\n    const n = gameStructure.stages[e - 1],\r\n        r = gameState.unlockedSets[e] || new Set,\r\n        o = currentUser ? currentUser.status : \"unregistered\";\r\n    console.log(`Stage ${e} unlocked sets:`, Array.from(r));\r\n    t.innerHTML = \"\";\r\n    for (let s = 1; s <= n.numSets; s++) {\r\n        const n = document.createElement(\"div\"),\r\n            a = r.has(s);\r\n        let i = !1;\r\n        e >= 2 && s > 1 && \"premium\" !== o && (i = !0);\r\n        n.className = \"set-button\";\r\n        a && !i ? n.classList.add(\"active\") : n.classList.add(\"locked\");\r\n        const c = isSetCompleted(e, s);\r\n        \r\n        n.innerHTML = `\r\n      <span>Set ${s}</span>\r\n      ${c ? '\\n      <div class=\"completed-indicator\">\\n        <i class=\"fas fa-check-circle\"></i>\\n      </div>' : \"\"}\r\n      ${!a || i ? `\r\n      <div class=\"lock-icon\">\r\n        <i class=\"fas ${i ? \"fa-crown crown-premium\" : \"fa-lock\"}\"></i>\r\n      </div>` : \"\"}\r\n    `;\r\n        \r\n        if (a && !i) {\r\n            n.onclick = () => {\r\n                gameState.currentStage = e;\r\n                gameState.currentSet = s;\r\n                showLevelScreen(s);\r\n            };\r\n        } else if (i) {\r\n            // Make the whole button show upgrade prompt\r\n            n.onclick = () => showUpgradePrompt();\r\n            \r\n            // Add specific handler for the crown icon\r\n            setTimeout(() => {\r\n                const crownIcon = n.querySelector(\".fa-crown\");\r\n                if (crownIcon) {\r\n                    crownIcon.addEventListener(\"click\", (event) => {\r\n                        event.stopPropagation();\r\n                        showUpgradePrompt();\r\n                    });\r\n                }\r\n            }, 0);\r\n        }\r\n        \r\n        t.appendChild(n);\r\n    }\r\n}\r\n\r\nfunction isSetCompleted(stage, set) {\r\n  const stageData = gameStructure.stages;\r\n  if (!stageData || !stageData[stage-1]) {\r\n    console.warn(`Invalid stage ${stage} in isSetCompleted`);\r\n    return false;\r\n  }\r\n  \r\n  const totalLevels = stageData[stage-1].levelsPerSet;\r\n  let completedCount = 0;\r\n  \r\n  console.log(`Checking if set ${stage}-${set} is completed. Total levels: ${totalLevels}`);\r\n  \r\n  for (let level = 1; level <= totalLevels; level++) {\r\n    const levelKey = `${stage}_${set}_${level}`;\r\n    if (gameState.completedLevels.has(levelKey) || gameState.perfectLevels.has(levelKey)) {\r\n      completedCount++;\r\n      console.log(`Level ${levelKey} is completed`);\r\n    }\r\n  }\r\n  \r\n  const isComplete = completedCount === totalLevels;\r\n  console.log(`Set ${stage}-${set} completion check: ${completedCount}/${totalLevels} = ${isComplete}`);\r\n  \r\n  return isComplete;\r\n}\r\n\r\nfunction handleCrownClick(e) {\r\n  e.stopPropagation();\r\n  \r\n  if (!currentUser) {\r\n    // Unregistered user - show signup form\r\n    showAuthModal();\r\n    // Switch to signup form\r\n    setTimeout(() => {\r\n      const loginForm = document.getElementById('loginForm');\r\n      const signupForm = document.getElementById('signupForm');\r\n      if (loginForm && signupForm) {\r\n        loginForm.classList.add('hidden');\r\n        signupForm.classList.remove('hidden');\r\n      }\r\n    }, 100);\r\n  } else {\r\n    // Logged in user - show upgrade form\r\n    localStorage.removeItem(`upgradeRequested_${currentUser.id}`);\r\n    showUpgradePrompt();\r\n  }\r\n}\r\n\r\nfunction forceShowUpgradeForm() {\r\n    // Remove the flag that prevents the form from showing again\r\n    if (currentUser) {\r\n        localStorage.removeItem(`upgradeRequested_${currentUser.id}`);\r\n    } else {\r\n        localStorage.removeItem('upgradeRequested_guest');\r\n    }\r\n    \r\n    // Show the upgrade form\r\n    showScreen(\"upgrade-screen\");\r\n}\r\n\r\n/* ADD this code to ensure crowns are clickable after DOM loads */\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Add click handlers to all crown icons\r\n    document.querySelectorAll('.fa-crown').forEach(crown => {\r\n        crown.addEventListener('click', handleCrownClick);\r\n    });\r\n    \r\n    // Set up a mutation observer to handle dynamically added crowns\r\n    const observer = new MutationObserver(mutations => {\r\n        mutations.forEach(mutation => {\r\n            if (mutation.addedNodes.length) {\r\n                mutation.addedNodes.forEach(node => {\r\n                    if (node.nodeType === 1) { // Element node\r\n                        const crowns = node.querySelectorAll('.fa-crown');\r\n                        crowns.forEach(crown => {\r\n                            crown.addEventListener('click', handleCrownClick);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n    \r\n    observer.observe(document.body, { childList: true, subtree: true });\r\n});\r\n\r\n\r\n\r\nfunction addStageToggleListeners() {\r\n    document.querySelectorAll('.stage-wrapper .stage-button').forEach(button => {\r\n        button.addEventListener('click', (e) => {\r\n            const wrapper = button.closest('.stage-wrapper');\r\n            wrapper.classList.toggle('open');\r\n            e.stopPropagation(); // Prevent event bubbling\r\n        });\r\n    });\r\n}\r\n\r\n// Add this helper function to ensure the screen exists\r\nfunction ensureScreenExists(screenId) {\r\n    if (!document.getElementById(screenId)) {\r\n        console.warn(`Screen ${screenId} doesn't exist. Creating it.`);\r\n        const screen = document.createElement('div');\r\n        screen.id = screenId;\r\n        screen.className = 'screen';\r\n        document.body.appendChild(screen);\r\n    }\r\n}\r\n\r\n// Call this before showScreen\r\nfunction safeShowScreen(screenId, forceRefresh = false) {\r\n    ensureScreenExists(screenId);\r\n    showScreen(screenId, forceRefresh);\r\n}\r\n\r\n// Update the navigation link in the side panel\r\nfunction updateSidePanelLinks() {\r\n    const levelMapLink = document.querySelector('.nav-link[onclick*=\"stage-screen\"]');\r\n    if (levelMapLink) {\r\n        levelMapLink.setAttribute('onclick', \"safeShowScreen('stage-cascade-screen'); return false;\");\r\n    }\r\n    \r\n    // Update any other links that might go to this screen\r\n    document.querySelectorAll('button[onclick*=\"stage-screen\"]').forEach(button => {\r\n        const onclick = button.getAttribute('onclick');\r\n        if (onclick && onclick.includes('stage-screen')) {\r\n            button.setAttribute('onclick', onclick.replace('stage-screen', 'stage-cascade-screen'));\r\n        }\r\n    });\r\n}\r\n\r\n// Add to document ready function\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Make sure all the necessary screens exist\r\n    ensureScreenExists('stage-cascade-screen');\r\n    \r\n    // Update navigation links\r\n    updateSidePanelLinks();\r\n    \r\n    // If any other initialization is needed for stage-cascade-screen\r\n    initializeStageCascadeScreen();\r\n});\r\n\r\n// Simple initialization function for the stage cascade screen\r\nfunction initializeStageCascadeScreen() {\r\n    const screen = document.getElementById('stage-cascade-screen');\r\n    if (!screen.querySelector('.stages-container')) {\r\n        const container = document.createElement('div');\r\n        container.className = 'stages-container';\r\n        screen.appendChild(container);\r\n    }\r\n}\r\n\r\nfunction toggleSidePanel() {\r\n    const sidePanel = document.querySelector('.side-panel');\r\n    const hamburgerButton = document.querySelector('.hamburger-button');\r\n    const modalOverlay = document.querySelector('.modal-overlay');\r\n    \r\n    if (sidePanel.classList.contains('open')) {\r\n        sidePanel.classList.remove('open');\r\n        hamburgerButton.classList.remove('open');\r\n        if (modalOverlay) modalOverlay.classList.remove('open');\r\n    } else {\r\n        sidePanel.classList.add('open');\r\n        hamburgerButton.classList.add('open');\r\n        if (modalOverlay) modalOverlay.classList.add('open');\r\n    }\r\n}\r\n\r\nfunction hasExistingProgress() {\r\n    // Check if we have any completed levels or stage progress\r\n    if (gameState.completedLevels.size > 0 || gameState.perfectLevels.size > 0) {\r\n        return true;\r\n    }\r\n    \r\n    // Check if we have unlocked any sets beyond the defaults\r\n    for (let stage = 1; stage <= 5; stage++) {\r\n        const unlockedSets = gameState.unlockedSets[stage];\r\n        // For stage 1, having just the default 9 sets doesn't count as progress\r\n        if (stage === 1 && unlockedSets && unlockedSets.size === 9) {\r\n            continue;\r\n        }\r\n        // For other stages, having more than set 1 unlocked counts as progress\r\n        if (unlockedSets && unlockedSets.size > 1) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // Check localStorage for previously saved progress\r\n    const savedProgress = localStorage.getItem('simploxProgress');\r\n    if (savedProgress) {\r\n        const parsed = JSON.parse(savedProgress);\r\n        if (parsed.completedLevels && parsed.completedLevels.length > 0) {\r\n            return true;\r\n        }\r\n        if (parsed.perfectLevels && parsed.perfectLevels.length > 0) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nfunction findFurthestLevelInStage(stage) {\r\n    if (!gameState.unlockedSets[stage]) return null;\r\n    \r\n    const sets = Array.from(gameState.unlockedSets[stage]).sort((a, b) => b - a); // Sort descending\r\n    \r\n    for (const set of sets) {\r\n        const setKey = `${stage}_${set}`;\r\n        if (!gameState.unlockedLevels[setKey]) continue;\r\n        \r\n        const levels = Array.from(gameState.unlockedLevels[setKey]).sort((a, b) => b - a); // Sort descending\r\n        \r\n        for (const level of levels) {\r\n            const levelKey = `${stage}_${set}_${level}`;\r\n            // If level is not completed, this is the furthest progress\r\n            if (!gameState.perfectLevels.has(levelKey) && !gameState.completedLevels.has(levelKey)) {\r\n                return { stage, set, level };\r\n            }\r\n        }\r\n    }\r\n    \r\n    // If all levels in all sets are completed, return the first level of the next set\r\n    // or first level of next stage if this was the last set\r\n    const stageConfig = gameStructure.stages[stage - 1];\r\n    const currentSetIndex = sets[0];\r\n    \r\n    if (currentSetIndex < stageConfig.numSets) {\r\n        // Next set in current stage\r\n        return { stage, set: currentSetIndex + 1, level: 1 };\r\n    } else if (stage < 5) {\r\n        // First set of next stage\r\n        return { stage: stage + 1, set: 1, level: 1 };\r\n    }\r\n    \r\n    // Fallback: return last known position\r\n    return { stage, set: sets[0], level: 1 };\r\n}\r\n\r\nfunction showGradeLevelSelector() {\r\n    // Create overlay and modal\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'modal-backdrop';\r\n    overlay.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0, 0, 0, 0.7);\r\n        backdrop-filter: blur(5px);\r\n        z-index: 1000;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    `;\r\n    \r\n    const modal = document.createElement('div');\r\n    modal.className = 'grade-level-modal';\r\n    modal.style.cssText = `\r\n        background: var(--glass);\r\n        backdrop-filter: blur(10px);\r\n        border-radius: 20px;\r\n        padding: 2rem;\r\n        max-width: 500px;\r\n        width: 90%;\r\n        text-align: center;\r\n        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n        border: 1px solid rgba(255, 255, 255, 0.1);\r\n    `;\r\n    \r\n    modal.innerHTML = `\r\n        <h2 style=\"color: var(--gold); margin-bottom: 1.5rem;\">What grade level are you?</h2>\r\n        <p style=\"margin-bottom: 2rem; opacity: 0.9;\">Choose your education level for the best learning experience:</p>\r\n        <div class=\"grade-options\" style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n            <button class=\"grade-option\" data-stage=\"2\" style=\"padding: 1rem; border-radius: 10px; background: rgba(255,255,255,0.1); border: none; color: var(--text); cursor: pointer; transition: all 0.3s ease;\">\r\n                <i class=\"fas fa-school\" style=\"margin-right: 0.5rem;\"></i> Elementary School\r\n            </button>\r\n            <button class=\"grade-option\" data-stage=\"3\" style=\"padding: 1rem; border-radius: 10px; background: rgba(255,255,255,0.1); border: none; color: var(--text); cursor: pointer; transition: all 0.3s ease;\">\r\n                <i class=\"fas fa-graduation-cap\" style=\"margin-right: 0.5rem;\"></i> Junior High School\r\n            </button>\r\n            <button class=\"grade-option\" data-stage=\"4\" style=\"padding: 1rem; border-radius: 10px; background: rgba(255,255,255,0.1); border: none; color: var(--text); cursor: pointer; transition: all 0.3s ease;\">\r\n                <i class=\"fas fa-user-graduate\" style=\"margin-right: 0.5rem;\"></i> High School\r\n            </button>\r\n            <button class=\"grade-option\" data-stage=\"5\" style=\"padding: 1rem; border-radius: 10px; background: rgba(255,255,255,0.1); border: none; color: var(--text); cursor: pointer; transition: all 0.3s ease;\">\r\n                <i class=\"fas fa-university\" style=\"margin-right: 0.5rem;\"></i> University\r\n            </button>\r\n        </div>\r\n    `;\r\n    \r\n    document.body.appendChild(overlay);\r\n    overlay.appendChild(modal);\r\n    \r\n    // Add hover effect\r\n    const buttons = modal.querySelectorAll('.grade-option');\r\n    buttons.forEach(button => {\r\n        button.addEventListener('mouseover', () => {\r\n            button.style.background = 'rgba(255,255,255,0.2)';\r\n            button.style.transform = 'translateY(-2px)';\r\n        });\r\n        \r\n        button.addEventListener('mouseout', () => {\r\n            button.style.background = 'rgba(255,255,255,0.1)';\r\n            button.style.transform = 'translateY(0)';\r\n        });\r\n        \r\n        button.addEventListener('click', () => {\r\n            const stage = parseInt(button.dataset.stage);\r\n            localStorage.setItem('preferredStage', stage);\r\n            overlay.remove();\r\n            \r\n            // Set current stage and start first level\r\n            gameState.currentStage = stage;\r\n            gameState.currentSet = 1;\r\n            startLevel(1);\r\n        });\r\n    });\r\n}\r\n\r\nfunction setupDefaultUnlocks() {\r\n    console.log('Setting up default unlocks...');\r\n    console.log('Before setup:', gameState.unlockedSets, gameState.unlockedLevels);\r\n    \r\n    // Stage 1: Level 1 of all sets should be unlocked\r\n    if (!gameState.unlockedSets[1]) {\r\n        gameState.unlockedSets[1] = new Set();\r\n    }\r\n    \r\n    for (let i = 1; i <= 9; i++) {\r\n        gameState.unlockedSets[1].add(i);\r\n        const setKey = `1_${i}`;\r\n        if (!gameState.unlockedLevels[setKey]) {\r\n            gameState.unlockedLevels[setKey] = new Set([1]);\r\n        }\r\n    }\r\n\r\n    // Stages 2-5: Level 1 of Set 1 should be unlocked\r\n    for (let stage = 2; stage <= 5; stage++) {\r\n        if (!gameState.unlockedSets[stage]) {\r\n            gameState.unlockedSets[stage] = new Set([1]);\r\n        }\r\n        const setKey = `${stage}_1`;\r\n        if (!gameState.unlockedLevels[setKey]) {\r\n            gameState.unlockedLevels[setKey] = new Set([1]);\r\n        }\r\n    }\r\n    \r\n    // Handle progressed levels - ensure continuity\r\n    // If level 5 is unlocked, make sure 1-4 are also unlocked\r\n    Object.entries(gameState.unlockedLevels).forEach(([setKey, levels]) => {\r\n        const maxLevel = Math.max(...Array.from(levels));\r\n        for (let i = 1; i < maxLevel; i++) {\r\n            levels.add(i);\r\n        }\r\n    });\r\n    \r\n    console.log('After setup:', gameState.unlockedSets, gameState.unlockedLevels);\r\n}\r\n\r\nfunction saveProgress() {\r\n  console.log(\"Saving game progress\");\r\n  \r\n  // Prepare the data to save\r\n  const progressData = {\r\n    stage: gameState.currentStage || 1,\r\n    set_number: gameState.currentSet || 1,\r\n    level: gameState.currentLevel || 1,\r\n    coins: gameState.coins || 0,\r\n    perks: gameState.perks || {}\r\n  };\r\n  \r\n  // Add unlocked sets\r\n  if (gameState.unlockedSets) {\r\n    progressData.unlocked_sets = {};\r\n    Object.entries(gameState.unlockedSets).forEach(([stage, sets]) => {\r\n      progressData.unlocked_sets[stage] = Array.from(sets || []);\r\n    });\r\n  }\r\n  \r\n  // Add unlocked levels\r\n  if (gameState.unlockedLevels) {\r\n    progressData.unlocked_levels = {};\r\n    Object.entries(gameState.unlockedLevels).forEach(([setKey, levels]) => {\r\n      progressData.unlocked_levels[setKey] = Array.from(levels || []);\r\n    });\r\n  }\r\n  \r\n  // Add completed and perfect levels\r\n  if (gameState.completedLevels && gameState.completedLevels.size > 0) {\r\n    progressData.completed_levels = Array.from(gameState.completedLevels);\r\n  }\r\n  \r\n  if (gameState.perfectLevels && gameState.perfectLevels.size > 0) {\r\n    progressData.perfect_levels = Array.from(gameState.perfectLevels);\r\n  }\r\n  \r\n  console.log(\"Progress data to save:\", progressData);\r\n  \r\n  // Save to appropriate storage\r\n  if (currentUser) {\r\n    console.log(\"Saving progress to Supabase for user:\", currentUser.id);\r\n    \r\n    // First check the database schema to ensure compatibility\r\n    supabaseClient.from(\"game_progress\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", currentUser.id)\r\n      .single()\r\n      .then(({ data, error }) => {\r\n        if (error) {\r\n          console.error(\"Error checking progress schema:\", error);\r\n          saveProgressToLocalStorage(progressData);\r\n          return;\r\n        }\r\n        \r\n        // Check for necessary columns\r\n        const hasPerfectLevels = 'perfect_levels' in data;\r\n        const hasCompletedLevels = 'completed_levels' in data;\r\n        \r\n        // Remove fields that aren't in the schema\r\n        if (!hasCompletedLevels) {\r\n          delete progressData.completed_levels;\r\n          console.warn(\"Database schema missing completed_levels column, removing from save data\");\r\n        }\r\n        \r\n        if (!hasPerfectLevels) {\r\n          delete progressData.perfect_levels;\r\n          console.warn(\"Database schema missing perfect_levels column, removing from save data\");\r\n        }\r\n        \r\n        // Save to database\r\n        supabaseClient.from(\"game_progress\")\r\n          .update(progressData)\r\n          .eq(\"user_id\", currentUser.id)\r\n          .then(({ data, error }) => {\r\n            if (error) {\r\n              console.error(\"Failed to save to database, using localStorage:\", error);\r\n              saveProgressToLocalStorage(progressData);\r\n            } else {\r\n              console.log(\"Progress successfully saved to database\");\r\n              saveProgressToLocalStorage(progressData);\r\n              \r\n              // Notify any open screens that might need to update\r\n              document.dispatchEvent(new CustomEvent('progressSaved', { \r\n                detail: { gameState }\r\n              }));\r\n            }\r\n          });\r\n      });\r\n  } else {\r\n    console.log(\"Saving progress to localStorage (guest user)\");\r\n    saveProgressToLocalStorage(progressData);\r\n  }\r\n  \r\n  // Save the current game context for quick reference\r\n  const gameContext = {\r\n    stage: gameState.currentStage,\r\n    set: gameState.currentSet,\r\n    level: gameState.currentLevel,\r\n    timestamp: Date.now()\r\n  };\r\n  \r\n  localStorage.setItem(\"gameContext\", JSON.stringify(gameContext));\r\n  console.log(\"Game context saved:\", gameContext);\r\n}\r\n\r\n// Helper function to save to localStorage\r\nfunction saveProgressToLocalStorage(progressData) {\r\n    localStorage.setItem(\"simploxProgress\", JSON.stringify(progressData));\r\n}\r\n\r\nfunction debugGameProgress() {\r\n    console.group(\"Game Progress Debug\");\r\n    console.log(\"Current Stage:\", gameState.currentStage);\r\n    console.log(\"Current Set:\", gameState.currentSet);\r\n    console.log(\"Current Level:\", gameState.currentLevel);\r\n    \r\n    console.log(\"Unlocked Sets:\");\r\n    Object.entries(gameState.unlockedSets).forEach(([stage, sets]) => {\r\n        console.log(`Stage ${stage}:`, Array.from(sets).sort((a, b) => a - b));\r\n    });\r\n    \r\n    console.log(\"Unlocked Levels:\");\r\n    Object.entries(gameState.unlockedLevels).forEach(([setKey, levels]) => {\r\n        console.log(`Set ${setKey}:`, Array.from(levels).sort((a, b) => a - b));\r\n    });\r\n    \r\n    console.log(\"Completed Levels:\", Array.from(gameState.completedLevels).sort());\r\n    console.log(\"Perfect Levels:\", Array.from(gameState.perfectLevels).sort());\r\n    console.groupEnd();\r\n}\r\n\r\n// Add to existing performance-related functions\r\nfunction optimizeMobileRendering() {\r\n    // Throttle particle generation\r\n    ParticleSystem.maxParticles = 20; // Reduce from 50\r\n    \r\n    // Debounce heavy function calls\r\n    const debouncedShowScreen = debounce(showScreen, 200);\r\n    \r\n    // Limit complex animations on mobile\r\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n        document.body.classList.add('mobile-device');\r\n        \r\n        // Reduce complex CSS animations\r\n        document.head.insertAdjacentHTML('beforeend', `\r\n            <style>\r\n                @media (max-width: 768px) {\r\n                    .confetti, .particle {\r\n                        display: none;\r\n                    }\r\n                }\r\n            </style>\r\n        `);\r\n    }\r\n}\r\n\r\n// Utility debounce function\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function executedFunction(...args) {\r\n        const later = () => {\r\n            clearTimeout(timeout);\r\n            func(...args);\r\n        };\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n    };\r\n}\r\n\r\n// Modify existing event listeners\r\nfunction optimizeMobileEvents() {\r\n    // Use passive event listeners\r\n    document.addEventListener('touchstart', () => {}, { passive: true });\r\n    document.addEventListener('touchmove', () => {}, { passive: true });\r\n    \r\n    // Remove unnecessary event listeners\r\n    const cleanupEventListeners = () => {\r\n        document.querySelectorAll('.screen').forEach(screen => {\r\n            screen.removeEventListener('touchstart', () => {});\r\n            screen.removeEventListener('touchmove', () => {});\r\n        });\r\n    };\r\n}\r\n\r\n\r\n\r\n// Add to the end of the <body> section after all other scripts\r\n// Accessibility Menu Functionality\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Initialize accessibility menu\r\n    initAccessibilityMenu();\r\n});\r\n\r\nfunction initAccessibilityMenu() {\r\n    // Set up toggle button\r\n    const toggleButton = document.querySelector('.accessibility-toggle');\r\n    const modal = document.querySelector('.accessibility-modal');\r\n    const closeButton = document.querySelector('.close-accessibility');\r\n    \r\n    // Load saved settings\r\n    loadAccessibilitySettings();\r\n    \r\n    // Toggle modal visibility\r\n    if (toggleButton && modal) {\r\n        toggleButton.addEventListener('click', function() {\r\n            modal.classList.add('show');\r\n        });\r\n    }\r\n    \r\n    // Close modal\r\n    if (closeButton && modal) {\r\n        closeButton.addEventListener('click', function() {\r\n            modal.classList.remove('show');\r\n        });\r\n        \r\n        // Close when clicking outside the content\r\n        modal.addEventListener('click', function(e) {\r\n            if (e.target === modal) {\r\n                modal.classList.remove('show');\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Add event listeners to all accessibility buttons\r\n    const accessibilityButtons = document.querySelectorAll('.accessibility-button');\r\n    accessibilityButtons.forEach(button => {\r\n        button.addEventListener('click', function() {\r\n            const action = this.getAttribute('data-action');\r\n            const value = this.getAttribute('data-value');\r\n            \r\n            applyAccessibilitySetting(action, value);\r\n            \r\n            // Update active state on buttons\r\n            if (action !== 'fontSize' && action !== 'reset') {\r\n                const siblings = document.querySelectorAll(`[data-action=\"${action}\"]`);\r\n                siblings.forEach(sibling => sibling.classList.remove('active'));\r\n                this.classList.add('active');\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction applyAccessibilitySetting(action, value) {\r\n    const body = document.body;\r\n    \r\n    // Handle each setting type\r\n    switch(action) {\r\n        case 'contrast':\r\n            body.classList.remove('high-contrast', 'inverted-colors');\r\n            if (value === 'high') body.classList.add('high-contrast');\r\n            if (value === 'inverted') body.classList.add('inverted-colors');\r\n            break;\r\n            \r\n        case 'theme':\r\n            body.classList.remove('light-theme', 'dark-theme');\r\n            if (value === 'light') body.classList.add('light-theme');\r\n            if (value === 'dark') body.classList.add('dark-theme');\r\n            break;\r\n            \r\n        case 'saturation':\r\n            body.classList.remove('grayscale');\r\n            if (value === 'grayscale') body.classList.add('grayscale');\r\n            break;\r\n            \r\n        case 'fontSize':\r\n            let currentScale = parseFloat(getComputedStyle(body).getPropertyValue('--font-scale') || 1);\r\n            \r\n            if (value === 'increase') {\r\n                currentScale = Math.min(currentScale + 0.1, 1.8);\r\n                body.style.setProperty('--font-scale', currentScale);\r\n                body.style.fontSize = `calc(1rem * ${currentScale})`;\r\n            } else if (value === 'decrease') {\r\n                currentScale = Math.max(currentScale - 0.1, 0.8);\r\n                body.style.setProperty('--font-scale', currentScale);\r\n                body.style.fontSize = `calc(1rem * ${currentScale})`;\r\n            } else if (value === 'reset') {\r\n                body.style.removeProperty('--font-scale');\r\n                body.style.fontSize = '';\r\n            }\r\n            break;\r\n            \r\n        case 'fontFamily':\r\n            body.classList.remove('dyslexic-font');\r\n            if (value === 'dyslexic') body.classList.add('dyslexic-font');\r\n            break;\r\n            \r\n        case 'letterSpacing':\r\n            body.classList.remove('increased-letter-spacing');\r\n            if (value === 'increased') body.classList.add('increased-letter-spacing');\r\n            break;\r\n            \r\n        case 'animations':\r\n            body.classList.remove('no-animations', 'reduced-animations');\r\n            if (value === 'disabled') body.classList.add('no-animations');\r\n            if (value === 'reduced') body.classList.add('reduced-animations');\r\n            break;\r\n            \r\n        case 'focus':\r\n            body.classList.remove('high-focus');\r\n            if (value === 'high') body.classList.add('high-focus');\r\n            break;\r\n            \r\n        case 'buttonSize':\r\n            body.classList.remove('large-buttons');\r\n            if (value === 'large') body.classList.add('large-buttons');\r\n            break;\r\n            \r\n        case 'cursorSize':\r\n            body.classList.remove('large-cursor');\r\n            if (value === 'large') body.classList.add('large-cursor');\r\n            break;\r\n            \r\n        case 'reset':\r\n            if (value === 'all') resetAllAccessibilitySettings();\r\n            break;\r\n    }\r\n    \r\n    // Save settings\r\n    saveAccessibilitySettings();\r\n}\r\n\r\nfunction saveAccessibilitySettings() {\r\n    const body = document.body;\r\n    const settings = {\r\n        classNames: body.className,\r\n        fontSize: body.style.fontSize,\r\n        fontScale: body.style.getPropertyValue('--font-scale')\r\n    };\r\n    \r\n    localStorage.setItem('accessibilitySettings', JSON.stringify(settings));\r\n}\r\n\r\nfunction loadAccessibilitySettings() {\r\n    const savedSettings = localStorage.getItem('accessibilitySettings');\r\n    if (savedSettings) {\r\n        const settings = JSON.parse(savedSettings);\r\n        const body = document.body;\r\n        \r\n        // Apply saved class names\r\n        if (settings.classNames) {\r\n            body.className = settings.classNames;\r\n        }\r\n        \r\n        // Apply font size\r\n        if (settings.fontSize) {\r\n            body.style.fontSize = settings.fontSize;\r\n        }\r\n        \r\n        // Apply font scale\r\n        if (settings.fontScale) {\r\n            body.style.setProperty('--font-scale', settings.fontScale);\r\n        }\r\n        \r\n        // Mark active buttons\r\n        updateActiveButtons();\r\n    }\r\n}\r\n\r\nfunction updateActiveButtons() {\r\n    const body = document.body;\r\n    \r\n    // Check classes and update button states\r\n    const classesToCheck = {\r\n        'high-contrast': { action: 'contrast', value: 'high' },\r\n        'inverted-colors': { action: 'contrast', value: 'inverted' },\r\n        'light-theme': { action: 'theme', value: 'light' },\r\n        'dark-theme': { action: 'theme', value: 'dark' },\r\n        'grayscale': { action: 'saturation', value: 'grayscale' },\r\n        'dyslexic-font': { action: 'fontFamily', value: 'dyslexic' },\r\n        'increased-letter-spacing': { action: 'letterSpacing', value: 'increased' },\r\n        'no-animations': { action: 'animations', value: 'disabled' },\r\n        'reduced-animations': { action: 'animations', value: 'reduced' },\r\n        'high-focus': { action: 'focus', value: 'high' },\r\n        'large-buttons': { action: 'buttonSize', value: 'large' },\r\n        'large-cursor': { action: 'cursorSize', value: 'large' }\r\n    };\r\n    \r\n    // Loop through possible classes and update buttons\r\n    Object.entries(classesToCheck).forEach(([className, buttonData]) => {\r\n        const hasClass = body.classList.contains(className);\r\n        const button = document.querySelector(`[data-action=\"${buttonData.action}\"][data-value=\"${buttonData.value}\"]`);\r\n        \r\n        if (button) {\r\n            if (hasClass) {\r\n                button.classList.add('active');\r\n            } else {\r\n                button.classList.remove('active');\r\n            }\r\n        }\r\n    });\r\n    \r\n    // Set default buttons if no special settings\r\n    if (!document.querySelector('[data-action=\"contrast\"].active')) {\r\n        document.querySelector('[data-action=\"contrast\"][data-value=\"normal\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"theme\"].active')) {\r\n        document.querySelector('[data-action=\"theme\"][data-value=\"default\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"saturation\"].active')) {\r\n        document.querySelector('[data-action=\"saturation\"][data-value=\"normal\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"fontFamily\"].active')) {\r\n        document.querySelector('[data-action=\"fontFamily\"][data-value=\"default\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"letterSpacing\"].active')) {\r\n        document.querySelector('[data-action=\"letterSpacing\"][data-value=\"normal\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"animations\"].active')) {\r\n        document.querySelector('[data-action=\"animations\"][data-value=\"enabled\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"focus\"].active')) {\r\n        document.querySelector('[data-action=\"focus\"][data-value=\"normal\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"buttonSize\"].active')) {\r\n        document.querySelector('[data-action=\"buttonSize\"][data-value=\"normal\"]')?.classList.add('active');\r\n    }\r\n    \r\n    if (!document.querySelector('[data-action=\"cursorSize\"].active')) {\r\n        document.querySelector('[data-action=\"cursorSize\"][data-value=\"normal\"]')?.classList.add('active');\r\n    }\r\n}\r\n\r\nfunction resetAllAccessibilitySettings() {\r\n    const body = document.body;\r\n    \r\n    // Remove all accessibility classes\r\n    body.classList.remove(\r\n        'high-contrast', 'inverted-colors', 'light-theme', 'dark-theme',\r\n        'grayscale', 'dyslexic-font', 'increased-letter-spacing',\r\n        'no-animations', 'reduced-animations', 'high-focus',\r\n        'large-buttons', 'large-cursor'\r\n    );\r\n    \r\n    // Reset inline styles\r\n    body.style.fontSize = '';\r\n    body.style.removeProperty('--font-scale');\r\n    \r\n    // Reset active buttons\r\n    document.querySelectorAll('.accessibility-button.active').forEach(button => {\r\n        button.classList.remove('active');\r\n    });\r\n    \r\n    // Set default buttons as active\r\n    document.querySelector('[data-action=\"contrast\"][data-value=\"normal\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"theme\"][data-value=\"default\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"saturation\"][data-value=\"normal\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"fontFamily\"][data-value=\"default\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"letterSpacing\"][data-value=\"normal\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"animations\"][data-value=\"enabled\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"focus\"][data-value=\"normal\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"buttonSize\"][data-value=\"normal\"]')?.classList.add('active');\r\n    document.querySelector('[data-action=\"cursorSize\"][data-value=\"normal\"]')?.classList.add('active');\r\n    \r\n    // Clear saved settings\r\n    localStorage.removeItem('accessibilitySettings');\r\n}\r\n\r\nasync function trackWordEncounter(word, mode) {\r\n  if (currentUser) {  // Remove status check - allow for all registered users\r\n    try {\r\n      // Check if word exists in history\r\n      const { data, error } = await supabaseClient.from(\"word_practice_history\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", currentUser.id)\r\n        .eq(\"word\", word)\r\n        .single();\r\n      \r\n      if (error && error.code !== 'PGRST116') {\r\n        return console.error(\"Error fetching word history:\", error);\r\n      }\r\n      \r\n      let isNewWord = false;\r\n      let coinReward = 0;\r\n      \r\n      if (data) {\r\n        // Word exists, update count\r\n        const newCount = data.practice_count + 1;\r\n        coinReward = newCount <= 5 ? 3 : 1;\r\n        \r\n        const { error } = await supabaseClient.from(\"word_practice_history\")\r\n          .update({\r\n            practice_count: newCount,\r\n            last_practiced_at: new Date().toISOString(),\r\n            game_mode: mode,\r\n            coins_earned: data.coins_earned + coinReward\r\n          })\r\n          .eq(\"user_id\", currentUser.id)\r\n          .eq(\"word\", word);\r\n          \r\n        if (error) return console.error(\"Error updating word history:\", error);\r\n      } else {\r\n        // New word, insert record\r\n        isNewWord = true;\r\n        coinReward = 3;\r\n        \r\n        const { error } = await supabaseClient.from(\"word_practice_history\")\r\n          .insert([{\r\n            user_id: currentUser.id,\r\n            word: word,\r\n            practice_count: 1,\r\n            game_mode: mode,\r\n            coins_earned: coinReward\r\n          }]);\r\n          \r\n        if (error) return console.error(\"Error inserting word history:\", error);\r\n        \r\n        // Update unique words count\r\n        const { data, error: statsError } = await supabaseClient.from(\"player_stats\")\r\n          .select(\"unique_words_practiced\")\r\n          .eq(\"user_id\", currentUser.id)\r\n          .single();\r\n          \r\n        if (!statsError) {\r\n          const newWordCount = (data?.unique_words_practiced || 0) + 1;\r\n          const { error } = await supabaseClient.from(\"player_stats\")\r\n            .update({ unique_words_practiced: newWordCount })\r\n            .eq(\"user_id\", currentUser.id);\r\n            \r\n          if (error) console.error(\"Error updating player stats:\", error);\r\n          else {\r\n            // Update UI word count immediately\r\n            document.querySelectorAll(\"#totalWords\").forEach(el => {\r\n              animateNumber(el, parseInt(el.textContent) || 0, newWordCount);\r\n            });\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (coinReward > 0) {\r\n        await CoinsManager.updateCoins(coinReward);\r\n      }\r\n      \r\n      return { isNewWord, coinReward };\r\n    } catch (e) {\r\n      console.error(\"Error in trackWordEncounter:\", e);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createRainingParticles() {\r\n  const questionScreen = document.getElementById('question-screen');\r\n  if (!questionScreen) return;\r\n  \r\n  const letters = [...\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",...\"אבגדהוזחטיכלמנסעפצקרשת\"];\r\n  const containerWidth = questionScreen.clientWidth;\r\n  \r\n  // Clear any existing interval\r\n  if (window.rainingLettersInterval) {\r\n    clearInterval(window.rainingLettersInterval);\r\n  }\r\n  \r\n  // Create raining letters\r\n  window.rainingLettersInterval = setInterval(() => {\r\n    // Create between 1 and 3 letters each interval\r\n    const count = Math.floor(Math.random() * 3) + 1;\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      const letter = document.createElement('div');\r\n      letter.className = 'raining-letter';\r\n      letter.textContent = letters[Math.floor(Math.random() * letters.length)];\r\n      \r\n      // Random position and speed\r\n      const left = Math.random() * containerWidth;\r\n      const duration = 5 + Math.random() * 5; // 5-10 seconds\r\n      \r\n      letter.style.left = `${left}px`;\r\n      letter.style.animationDuration = `${duration}s`;\r\n      \r\n      questionScreen.appendChild(letter);\r\n      \r\n      // Remove letter after animation completes\r\n      setTimeout(() => {\r\n        if (letter.parentNode === questionScreen) {\r\n          questionScreen.removeChild(letter);\r\n        }\r\n      }, duration * 1000);\r\n    }\r\n  }, 300);\r\n}\r\n\r\nfunction updateBossHealthBar() {\r\n  // Only update if we're in boss level\r\n  if (!currentGame.isBossLevel) return;\r\n  \r\n  console.log(\"Updating boss health bar\");\r\n\r\n  const progressCircle = document.querySelector('.progress-circle');\r\n  if (!progressCircle) {\r\n    console.error(\"Progress circle not found\");\r\n    return;\r\n  }\r\n  \r\n  const progress = progressCircle.querySelector('.progress');\r\n  if (!progress) {\r\n    console.error(\"Progress element not found\");\r\n    return;\r\n  }\r\n  \r\n  // Calculate health values\r\n  const totalWords = currentGame.words.length;\r\n  const currentIndex = currentGame.currentIndex || 0;\r\n  const remainingWords = Math.max(0, totalWords - currentIndex);\r\n  const remainingPercentage = remainingWords / totalWords;\r\n  \r\n  console.log(`Boss health: ${remainingPercentage.toFixed(2) * 100}% (${remainingWords}/${totalWords})`);\r\n  \r\n  // Calculate the circumference\r\n  const circumference = 2 * Math.PI * 54;\r\n  \r\n  // Update the stroke dash offset (reverse of normal progress)\r\n  progress.style.strokeDashoffset = circumference * (1 - remainingPercentage);\r\n  \r\n  // Add boss-health class if not already present\r\n  if (!progress.classList.contains('boss-health')) {\r\n    progress.classList.add('boss-health');\r\n  }\r\n  \r\n  // Change color based on health\r\n  if (remainingPercentage > 0.66) {\r\n    // Full health - green\r\n    progress.style.stroke = '#4CAF50';\r\n    progress.classList.remove('warning');\r\n  } else if (remainingPercentage > 0.33) {\r\n    // Medium health - yellow/orange\r\n    progress.style.stroke = '#FFA500';\r\n    progress.classList.remove('warning');\r\n    \r\n    // Boss health restoration at 2/3 health (once)\r\n    if (remainingPercentage <= 0.66 && !currentGame.bossFirstHealthRestored) {\r\n      currentGame.bossFirstHealthRestored = true;\r\n      console.log(\"First boss health restoration\");\r\n      \r\n      // Partially restore health (reduce current index)\r\n      const newIndex = Math.floor(totalWords * 0.25); // 75% health\r\n      currentGame.currentIndex = newIndex;\r\n      \r\n      // Show visual effect\r\n      const bossOrb = document.querySelector('.boss-orb-inner');\r\n      if (bossOrb) {\r\n        bossOrb.style.background = 'radial-gradient(circle at 30% 30%, #FFEB3B, #FFA500)';\r\n        setTimeout(() => {\r\n          bossOrb.style.background = 'radial-gradient(circle at 30% 30%, #ff3333, #990000)';\r\n        }, 1000);\r\n      }\r\n      \r\n      // Update health bar after restoring\r\n      setTimeout(() => updateBossHealthBar(), 100);\r\n    }\r\n  } else {\r\n    // Low health - red\r\n    progress.style.stroke = '#FF3333';\r\n    progress.classList.add('warning');\r\n    \r\n    // Boss health restoration at 1/3 health (once)\r\n    if (remainingPercentage <= 0.33 && !currentGame.bossSecondHealthRestored) {\r\n      currentGame.bossSecondHealthRestored = true;\r\n      console.log(\"Second boss health restoration\");\r\n      \r\n      // Partially restore health (reduce current index)\r\n      const newIndex = Math.floor(totalWords * 0.5); // 50% health\r\n      currentGame.currentIndex = newIndex;\r\n      \r\n      // Show visual effect\r\n      const bossOrb = document.querySelector('.boss-orb-inner');\r\n      if (bossOrb) {\r\n        bossOrb.style.background = 'radial-gradient(circle at 30% 30%, #4CAF50, #388E3C)';\r\n        setTimeout(() => {\r\n          bossOrb.style.background = 'radial-gradient(circle at 30% 30%, #ff3333, #990000)';\r\n        }, 1000);\r\n      }\r\n      \r\n      // Update health bar after restoring\r\n      setTimeout(() => updateBossHealthBar(), 100);\r\n    }\r\n  }\r\n}\r\n\r\nfunction healBoss(newHealthPercentage, flashColor) {\r\n  const progressCircle = document.querySelector('.progress-circle');\r\n  const progress = progressCircle ? progressCircle.querySelector('.progress') : null;\r\n  const bossOrb = document.querySelector('.boss-orb-inner');\r\n  \r\n  if (!progress || !bossOrb) return;\r\n  \r\n  // Flash the boss orb with the specified color\r\n  const originalColor = bossOrb.style.background;\r\n  bossOrb.style.background = flashColor;\r\n  bossOrb.classList.add('boss-restore-health');\r\n  \r\n  // Flash the screen\r\n  const questionScreen = document.querySelector('.question-screen');\r\n  if (questionScreen) {\r\n    questionScreen.style.animation = 'none';\r\n    questionScreen.offsetHeight; // Trigger reflow\r\n    questionScreen.style.animation = 'bossRestoreHealth 1s';\r\n  }\r\n  \r\n  // Calculate new offset\r\n  const circumference = 2 * Math.PI * 54;\r\n  const newOffset = circumference * (1 - newHealthPercentage);\r\n  \r\n  // Animate health bar filling\r\n  setTimeout(() => {\r\n    progress.style.transition = 'stroke-dashoffset 1s ease-out';\r\n    progress.style.strokeDashoffset = newOffset;\r\n    \r\n    // Reset boss orb\r\n    setTimeout(() => {\r\n      bossOrb.style.background = originalColor;\r\n      bossOrb.classList.remove('boss-restore-health');\r\n    }, 1000);\r\n  }, 300);\r\n}\r\n\r\nfunction showBossHitEffect(randomColor = false) {\r\n  const bossOrb = document.querySelector('.boss-orb-inner');\r\n  if (!bossOrb) return;\r\n  \r\n  // Store original background\r\n  const originalBg = bossOrb.style.background;\r\n  \r\n  // Apply random color if requested\r\n  if (randomColor) {\r\n    const colors = ['yellow', 'purple', 'turquoise', 'darkgreen', 'brown'];\r\n    const randomColorChoice = colors[Math.floor(Math.random() * colors.length)];\r\n    bossOrb.style.background = `radial-gradient(circle at 30% 30%, ${randomColorChoice}, #990000)`;\r\n  }\r\n  \r\n  // Add hit effect\r\n  bossOrb.classList.add('boss-orb-hit');\r\n  \r\n  // Reset after animation\r\n  setTimeout(() => {\r\n    bossOrb.classList.remove('boss-orb-hit');\r\n    // Reset background only if we changed it\r\n    if (randomColor) {\r\n      bossOrb.style.background = originalBg;\r\n    }\r\n  }, 300);\r\n}\r\n\r\n\r\nfunction applyBossLevelStyles() {\r\n  console.log(\"Forcefully applying boss level styles\");\r\n  \r\n  const questionScreen = document.getElementById(\"question-screen\");\r\n  if (questionScreen) {\r\n    questionScreen.style.setProperty(\"background\", \"linear-gradient(135deg, #800000, #3a0000)\", \"important\");\r\n    questionScreen.style.setProperty(\"animation\", \"pulseBg 4s infinite\", \"important\");\r\n  }\r\n  \r\n  // Add boss animations stylesheet if not already present\r\n  if (!document.getElementById(\"boss-animations\")) {\r\n    const styleElem = document.createElement(\"style\");\r\n    styleElem.id = \"boss-animations\";\r\n    styleElem.textContent = `\r\n      @keyframes pulseBg {\r\n        0%, 100% { filter: brightness(1); }\r\n        50% { filter: brightness(1.2); }\r\n      }\r\n      \r\n      @keyframes pulseOrb {\r\n        0%, 100% { transform: scale(1); filter: brightness(1); }\r\n        50% { transform: scale(1.3); filter: brightness(1.4); }\r\n      }\r\n      \r\n      @keyframes pulseWord {\r\n        0%, 100% { transform: scale(1); }\r\n        50% { transform: scale(1.05); }\r\n      }\r\n    `;\r\n    document.head.appendChild(styleElem);\r\n  }\r\n  \r\n  // Style the question word\r\n  const questionWord = document.getElementById(\"question-word\");\r\n  if (questionWord) {\r\n    questionWord.style.setProperty(\"color\", \"#ff3333\", \"important\");\r\n    questionWord.style.setProperty(\"text-shadow\", \"0 0 10px rgba(255, 0, 0, 0.5)\", \"important\");\r\n    questionWord.style.setProperty(\"animation\", \"pulseWord 2s infinite\", \"important\");\r\n  }\r\n  \r\n  // Replace coins container with boss orb\r\n  const coinsContainer = document.querySelector(\".coins-container\");\r\n  if (coinsContainer) {\r\n    if (!window.originalCoinsHTML) {\r\n      window.originalCoinsHTML = coinsContainer.innerHTML;\r\n    }\r\n    \r\n    coinsContainer.innerHTML = `\r\n    <div class=\"boss-orb\" style=\"\r\n      width: 85px;\r\n      height: 85px;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-75%, -75%);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      z-index: 10;\r\n    \">\r\n      <div class=\"boss-orb-inner\" style=\"\r\n        width: 50px;\r\n        height: 50px;\r\n        background: radial-gradient(circle at 30% 30%, #ff3333, #990000);\r\n        border-radius: 50%;\r\n        box-shadow: 0 0 20px #ff3333, inset 0 0 10px rgba(255,255,255,0.3);\r\n        animation: pulseOrb 1s infinite;\r\n      \"></div>\r\n    </div>\r\n  `;\r\n  }\r\n}\r\n\r\nfunction handleBossAnswer(correct) {\r\n  if (correct) {\r\n    // Make progress bar flicker\r\n    const progressCircle = document.querySelector(\".progress-circle\");\r\n    const progressBar = progressCircle?.querySelector(\".progress\");\r\n    \r\n    if (progressBar) {\r\n      // Save original stroke color\r\n      const originalColor = progressBar.style.stroke;\r\n      \r\n      // Create and apply flicker animation\r\n      const flickerColors = [\"#ffffff\", \"#ffff00\", \"#800080\", \"#990000\"];\r\n      const randomColor = flickerColors[Math.floor(Math.random() * flickerColors.length)];\r\n      \r\n      progressBar.style.transition = \"stroke 0.2s ease\";\r\n      progressBar.style.stroke = randomColor;\r\n      \r\n      // Reset back to green after flicker\r\n      setTimeout(() => {\r\n        progressBar.style.stroke = originalColor;\r\n      }, 200);\r\n    }\r\n  }\r\n}\r\n\r\n// Boss Level Visual and Interaction Enhancements\r\n\r\nfunction createBossTimer() {\r\n    const timerContainer = document.createElement('div');\r\n    timerContainer.id = 'boss-timer';\r\n    timerContainer.style.cssText = `\r\n        position: absolute;\r\n        top: 10px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        display: flex;\r\n        justify-content: center;\r\n        z-index: 10;\r\n    `;\r\n    \r\n    const timerDisplay = document.createElement('div');\r\n    timerDisplay.style.cssText = `\r\n        background-color: rgba(255, 215, 0, 0.8);\r\n        color: #000;\r\n        font-family: 'Digital', monospace;\r\n        font-size: 2rem;\r\n        padding: 5px 10px;\r\n        border-radius: 5px;\r\n        letter-spacing: 3px;\r\n    `;\r\n    \r\n    timerContainer.appendChild(timerDisplay);\r\n    return { container: timerContainer, display: timerDisplay };\r\n}\r\n\r\nfunction updateBossTimer(timerDisplay, timeRemaining) {\r\n    if (timerDisplay) {\r\n        const minutes = Math.floor(timeRemaining / 60);\r\n        const seconds = timeRemaining % 60;\r\n        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    }\r\n}\r\n\r\nfunction createLightningEffect() {\r\n    const lightningContainer = document.createElement('div');\r\n    lightningContainer.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(255, 255, 255, 0.8);\r\n        z-index: 1000;\r\n        pointer-events: none;\r\n        opacity: 0;\r\n        transition: opacity 0.1s ease;\r\n    `;\r\n    document.body.appendChild(lightningContainer);\r\n\r\n    const flickerCount = Math.floor(Math.random() * 3) + 1;\r\n    let delay = 0;\r\n\r\n    for (let i = 0; i < flickerCount; i++) {\r\n        setTimeout(() => {\r\n            lightningContainer.style.opacity = '1';\r\n            setTimeout(() => {\r\n                lightningContainer.style.opacity = '0';\r\n            }, 50);\r\n        }, delay);\r\n        delay += 200;\r\n    }\r\n\r\n    setTimeout(() => {\r\n        document.body.removeChild(lightningContainer);\r\n    }, delay + 500);\r\n}\r\n\r\nfunction createBossRainingLetters() {\r\n    const questionScreen = document.getElementById('question-screen');\r\n    if (!questionScreen) return;\r\n\r\n    // Clear any existing intervals\r\n    if (window.rainingLettersInterval) {\r\n        clearInterval(window.rainingLettersInterval);\r\n    }\r\n\r\n    const letters = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ', ...'אבגדהוזחטיכלמנסעפצקרשת'];\r\n    const screenWidth = questionScreen.clientWidth;\r\n\r\n    window.rainingLettersInterval = setInterval(() => {\r\n        const particleCount = Math.floor(Math.random() * 3) + 1;\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const letter = document.createElement('div');\r\n            letter.className = 'boss-raining-letter';\r\n            letter.textContent = letters[Math.floor(Math.random() * letters.length)];\r\n            \r\n            letter.style.cssText = `\r\n                position: absolute;\r\n                top: -20px;\r\n                left: ${Math.random() * screenWidth}px;\r\n                color: rgba(255, 0, 0, 0.4);\r\n                font-size: 16px;\r\n                animation: boss-letter-rain 5s linear forwards;\r\n                z-index: 1;\r\n                text-shadow: 0 0 5px rgba(255, 0, 0, 0.3);\r\n            `;\r\n\r\n            questionScreen.appendChild(letter);\r\n\r\n            // Remove letter after animation\r\n            setTimeout(() => {\r\n                if (letter.parentNode === questionScreen) {\r\n                    questionScreen.removeChild(letter);\r\n                }\r\n            }, 5000);\r\n        }\r\n    }, 300);\r\n}\r\n\r\nfunction stopBossRainingLetters() {\r\n    if (window.rainingLettersInterval) {\r\n        clearInterval(window.rainingLettersInterval);\r\n        window.rainingLettersInterval = null;\r\n    }\r\n}\r\n\r\nfunction createBossStyleSheet() {\r\n  const styleElem = document.createElement(\"style\");\r\n  styleElem.id = \"boss-level-styles\";\r\n  styleElem.textContent = `\r\n    @keyframes boss-letter-rain {\r\n      0% { \r\n        transform: translateY(-20px);\r\n        opacity: 0.6;\r\n      }\r\n      100% { \r\n        transform: translateY(100vh);\r\n        opacity: 0;\r\n      }\r\n    }\r\n\r\n    @keyframes boss-shrink {\r\n      0% { transform: scale(1); opacity: 1; }\r\n      50% { transform: scale(0.8); opacity: 0.8; }\r\n      100% { transform: scale(0); opacity: 0; }\r\n    }\r\n\r\n    @keyframes fade-to-blue {\r\n      0% { background: linear-gradient(135deg, #800000, #3a0000); }\r\n      20% { background: linear-gradient(135deg, #800000, #3a0000); }\r\n      60% { background: linear-gradient(135deg, #4a1582, #0d47a1); }\r\n      100% { background: radial-gradient(circle at center, var(--secondary) 0%, var(--primary-dark) 100%); }\r\n    }\r\n    \r\n    @keyframes incinerateEffect {\r\n      0% { transform: scale(0); opacity: 0; }\r\n      10% { transform: scale(0.5); opacity: 0.8; }\r\n      50% { transform: scale(1.5); opacity: 1; }\r\n      100% { transform: scale(3); opacity: 0; }\r\n    }\r\n    \r\n    .incineration-effect {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      background: radial-gradient(circle, #ff9900, #ff3300);\r\n      opacity: 0;\r\n      transform: scale(0);\r\n      animation: incinerateEffect 1.5s forwards;\r\n    }\r\n  `;\r\n  document.head.appendChild(styleElem);\r\n}\r\n\r\nfunction showModernBossVictoryScreen() {\r\n    const victoryOverlay = document.createElement('div');\r\n    victoryOverlay.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0, 0, 0, 0.8);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        z-index: 2000;\r\n        opacity: 0;\r\n        transition: opacity 0.5s ease;\r\n    `;\r\n\r\n    const victoryContent = document.createElement('div');\r\n    victoryContent.style.cssText = `\r\n        background: linear-gradient(135deg, #00c6ff, #0072ff);\r\n        padding: 2rem;\r\n        border-radius: 20px;\r\n        text-align: center;\r\n        max-width: 500px;\r\n        width: 90%;\r\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\r\n    `;\r\n\r\n    victoryContent.innerHTML = `\r\n        <h2 style=\"color: white; font-size: 2.5rem; margin-bottom: 1rem;\">🏆 Boss Defeated!</h2>\r\n        <div class=\"victory-stats\" style=\"display: flex; justify-content: space-around; margin: 1.5rem 0; color: white;\">\r\n            <div>\r\n                <div style=\"font-size: 1.2rem; opacity: 0.7;\">Words Learned</div>\r\n                <div style=\"font-size: 2rem; font-weight: bold;\">${currentGame.words.length}</div>\r\n            </div>\r\n            <div>\r\n                <div style=\"font-size: 1.2rem; opacity: 0.7;\">Coins Earned</div>\r\n                <div style=\"font-size: 2rem; font-weight: bold;\">100</div>\r\n            </div>\r\n        </div>\r\n        <div style=\"display: flex; justify-content: center; gap: 1rem;\">\r\n            <button class=\"continue-btn\" style=\"\r\n                background: #4CAF50; \r\n                color: white; \r\n                border: none; \r\n                padding: 1rem 2rem; \r\n                border-radius: 50px; \r\n                font-size: 1rem; \r\n                cursor: pointer;\r\n                transition: transform 0.3s ease;\r\n            \">Continue to Next Set</button>\r\n            <button class=\"home-btn\" style=\"\r\n                background: rgba(255,255,255,0.2); \r\n                color: white; \r\n                border: 2px solid white; \r\n                padding: 1rem 2rem; \r\n                border-radius: 50px; \r\n                font-size: 1rem; \r\n                cursor: pointer;\r\n                transition: transform 0.3s ease;\r\n            \">Return Home</button>\r\n        </div>\r\n    `;\r\n\r\n    const continueBtn = victoryContent.querySelector('.continue-btn');\r\n    const homeBtn = victoryContent.querySelector('.home-btn');\r\n\r\n    [continueBtn, homeBtn].forEach(btn => {\r\n        btn.addEventListener('mouseenter', () => {\r\n            btn.style.transform = 'scale(1.05)';\r\n        });\r\n        btn.addEventListener('mouseleave', () => {\r\n            btn.style.transform = 'scale(1)';\r\n        });\r\n    });\r\n\r\n    continueBtn.addEventListener('click', () => {\r\n        victoryOverlay.style.opacity = '0';\r\n        setTimeout(() => {\r\n            victoryOverlay.remove();\r\n            unlockNextSet();\r\n            const nextSet = gameState.currentSet + 1;\r\n            gameState.currentSet = nextSet;\r\n            gameState.currentLevel = 1;\r\n            startLevel(1);\r\n        }, 500);\r\n    });\r\n\r\n    homeBtn.addEventListener('click', () => {\r\n        victoryOverlay.style.opacity = '0';\r\n        setTimeout(() => {\r\n            victoryOverlay.remove();\r\n            unlockNextSet();\r\n            showScreen('welcome-screen');\r\n        }, 500);\r\n    });\r\n\r\n    victoryOverlay.appendChild(victoryContent);\r\n    document.body.appendChild(victoryOverlay);\r\n\r\n    // Trigger fade-in\r\n    requestAnimationFrame(() => {\r\n        victoryOverlay.style.opacity = '1';\r\n    });\r\n}\r\n\r\n// REPLACE showBossDefeatEffect function\r\nfunction showBossDefeatEffect() {\r\n    console.log('Starting boss defeat effect sequence');\r\n    \r\n    if (currentGame.bossDefeatedEffectShown) {\r\n        console.log('Boss defeat effect already shown, skipping');\r\n        return;\r\n    }\r\n    \r\n    // Set flag to prevent multiple executions\r\n    currentGame.bossDefeatedEffectShown = true;\r\n    \r\n    // First determine if the coin reward needs to be applied\r\n    let coinRewardNeeded = !currentGame.bossRewardApplied;\r\n    currentGame.bossRewardApplied = true;\r\n    \r\n    // Get the original coin count\r\n    const originalCoins = gameState.coins;\r\n    let targetCoins = originalCoins;\r\n    \r\n    // Apply coin reward if needed\r\n    if (coinRewardNeeded) {\r\n        targetCoins = originalCoins;\r\n        console.log(`Adding 100 coins: ${originalCoins} -> ${targetCoins}`);\r\n        gameState.coins = targetCoins;\r\n        saveProgress();\r\n    } else {\r\n        console.log('Coin reward already applied, skipping');\r\n    }\r\n    \r\n    // Background transition\r\n    const questionScreen = document.querySelector('.question-screen');\r\n    if (questionScreen) {\r\n        console.log('Creating background transition overlay');\r\n        \r\n        const transitionOverlay = document.createElement('div');\r\n        transitionOverlay.className = 'background-transition-overlay';\r\n        transitionOverlay.style.cssText = `\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(135deg, #800000, #3a0000); \r\n            z-index: -1;\r\n            animation: fade-to-blue 5s ease-in-out forwards;\r\n            pointer-events: none;\r\n        `;\r\n        \r\n        questionScreen.insertBefore(transitionOverlay, questionScreen.firstChild);\r\n    }\r\n    \r\n    // Boss orb disappearing animation\r\n    setTimeout(() => {\r\n        const bossOrb = document.querySelector('.boss-orb-inner');\r\n        \r\n        if (bossOrb) {\r\n            console.log('Disintegrating boss orb');\r\n            \r\n            const incinerationEffect = document.createElement('div');\r\n            incinerationEffect.className = 'incineration-effect';\r\n            bossOrb.appendChild(incinerationEffect);\r\n            \r\n            bossOrb.style.animation = 'boss-shrink 2.5s forwards';\r\n            \r\n            // After boss orb starts disappearing, show coin animation\r\n            setTimeout(() => {\r\n                console.log('Applying coin reward animation');\r\n                \r\n                const coinsContainer = document.querySelector('.coins-container');\r\n                \r\n                if (coinsContainer && window.originalCoinsHTML) {\r\n                    // Restore original coins HTML\r\n                    coinsContainer.innerHTML = window.originalCoinsHTML;\r\n                    \r\n                    const coinIcon = coinsContainer.querySelector('.coin-icon');\r\n                    const coinCount = coinsContainer.querySelector('.coin-count');\r\n                    \r\n                    if (coinCount) {\r\n                        // Make it prominent\r\n                        coinsContainer.style.transform = 'scale(1.2)';\r\n                        coinsContainer.style.transition = 'transform 0.3s ease';\r\n                        \r\n                        // IMPORTANT: Start with original value \r\n                        coinCount.textContent = originalCoins;\r\n                        coinCount.style.color = 'white';\r\n                        \r\n                        // Animate coin increase\r\n                        setTimeout(() => {\r\n                            // Custom animation\r\n                            const steps = 60;\r\n                            const stepDelay = 2000 / steps;\r\n                            let currentStep = 0;\r\n                            \r\n                            const animateCoins = () => {\r\n                                if (currentStep <= steps) {\r\n                                    const progress = currentStep / steps;\r\n                                    const currentValue = Math.round(originalCoins + (targetCoins - originalCoins) * progress);\r\n                                    \r\n                                    coinCount.textContent = currentValue;\r\n                                    coinCount.style.color = 'var(--gold)';\r\n                                    coinCount.style.textShadow = '0 0 10px var(--gold)';\r\n                                    \r\n                                    currentStep++;\r\n                                    setTimeout(animateCoins, stepDelay);\r\n                                } else {\r\n                                    // Animation complete\r\n                                    coinCount.textContent = targetCoins;\r\n                                    \r\n                                    // Maintain emphasis for a while\r\n                                    setTimeout(() => {\r\n                                        coinCount.style.color = 'white';\r\n                                        coinCount.style.textShadow = 'none';\r\n                                        coinsContainer.style.transform = 'scale(1)';\r\n                                    }, 1000);\r\n                                }\r\n                            };\r\n                            \r\n                            // Start animation\r\n                            animateCoins();\r\n                            \r\n                            // Pulse coin icon\r\n                            if (coinIcon) {\r\n                                coinIcon.classList.add('coin-pulse');\r\n                                coinIcon.style.animation = 'coinPulse 0.5s ease-in-out 6';\r\n                            }\r\n                        }, 100);\r\n                    }\r\n                }\r\n            }, 500);\r\n            \r\n            // Show victory notification after animations\r\n            setTimeout(() => {\r\n                console.log('Showing victory notification');\r\n                showBossVictoryNotification();\r\n            }, 5000);\r\n        } else {\r\n            setTimeout(() => {\r\n                showBossVictoryNotification();\r\n            }, 3000);\r\n        }\r\n    }, 1000);\r\n    \r\n    // Add animation styles if needed\r\n    if (!document.getElementById('boss-transition-style')) {\r\n        const styleEl = document.createElement('style');\r\n        styleEl.id = 'boss-transition-style';\r\n        styleEl.textContent = `\r\n            @keyframes fade-to-blue {\r\n                0% { background: linear-gradient(135deg, #800000, #3a0000); }\r\n                20% { background: linear-gradient(135deg, #800000, #3a0000); }\r\n                60% { background: linear-gradient(135deg, #4a1582, #0d47a1); }\r\n                100% { background: radial-gradient(circle at center, var(--secondary) 0%, var(--primary-dark) 100%); }\r\n            }\r\n            \r\n            @keyframes boss-shrink {\r\n                0% { transform: scale(1); opacity: 1; }\r\n                30% { transform: scale(0.8); opacity: 0.8; }\r\n                100% { transform: scale(0); opacity: 0; }\r\n            }\r\n        `;\r\n        document.head.appendChild(styleEl);\r\n    }\r\n}\r\n\r\n\r\n// ADD a function to update coins after boss victory\r\nfunction updateCoinsAfterBossVictory() {\r\n    const currentCoins = gameState.coins;\r\n    const newCoins = currentCoins;\r\n    \r\n    // Update gameState.coins but don't use CoinsManager to avoid duplicate animations\r\n    gameState.coins = newCoins;\r\n    \r\n    // Update all coin displays with animation\r\n    document.querySelectorAll('.coin-count').forEach(el => {\r\n        animateCoinsChange(el, currentCoins, newCoins);\r\n    });\r\n    \r\n    // Pulse the coin icons\r\n    document.querySelectorAll('.coin-icon').forEach(icon => {\r\n        icon.classList.add('coin-pulse');\r\n        setTimeout(() => {\r\n            icon.classList.remove('coin-pulse');\r\n        }, 1500);\r\n    });\r\n    \r\n    // Save progress\r\n    saveProgress();\r\n}\r\n\r\nfunction showBossVictoryNotification() {\r\n    // Just update displays without adding coins\r\n    updateAllCoinDisplays();\r\n    \r\n    const modal = document.createElement('div');\r\n    modal.className = 'arcade-completion-modal';\r\n    modal.innerHTML = `\r\n    <div class=\"completion-modal-content\">\r\n      <h2 style=\"color: var(--gold)\">Boss Defeated!</h2>\r\n      <p style=\"font-size: 1.2rem; margin: 1rem 0;\">Congratulations! You've conquered this challenge!</p>\r\n      \r\n      <div class=\"completion-stats\">\r\n        <div class=\"stat-item\">\r\n          <i class=\"fas fa-skull\" style=\"font-size: 2rem; color: var(--gold); margin-bottom: 0.5rem;\"></i>\r\n          <span style=\"display: block; margin-bottom: 0.25rem;\">Boss Defeated</span>\r\n          <strong style=\"font-size: 1.5rem;\">✓</strong>\r\n        </div>\r\n        <div class=\"stat-item\">\r\n          <i class=\"fas fa-coins\" style=\"font-size: 2rem; color: var(--gold); margin-bottom: 0.5rem;\"></i>\r\n          <span style=\"display: block; margin-bottom: 0.25rem;\">Bonus Coins</span>\r\n          <strong style=\"font-size: 1.5rem;\">100</strong>\r\n        </div>\r\n        <div class=\"stat-item\">\r\n          <i class=\"fas fa-unlock\" style=\"font-size: 2rem; color: var(--gold); margin-bottom: 0.5rem;\"></i>\r\n          <span style=\"display: block; margin-bottom: 0.25rem;\">New Set</span>\r\n          <strong style=\"font-size: 1.5rem;\">Unlocked</strong>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style=\"display: flex; justify-content: space-around; margin-top: 2rem; gap: 1rem;\">\r\n        <button onclick=\"handleBossVictoryContinue()\" class=\"start-button\" style=\"\r\n          background: var(--accent);\r\n          color: var(--text);\r\n          border: none;\r\n          padding: 1rem 2rem;\r\n          border-radius: 50px;\r\n          font-size: 1.1rem;\r\n          font-weight: 600;\r\n          cursor: pointer;\r\n          transition: all 0.3s ease;\r\n          box-shadow: 0 5px 15px rgba(30, 144, 255, 0.3);\r\n        \">\r\n          Next Set\r\n        </button>\r\n        <button onclick=\"handleBossVictoryHome()\" class=\"start-button\" style=\"\r\n          background: transparent;\r\n          color: var(--text);\r\n          border: 2px solid var(--accent);\r\n          padding: 1rem 2rem;\r\n          border-radius: 50px;\r\n          font-size: 1.1rem;\r\n          font-weight: 600;\r\n          cursor: pointer;\r\n          transition: all 0.3s ease;\r\n        \">\r\n          Return Home\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `;\r\n    \r\n    document.body.appendChild(modal);\r\n    requestAnimationFrame(() => modal.classList.add('show'));\r\n}\r\n\r\nfunction handleBossVictoryContinue() {\r\n  console.log(\"Boss victory continue button clicked\");\r\n  const modal = document.querySelector(\".arcade-completion-modal\");\r\n  updateAllCoinDisplays();\r\n  \r\n  if (modal) {\r\n    modal.classList.remove(\"show\");\r\n    setTimeout(() => {\r\n      modal.remove();\r\n      \r\n      const bgTransition = document.querySelector(\".background-transition-overlay\");\r\n      \r\n      if (bgTransition) {\r\n        console.log(\"Using existing transition overlay for smooth transition\");\r\n        bgTransition.style.background = \"radial-gradient(circle at center, var(--secondary) 0%, var(--primary-dark) 100%)\";\r\n        resetBossStyles(true);\r\n      } else {\r\n        resetBossStyles();\r\n      }\r\n      \r\n      unlockNextSet();\r\n      \r\n      // ADD PREMIUM CHECK HERE\r\n      const nextSet = gameState.currentSet + 1;\r\n      const userStatus = currentUser ? currentUser.status : \"unregistered\";\r\n      \r\n      // If we're moving beyond Set 1 in Stages 2-5 and user is not premium, show upgrade prompt\r\n      if (gameState.currentStage >= 2 && nextSet > 1 && userStatus !== \"premium\") {\r\n        console.log(\"Non-premium user attempted to access premium set, showing upgrade prompt\");\r\n        showScreen(\"welcome-screen\");\r\n        setTimeout(() => {\r\n          showUpgradePrompt();\r\n        }, 500);\r\n        return;\r\n      }\r\n      \r\n      // Continue with normal progression for premium users\r\n      gameState.currentSet = nextSet;\r\n      gameState.currentLevel = 1;\r\n      updateAllCoinDisplays();\r\n      \r\n      setTimeout(() => {\r\n        console.log(\"Starting next level\");\r\n        if (bgTransition && bgTransition.parentNode) {\r\n          bgTransition.parentNode.removeChild(bgTransition);\r\n        }\r\n        startLevel(1);\r\n      }, 500);\r\n    }, 300);\r\n  }\r\n}\r\n\r\nfunction resetBossStyles(e = false) {\r\n  console.log(\"Resetting boss styles\", e ? \"(preserving overlay)\" : \"\");\r\n\r\n  // Reset boss health bar styling\r\n  const progressCircle = document.querySelector('.progress-circle');\r\n  if (progressCircle) {\r\n    const progress = progressCircle.querySelector('.progress');\r\n    if (progress) {\r\n      progress.classList.remove('warning', 'boss-health');\r\n      progress.style.stroke = '';  // Reset to default color\r\n      progress.style.animation = 'none';\r\n      \r\n      // Force reflow to make sure animation removal takes effect\r\n      void progress.offsetWidth;\r\n      progress.style.animation = '';\r\n    }\r\n  }\r\n  \r\n  const t = document.getElementById(\"question-screen\");\r\n  if (t) {\r\n    const n = t.querySelector(\".background-transition-overlay\");\r\n    e && n && n.remove();\r\n    t.removeAttribute(\"style\");\r\n    e && n && t.insertBefore(n, t.firstChild);\r\n    e || (t.querySelectorAll(\".background-transition-overlay\").forEach(e => e.remove()),\r\n    setTimeout(() => {\r\n      t.style.background = \"radial-gradient(circle at center, var(--secondary) 0%, var(--primary-dark) 100%)\";\r\n    }, 10));\r\n  }\r\n  \r\n  const n = document.getElementById(\"question-word\");\r\n  n && n.removeAttribute(\"style\");\r\n  \r\n  \"function\" == typeof stopBossRainingLetters && stopBossRainingLetters();\r\n  \r\n  const r = e ? \".incineration-effect, .boss-orb\" : \".incineration-effect, .boss-orb, .background-transition-overlay\";\r\n  document.querySelectorAll(r).forEach(e => {\r\n    e.parentNode && e.parentNode.removeChild(e);\r\n  });\r\n}\r\n\r\nfunction handleBossVictoryHome() {\r\n  console.log(\"Boss victory home button clicked\");\r\n  const modal = document.querySelector(\".arcade-completion-modal\");\r\n  updateAllCoinDisplays();\r\n  \r\n  if (modal) {\r\n    modal.classList.remove(\"show\");\r\n    setTimeout(() => {\r\n      modal.remove();\r\n      resetBossStyles();\r\n      \r\n      unlockNextSet();\r\n      \r\n      // ADD PREMIUM CHECK HERE TOO\r\n      const nextSet = gameState.currentSet + 1;\r\n      const userStatus = currentUser ? currentUser.status : \"unregistered\";\r\n      \r\n      // Still update the gameState even when going to welcome screen, but show upgrade if needed\r\n      if (gameState.currentStage >= 2 && nextSet > 1 && userStatus !== \"premium\") {\r\n        showUpgradePrompt();\r\n      } else {\r\n        gameState.currentSet = nextSet;\r\n        gameState.currentLevel = 1;\r\n      }\r\n      \r\n      saveProgress();\r\n      showScreen(\"welcome-screen\");\r\n    }, 300);\r\n  }\r\n}\r\n\r\n// ADD this function to check if the current user is the admin\r\nfunction isAdminUser() {\r\n  return currentUser && currentUser.email === \"admin123@gmail.com\";\r\n}\r\n\r\n// ADD this function to create the admin skip button\r\nfunction addAdminSkipButton() {\r\n  // Only add for admin user\r\n  if (!isAdminUser()) return;\r\n  \r\n  // Remove any existing admin skip button first\r\n  const existingButton = document.getElementById(\"admin-skip-10-button\");\r\n  if (existingButton) existingButton.remove();\r\n  \r\n  // Create the admin skip button\r\n  const skipButton = document.createElement(\"button\");\r\n  skipButton.id = \"admin-skip-10-button\";\r\n  skipButton.innerHTML = '<i class=\"fas fa-forward\"></i> Skip 10';\r\n  skipButton.style.cssText = `\r\n    position: fixed;\r\n    bottom: 80px;\r\n    right: 20px;\r\n    background: #9c27b0;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    z-index: 2000;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\r\n    font-weight: bold;\r\n  `;\r\n  \r\n  // Add the click handler\r\n  skipButton.onclick = function() {\r\n    console.log(\"Admin skip-10 button clicked\");\r\n    handleAdminSkip10();\r\n  };\r\n  \r\n  // Add the button to the question screen\r\n  const questionScreen = document.getElementById(\"question-screen\");\r\n  if (questionScreen) {\r\n    questionScreen.appendChild(skipButton);\r\n  }\r\n}\r\n\r\n// ADD this function to handle the skip-10 action\r\nfunction handleAdminSkip10() {\r\n  // Only work for admin user\r\n  if (!isAdminUser()) return;\r\n  \r\n  // Check if we're in an active game\r\n  if (!currentGame || !currentGame.words || !currentGame.words.length) {\r\n    console.error(\"No active game found\");\r\n    return;\r\n  }\r\n  \r\n  // Skip 10 questions or all remaining if less than 10 left\r\n  const skipCount = Math.min(10, currentGame.words.length - currentGame.currentIndex);\r\n  console.log(`Skipping ${skipCount} questions`);\r\n  \r\n  // If this is a boss level, handle it differently\r\n  if (currentGame.isBossLevel) {\r\n    // For boss levels, we directly set the index near the end\r\n    // This will trigger the boss defeat sequence on the next answer\r\n    currentGame.currentIndex = Math.max(0, currentGame.words.length - 1);\r\n    updateBossHealthBar();\r\n    loadNextBossQuestion();\r\n    showNotification(`Boss almost defeated! One more hit!`, \"success\");\r\n    return;\r\n  }\r\n  \r\n  // For regular levels\r\n  currentGame.currentIndex += skipCount;\r\n  \r\n  // If we've reached the end of the level\r\n  if (currentGame.currentIndex >= currentGame.words.length) {\r\n    handleLevelCompletion();\r\n    return;\r\n  }\r\n  \r\n  // Otherwise update progress and load the next question\r\n  updateProgressCircle();\r\n  loadNextQuestion();\r\n  showNotification(`Skipped ${skipCount} questions!`, \"success\");\r\n}\r\n\r\n// MODIFY addAdminTestButton function to call our new function\r\nfunction addAdminTestButton() {\r\n  console.log(\"Checking for admin user...\");\r\n  \r\n  // Remove any existing button\r\n  const existingButton = document.getElementById(\"admin-test-button\");\r\n  if (existingButton) {\r\n    existingButton.remove();\r\n  }\r\n  \r\n  console.log(\"Current user:\", currentUser ? currentUser.email : \"No user\");\r\n  \r\n  // Check if the current user is admin\r\n  if (!currentUser || (currentUser.email !== \"admin123@gmail.com\" && !currentUser.email?.includes(\"admin123\"))) {\r\n    console.log(\"Not admin user, not adding button\");\r\n    return;\r\n  }\r\n  \r\n  console.log(\"Admin user detected, adding test buttons\");\r\n  \r\n  // Add level 20 button\r\n  const button = document.createElement(\"button\");\r\n  button.id = \"admin-test-button\";\r\n  button.textContent = \"Jump to Level 20\";\r\n  button.style.cssText = `\r\n    position: fixed;\r\n    top: 80px;\r\n    right: 20px;\r\n    background: #ff5722;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    z-index: 2000;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\r\n    font-weight: bold;\r\n  `;\r\n  \r\n  button.onclick = function() {\r\n    console.log(\"Admin button clicked, jumping to level 20\");\r\n    gameState.currentLevel = 21;\r\n    startLevel(21);\r\n  };\r\n  \r\n  document.body.appendChild(button);\r\n  console.log(\"Admin test button added to body\");\r\n  \r\n  // Now also add our skip button\r\n  addAdminSkipButton();\r\n}\r\n\r\n\r\ncreateBossStyleSheet();\r\n\r\n/**\r\n * CustomListsManager - Manages all custom word lists operations\r\n */\r\n const CustomListsManager = {\r\n  lists: [],\r\n  currentList: null,\r\n\r\n  /**\r\n   * Initialize the lists manager\r\n   */\r\n  async initialize() {\r\n    try {\r\n      if (currentUser) {\r\n        await this.loadFromSupabase();\r\n      } else {\r\n        this.loadFromLocalStorage();\r\n      }\r\n\r\n      if (!this.lists || this.lists.length === 0) {\r\n        console.log(\"No lists found, initializing empty array\");\r\n        this.lists = [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Custom Lists Initialization Error:\", error);\r\n      this.lists = [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Load lists from Supabase database\r\n   */\r\n  async loadFromSupabase() {\r\n    try {\r\n      const { data, error } = await supabaseClient\r\n        .from(\"custom_lists\")\r\n        .select(\"*\")\r\n        .or(`user_id.eq.${currentUser.id},shared_with.cs.{${currentUser.id}}`);\r\n\r\n      if (error) throw error;\r\n\r\n      this.lists = data.map(list => ({\r\n        id: list.id,\r\n        name: list.name,\r\n        words: list.words || [],\r\n        translations: list.translations || [],\r\n        isShared: list.is_shared,\r\n        sharedBy: list.shared_by,\r\n        userId: list.user_id,\r\n        createdAt: list.created_at\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error loading lists from Supabase:\", error);\r\n      this.lists = [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Load lists from local storage\r\n   */\r\n  loadFromLocalStorage() {\r\n    try {\r\n      const storedLists = localStorage.getItem(\"simploxCustomLists\");\r\n      this.lists = storedLists ? JSON.parse(storedLists) : [];\r\n      console.log(\"Loaded lists from localStorage:\", this.lists.length);\r\n    } catch (error) {\r\n      console.error(\"Error loading lists from localStorage:\", error);\r\n      this.lists = [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save a list to storage\r\n   * @param {Object} list - The list to save\r\n   * @returns {Object|null} - The saved list or null if failed\r\n   */\r\n  async save(list) {\r\n    if (!list) return null;\r\n\r\n    return currentUser ? \r\n      await this.saveToSupabase(list) : \r\n      this.saveToLocalStorage(list);\r\n  },\r\n\r\n  /**\r\n   * Save a list to Supabase\r\n   * @param {Object} list - The list to save\r\n   * @returns {Object|null} - The saved list or null if failed\r\n   */\r\n  async saveToSupabase(list) {\r\n    try {\r\n      const listData = {\r\n        name: list.name,\r\n        words: list.words || [],\r\n        translations: list.translations || [],\r\n        user_id: currentUser.id\r\n      };\r\n\r\n      // Update existing list\r\n      if (list.id && typeof list.id === 'string' && list.id.length === 36) {\r\n        const { data, error } = await supabaseClient\r\n          .from(\"custom_lists\")\r\n          .update(listData)\r\n          .eq(\"id\", list.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      } \r\n      // Create new list\r\n      else {\r\n        const { data, error } = await supabaseClient\r\n          .from(\"custom_lists\")\r\n          .insert(listData)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n\r\n        // Update lists array\r\n        const index = this.lists.findIndex(item => \r\n          item.id === list.id || (item.tempId && item.tempId === list.tempId)\r\n        );\r\n\r\n        if (index !== -1) {\r\n          this.lists[index] = {\r\n            ...data,\r\n            words: data.words || [],\r\n            translations: data.translations || []\r\n          };\r\n        } else {\r\n          this.lists.push({\r\n            ...data,\r\n            words: data.words || [],\r\n            translations: data.translations || []\r\n          });\r\n        }\r\n\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving list to Supabase:\", error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save a list to local storage\r\n   * @param {Object} list - The list to save\r\n   * @returns {Object|null} - The saved list or null if failed\r\n   */\r\n  saveToLocalStorage(list) {\r\n    try {\r\n      const newList = {\r\n        ...list,\r\n        id: list.id || Date.now(),\r\n        tempId: list.tempId || Date.now()\r\n      };\r\n\r\n      const index = this.lists.findIndex(item => \r\n        item.id === list.id || (item.tempId && item.tempId === list.tempId)\r\n      );\r\n\r\n      if (index !== -1) {\r\n        this.lists[index] = newList;\r\n      } else {\r\n        this.lists.push(newList);\r\n      }\r\n\r\n      localStorage.setItem(\"simploxCustomLists\", JSON.stringify(this.lists));\r\n      return newList;\r\n    } catch (error) {\r\n      console.error(\"Error saving list to localStorage:\", error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Delete a list\r\n   * @param {string|number} id - The list ID to delete\r\n   * @returns {boolean} - Success status\r\n   */\r\n  async delete(id) {\r\n    if (!currentUser) {\r\n      // For guest users, delete from local storage\r\n      this.lists = this.lists.filter(list => list.id !== id);\r\n      localStorage.setItem(\"simploxCustomLists\", JSON.stringify(this.lists));\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      // For logged in users, delete from Supabase\r\n      if (typeof id === 'string' && id.length === 36) {\r\n        const { error } = await supabaseClient\r\n          .from(\"custom_lists\")\r\n          .delete()\r\n          .eq(\"id\", id);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      this.lists = this.lists.filter(list => list.id !== id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error deleting list from Supabase:\", error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Share a list with another user\r\n   * @param {string|number} listId - The list ID to share\r\n   * @param {string} targetUserId - The user ID to share with\r\n   * @returns {boolean} - Success status\r\n   */\r\n  async share(listId, targetUserId) {\r\n    if (!currentUser) return false;\r\n\r\n    try {\r\n      const listIdStr = String(listId);\r\n      const list = this.lists.find(list => String(list.id) === listIdStr);\r\n      \r\n      if (!list) {\r\n        console.error(\"List not found for sharing:\", listIdStr);\r\n        return false;\r\n      }\r\n\r\n      console.log(\"Sharing list:\", list.name);\r\n\r\n      const { data, error } = await supabaseClient.rpc(\r\n        \"insert_shared_list\",\r\n        {\r\n          p_user_id: targetUserId,\r\n          p_name: `${list.name} (Shared by ${currentUser.user_metadata?.username || \"User\"})`,\r\n          p_words: list.words || [],\r\n          p_translations: list.translations || [],\r\n          p_is_shared: true,\r\n          p_local_id: Date.now(),\r\n          p_shared_with: [targetUserId],\r\n          p_shared_by: currentUser.id\r\n        }\r\n      );\r\n\r\n      if (error) {\r\n        console.error(\"Error sharing list via RPC:\", error);\r\n        return false;\r\n      }\r\n\r\n      console.log(\"List shared successfully:\", data);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error in share method:\", error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get the limits for lists based on user status\r\n   * @returns {Object} - Limits object\r\n   */\r\n  getListLimits() {\r\n    if (!currentUser) {\r\n      return {\r\n        maxLists: 3,\r\n        maxWords: 10,\r\n        maxPlays: 5,\r\n        canShare: false,\r\n        playDisplay: \"5\"\r\n      };\r\n    }\r\n\r\n    switch (currentUser.status || \"free\") {\r\n      case \"premium\":\r\n        return {\r\n          maxLists: 30,\r\n          maxWords: 50,\r\n          maxPlays: Infinity,\r\n          canShare: true,\r\n          playDisplay: \"∞\"\r\n        };\r\n      case \"pending\":\r\n        return {\r\n          maxLists: 30,\r\n          maxWords: 50,\r\n          maxPlays: Infinity,\r\n          canShare: false,\r\n          playDisplay: \"∞\"\r\n        };\r\n      case \"free\":\r\n        return {\r\n          maxLists: 5,\r\n          maxWords: 20,\r\n          maxPlays: 10,\r\n          canShare: false,\r\n          playDisplay: \"10\"\r\n        };\r\n      default:\r\n        return {\r\n          maxLists: 3,\r\n          maxWords: 10,\r\n          maxPlays: 5,\r\n          canShare: false,\r\n          playDisplay: \"5\"\r\n        };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check if user can create more lists\r\n   * @returns {boolean} - True if more lists can be created\r\n   */\r\n  canCreateMoreLists() {\r\n    const limits = this.getListLimits();\r\n    return this.lists.length < limits.maxLists;\r\n  },\r\n\r\n  /**\r\n   * Validate if a list can be practiced\r\n   * @param {Object} list - The list to validate\r\n   * @returns {Object} - Validation result with valid flag and message\r\n   */\r\n  validateListForPractice: (list) => {\r\n    if (!list || !list.words || !list.translations) {\r\n      return { valid: false, message: \"Invalid list format\" };\r\n    }\r\n    \r\n    if (list.words.length < 6) {\r\n      return { valid: false, message: \"Lists need at least 6 words to practice\" };\r\n    }\r\n    \r\n    return { valid: true };\r\n  }\r\n};\r\n\r\n/**\r\n * Custom game state for practice mode\r\n */\r\nconst customGameState = {\r\n  isCustomPractice: false,\r\n  currentList: null,\r\n  currentLevel: 1,\r\n  levelData: null,\r\n  words: [],\r\n  translations: [],\r\n  wordsCompleted: 0,\r\n  correctStreak: 0,\r\n  wrongStreak: 0,\r\n  startCoins: 0,\r\n  completedLevels: new Set(),\r\n\r\n  /**\r\n   * Reset the custom game state\r\n   */\r\n  reset() {\r\n    this.isCustomPractice = false;\r\n    this.currentList = null;\r\n    this.currentLevel = 1;\r\n    this.levelData = null;\r\n    this.words = [];\r\n    this.translations = [];\r\n    this.wordsCompleted = 0;\r\n    this.correctStreak = 0;\r\n    this.wrongStreak = 0;\r\n    this.startCoins = 0;\r\n    this.completedLevels = new Set();\r\n  },\r\n\r\n  /**\r\n   * Initialize custom game from a list\r\n   * @param {Object} list - The list to initialize from\r\n   * @returns {boolean} - Success status\r\n   */\r\n  initializeFromList(list) {\r\n    if (!list || !list.words || !list.translations) {\r\n      console.error(\"Invalid list provided to custom game:\", list);\r\n      return false;\r\n    }\r\n\r\n    this.reset();\r\n    this.isCustomPractice = true;\r\n    this.currentList = list;\r\n    this.words = [...list.words];\r\n    this.translations = [...list.translations];\r\n    this.startCoins = gameState.coins;\r\n    this.currentLevel = 1;\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Get words for a specific level\r\n   * @param {number} level - The level number\r\n   * @returns {Object|null} - Level data or null if invalid\r\n   */\r\n  getWordsForLevel(level) {\r\n    if (!this.words.length) return null;\r\n\r\n    // Determine maximum level based on word count\r\n    const maxLevels = this.words.length >= 12 ? 9 : \r\n                      this.words.length >= 9 ? 6 : 3;\r\n    \r\n    if (level > maxLevels) return null;\r\n\r\n    // Define level structure based on word count and level number\r\n    const levelConfig = {\r\n      1: { start: 0, count: Math.min(3, this.words.length), isTest: false },\r\n      2: { start: 3, count: Math.min(3, Math.max(0, this.words.length - 3)), isTest: false },\r\n      3: { start: 0, count: Math.min(6, this.words.length), isTest: true },\r\n      4: { start: 6, count: Math.min(3, Math.max(0, this.words.length - 6)), isTest: false },\r\n      5: { start: 9, count: Math.min(3, Math.max(0, this.words.length - 9)), isTest: false },\r\n      6: { start: 6, count: Math.min(6, Math.max(0, this.words.length - 6)), isTest: true },\r\n      7: { start: 12, count: Math.min(4, Math.max(0, this.words.length - 12)), isTest: false },\r\n      8: { start: 16, count: Math.min(4, Math.max(0, this.words.length - 16)), isTest: false },\r\n      9: { start: 12, count: Math.min(8, Math.max(0, this.words.length - 12)), isTest: true }\r\n    };\r\n\r\n    const config = levelConfig[level] || levelConfig[1];\r\n    \r\n    // If no words available for this level, try the next one\r\n    if (config.count <= 0) {\r\n      return this.getWordsForLevel(level + 1);\r\n    }\r\n\r\n    this.levelData = {\r\n      words: this.words.slice(config.start, config.start + config.count),\r\n      translations: this.translations.slice(config.start, config.start + config.count),\r\n      isTest: config.isTest,\r\n      isFinal: level === maxLevels\r\n    };\r\n\r\n    return this.levelData;\r\n  }\r\n};\r\n\r\n/**\r\n * Process custom words from input field\r\n */\r\nfunction processCustomWords() {\r\n  const inputField = document.getElementById(\"custom-word-input\");\r\n  const resultsDiv = document.getElementById(\"translation-results\");\r\n  const wordList = document.getElementById(\"word-translation-list\");\r\n  const limits = CustomListsManager.getListLimits();\r\n  \r\n  const inputText = inputField.value.trim();\r\n  if (!inputText) {\r\n    showNotification(\"Please enter at least one word.\", \"error\");\r\n    return;\r\n  }\r\n  \r\n  // Split input by commas or newlines\r\n  let words = inputText.includes(',') ? \r\n    inputText.split(',').map(word => word.trim()) : \r\n    inputText.split(/\\s+/).filter(word => word.length > 0);\r\n  \r\n  // Handle phrases (words with spaces)\r\n  words = words.map(word => word.includes(' ') ? [word] : word.split(/\\s+/)).flat();\r\n  \r\n  // Apply word limit based on user status\r\n  const maxWords = currentUser ? limits.maxWords : 10;\r\n  if (words.length > maxWords) {\r\n    showNotification(`Maximum ${maxWords} words allowed.`, \"error\");\r\n    words = words.slice(0, maxWords);\r\n  }\r\n  \r\n  // Clear previous word list\r\n  wordList.innerHTML = \"\";\r\n  resultsDiv.style.display = \"block\";\r\n  \r\n  // Create word items with translations\r\n  words.forEach(word => {\r\n    const wordItem = createWordItem(word, findTranslation(word));\r\n    wordList.appendChild(wordItem);\r\n    initializeDragAndDrop(wordItem);\r\n  });\r\n  \r\n  makeWordListDraggable();\r\n}\r\n\r\n/**\r\n * Find a translation for a given word\r\n * @param {string} word - The word to translate\r\n * @returns {string} - The translation or empty string\r\n */\r\nfunction findTranslation(word) {\r\n  // Look through vocabulary sets for matching word\r\n  for (const setKey in vocabularySets) {\r\n    const index = vocabularySets[setKey].words.indexOf(word.toLowerCase());\r\n    if (index !== -1) {\r\n      return vocabularySets[setKey].translations[index];\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nfunction createWordItem(word, translation) {\r\n  const item = document.createElement(\"div\");\r\n  item.className = \"word-translation-item\";\r\n  item.draggable = true;\r\n  item.innerHTML = `\r\n    <div class=\"drag-handle\">\r\n      <i class=\"fas fa-grip-vertical\"></i>\r\n    </div>\r\n    <span class=\"source-word\" contenteditable=\"true\">${word}</span>\r\n    <input type=\"text\" class=\"target-word\" value=\"${translation}\" placeholder=\"Hebrew translation\">\r\n    <button class=\"delete-word-btn\" onclick=\"deleteWord(this)\">\r\n      <i class=\"fas fa-times\" style=\"font-size: 12px;\"></i>\r\n    </button>\r\n  `;\r\n  \r\n  const deleteBtn = item.querySelector(\".delete-word-btn\");\r\n  if (deleteBtn) {\r\n    // Position the delete button at the right edge of the item\r\n    deleteBtn.style.position = \"absolute\";\r\n    deleteBtn.style.right = \"10px\";\r\n    deleteBtn.style.top = \"50%\";\r\n    deleteBtn.style.transform = \"translateY(-50%)\";\r\n  }\r\n  \r\n  return item;\r\n}\r\n\r\nfunction addNewWord() {\r\n  const wordList = document.getElementById(\"word-translation-list\");\r\n  if (!wordList) return;\r\n  \r\n  const wordItem = document.createElement(\"div\");\r\n  wordItem.className = \"word-translation-item\";\r\n  wordItem.draggable = true;\r\n  wordItem.innerHTML = `\r\n    <div class=\"drag-handle\">\r\n      <i class=\"fas fa-grip-vertical\"></i>\r\n    </div>\r\n    <span class=\"source-word\" contenteditable=\"true\"></span>\r\n    <input type=\"text\" class=\"target-word\" placeholder=\"Hebrew translation\">\r\n    <button class=\"delete-word-btn\" onclick=\"deleteWord(this)\">❌</button>\r\n  `;\r\n  \r\n  const newItem = wordList.appendChild(wordItem);\r\n  initializeDragAndDrop(newItem);\r\n  \r\n  if (wordList.children.length === 1) {\r\n    makeWordListDraggable();\r\n  }\r\n  \r\n  // Focus on the new word field\r\n  newItem.querySelector(\".source-word\").focus();\r\n}\r\n\r\nfunction deleteWord(button) {\r\n    if (!button) return;\r\n    \r\n    const wordItem = button.closest(\".word-translation-item\");\r\n    if (wordItem) {\r\n        wordItem.remove();\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize drag and drop for a word item\r\n * @param {HTMLElement} element - The element to make draggable\r\n * @returns {HTMLElement} - The initialized element\r\n */\r\nfunction initializeDragAndDrop(element) {\r\n  if (!element) return;\r\n  \r\n  // Clone the element to remove any existing listeners\r\n  const clone = element.cloneNode(true);\r\n  if (element.parentNode) {\r\n    element.parentNode.replaceChild(clone, element);\r\n  }\r\n  \r\n  // The element is now the clone\r\n  element = clone;\r\n  \r\n  element.setAttribute(\"draggable\", \"true\");\r\n  \r\n  element.addEventListener(\"dragstart\", (event) => {\r\n    event.stopPropagation();\r\n    element.classList.add(\"dragging\");\r\n    event.dataTransfer.setData(\"text/plain\", \"\");\r\n  });\r\n  \r\n  element.addEventListener(\"dragend\", (event) => {\r\n    event.stopPropagation();\r\n    element.classList.remove(\"dragging\");\r\n  });\r\n  \r\n  // Setup delete button\r\n  const deleteBtn = element.querySelector(\".delete-word-btn\");\r\n  if (deleteBtn) {\r\n    deleteBtn.onclick = () => deleteWord(deleteBtn);\r\n  }\r\n  \r\n  return element;\r\n}\r\n\r\n/**\r\n * Make the word list draggable\r\n */\r\nfunction makeWordListDraggable() {\r\n  const wordList = document.getElementById(\"word-translation-list\");\r\n  if (!wordList) return;\r\n  \r\n  wordList.addEventListener(\"dragover\", (event) => {\r\n    event.preventDefault();\r\n    const draggingElement = wordList.querySelector(\".dragging\");\r\n    if (!draggingElement) return;\r\n    \r\n    const afterElement = getDragAfterElement(wordList, event.clientY);\r\n    if (afterElement) {\r\n      wordList.insertBefore(draggingElement, afterElement);\r\n    } else {\r\n      wordList.appendChild(draggingElement);\r\n    }\r\n  });\r\n  \r\n  // Initialize all existing items\r\n  wordList.querySelectorAll(\".word-translation-item\").forEach(item => \r\n    initializeDragAndDrop(item)\r\n  );\r\n}\r\n\r\n/**\r\n * Get the element to insert after when dragging\r\n * @param {HTMLElement} container - The container element\r\n * @param {number} y - The Y coordinate\r\n * @returns {HTMLElement|null} - The element to insert after\r\n */\r\nfunction getDragAfterElement(container, y) {\r\n  if (!container) return null;\r\n  \r\n  const draggableElements = [...container.querySelectorAll(\".word-translation-item:not(.dragging)\")];\r\n  \r\n  if (!draggableElements.length) return null;\r\n  \r\n  return draggableElements.reduce((closest, child) => {\r\n    const box = child.getBoundingClientRect();\r\n    const offset = y - box.top - box.height / 2;\r\n    \r\n    if (offset < 0 && offset > closest.offset) {\r\n      return { offset: offset, element: child };\r\n    } else {\r\n      return closest;\r\n    }\r\n  }, { offset: Number.NEGATIVE_INFINITY }).element;\r\n}\r\n\r\n/**\r\n * Setup keyboard navigation for word list\r\n */\r\nfunction setupWordListKeyNavigation() {\r\n  const wordList = document.getElementById(\"word-translation-list\");\r\n  if (!wordList) return;\r\n  \r\n  wordList.addEventListener(\"keydown\", (event) => {\r\n    const wordItem = document.activeElement.closest(\".word-translation-item\");\r\n    if (!wordItem) return;\r\n    \r\n    let nextElement;\r\n    \r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        event.preventDefault();\r\n        nextElement = wordItem.previousElementSibling?.querySelector(\".source-word\");\r\n        break;\r\n      case \"ArrowDown\":\r\n        event.preventDefault();\r\n        nextElement = wordItem.nextElementSibling?.querySelector(\".source-word\");\r\n        break;\r\n      case \"ArrowRight\":\r\n        event.preventDefault();\r\n        nextElement = wordItem.querySelector(\".target-word\");\r\n        break;\r\n      case \"ArrowLeft\":\r\n        event.preventDefault();\r\n        nextElement = wordItem.querySelector(\".source-word\");\r\n        break;\r\n    }\r\n    \r\n    if (nextElement) nextElement.focus();\r\n  });\r\n}\r\n\r\n/**\r\n * Save the current list\r\n */\r\nasync function saveCurrentList() {\r\n  const nameInput = document.getElementById(\"custom-list-name\");\r\n  const wordList = document.getElementById(\"word-translation-list\");\r\n  \r\n  // Get list name (use default if empty)\r\n  const name = nameInput.value.trim() || \r\n               (CustomListsManager.currentList ? \r\n                CustomListsManager.currentList.name : \r\n                `List ${CustomListsManager.lists.length + 1}`);\r\n  \r\n  // Collect words and translations\r\n  const words = [];\r\n  const translations = [];\r\n  \r\n  wordList.querySelectorAll(\".word-translation-item\").forEach(item => {\r\n    const word = item.querySelector(\".source-word\").textContent.trim();\r\n    const translation = item.querySelector(\".target-word\").value.trim();\r\n    \r\n    if (word && translation) {\r\n      words.push(word);\r\n      translations.push(translation);\r\n    }\r\n  });\r\n  \r\n  // Check word limit\r\n  const limits = CustomListsManager.getListLimits();\r\n  if (words.length > limits.maxWords) {\r\n    showNotification(`You can only create lists with up to ${limits.maxWords} words`, \"error\");\r\n    return;\r\n  }\r\n  \r\n  // Handle list editing vs creation\r\n  let listToSave;\r\n  const isEditing = CustomListsManager.currentList !== null;\r\n  \r\n  if (!isEditing && !CustomListsManager.canCreateMoreLists()) {\r\n    showNotification(`Maximum lists limit reached`, \"error\");\r\n    return;\r\n  }\r\n  \r\n  if (isEditing) {\r\n    listToSave = {\r\n      ...CustomListsManager.currentList,\r\n      name: name,\r\n      words: words,\r\n      translations: translations\r\n    };\r\n  } else {\r\n    listToSave = {\r\n      tempId: Date.now(),\r\n      name: name,\r\n      words: words,\r\n      translations: translations\r\n    };\r\n  }\r\n  \r\n  // Save the list\r\n  const savedList = await CustomListsManager.save(listToSave);\r\n  \r\n  if (savedList) {\r\n    // Reset form\r\n    nameInput.value = \"\";\r\n    wordList.innerHTML = \"\";\r\n    document.getElementById(\"translation-results\").style.display = \"none\";\r\n    CustomListsManager.currentList = null;\r\n    \r\n    // Refresh lists\r\n    if (currentUser) {\r\n      await CustomListsManager.loadFromSupabase();\r\n    } else {\r\n      CustomListsManager.loadFromLocalStorage();\r\n    }\r\n    \r\n    showNotification(\"List saved successfully\", \"success\");\r\n    showScreen(\"custom-practice-screen\");\r\n    updateListsDisplay();\r\n  } else {\r\n    showNotification(\"Failed to save list\", \"error\");\r\n  }\r\n}\r\n\r\nfunction editCustomList(listId) {\r\n    const list = CustomListsManager.lists.find(list => list.id === listId);\r\n    if (!list) return showNotification(\"List not found\", \"error\");\r\n\r\n    // First, show the custom practice screen\r\n    showScreen(\"custom-practice-screen\");\r\n    \r\n    // Set the list name in the input field\r\n    const nameInput = document.getElementById(\"custom-list-name\");\r\n    if (nameInput) {\r\n        nameInput.value = list.name || \"\";\r\n    }\r\n    \r\n    // Clear and populate the word translation list\r\n    const translationResults = document.getElementById(\"translation-results\");\r\n    const wordTranslationList = document.getElementById(\"word-translation-list\");\r\n    \r\n    if (wordTranslationList) {\r\n        wordTranslationList.innerHTML = \"\";\r\n        \r\n        // Add each word-translation pair\r\n        if (Array.isArray(list.words)) {\r\n            list.words.forEach((word, index) => {\r\n                const translation = list.translations && index < list.translations.length \r\n                    ? list.translations[index] \r\n                    : \"\";\r\n                \r\n                const wordItem = document.createElement(\"div\");\r\n                wordItem.className = \"word-translation-item\";\r\n                wordItem.draggable = true;\r\n                wordItem.innerHTML = `\r\n                    <div class=\"drag-handle\">\r\n                        <i class=\"fas fa-grip-vertical\"></i>\r\n                    </div>\r\n                    <span class=\"source-word\" contenteditable=\"true\">${word}</span>\r\n                    <input type=\"text\" class=\"target-word\" value=\"${translation}\" placeholder=\"Hebrew translation\">\r\n                    <button class=\"delete-word-btn\" onclick=\"deleteWord(this)\">\r\n                        <i class=\"fas fa-times\" style=\"font-size: 12px;\"></i>\r\n                    </button>\r\n                `;\r\n                \r\n                wordTranslationList.appendChild(wordItem);\r\n                initializeDragAndDrop(wordItem);\r\n            });\r\n        }\r\n        \r\n        // Make the list draggable\r\n        makeWordListDraggable();\r\n        \r\n        // Show the translation results\r\n        if (translationResults) {\r\n            translationResults.style.display = \"block\";\r\n        }\r\n    }\r\n    \r\n    // Set the current list being edited\r\n    CustomListsManager.currentList = list;\r\n}\r\n\r\nasync function deleteCustomList(id) {\r\n  const success = await CustomListsManager.delete(id);\r\n  \r\n  if (success) {\r\n    showNotification(\"List deleted successfully\", \"success\");\r\n    updateListsDisplay();\r\n  } else {\r\n    showNotification(\"Failed to delete list\", \"error\");\r\n  }\r\n}\r\n\r\n/**\r\n * Show the modal to share a list\r\n * @param {string|number} id - The list ID\r\n */\r\nfunction showShareModal(id) {\r\n  console.log(\"Opening share modal for list:\", id);\r\n  \r\n  // Remove existing modal if any\r\n  const existingModal = document.querySelector(\".share-modal\");\r\n  const existingBackdrop = document.querySelector(\".modal-backdrop\");\r\n  if (existingModal) existingModal.remove();\r\n  if (existingBackdrop) existingBackdrop.remove();\r\n  \r\n  // Create backdrop\r\n  const backdrop = document.createElement(\"div\");\r\n  backdrop.className = \"modal-backdrop\";\r\n  backdrop.onclick = closeShareModal;\r\n  document.body.appendChild(backdrop);\r\n  \r\n  // Create modal\r\n  const modal = document.createElement(\"div\");\r\n  modal.className = \"share-modal\";\r\n  modal.innerHTML = `\r\n    <h3 class=\"share-modal-header\">Share List</h3>\r\n    <div class=\"users-list\">Loading users...</div>\r\n    <button class=\"start-button modal-close\" onclick=\"closeShareModal()\">Cancel</button>\r\n  `;\r\n  document.body.appendChild(modal);\r\n  \r\n// Load users\r\nconst usersList = modal.querySelector(\".users-list\");\r\n\r\nsupabaseClient\r\n  .from(\"user_profiles\")\r\n  .select(\"id, username\")\r\n  .neq(\"id\", currentUser.id)\r\n  .then(({ data, error }) => {\r\n    if (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n      usersList.innerHTML = '<div class=\"user-item\"><span>Error loading users</span></div>';\r\n      return;\r\n    }\r\n    \r\n    if (data && data.length > 0) {\r\n      usersList.innerHTML = data.map(user => `\r\n        <div class=\"user-item\">\r\n          <span>${user.username || \"Unnamed User\"}</span>\r\n          <button class=\"main-button small-button share-with-user-btn\" data-user-id=\"${user.id}\">\r\n            <i class=\"fas fa-share-alt\"></i> Share\r\n          </button>\r\n        </div>\r\n      `).join(\"\");\r\n      \r\n      // Setup share buttons\r\n      modal.querySelectorAll(\".share-with-user-btn\").forEach(button => {\r\n        button.onclick = async () => {\r\n          const userId = button.getAttribute(\"data-user-id\");\r\n          button.disabled = true;\r\n          \r\n          const originalHTML = button.innerHTML;\r\n          button.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sharing...';\r\n          \r\n          const success = await CustomListsManager.share(id, userId);\r\n          if (!success) {\r\n            button.disabled = false;\r\n            button.innerHTML = originalHTML;\r\n          } else {\r\n            showNotification(\"List shared successfully!\", \"success\");\r\n            closeShareModal();\r\n          }\r\n        };\r\n      });\r\n    } else {\r\n      usersList.innerHTML = '<div class=\"user-item\"><span>No users found to share with</span></div>';\r\n    }\r\n  });\r\n\r\n/**\r\n * Close the share modal\r\n */\r\n function closeShareModal() {\r\n  const modal = document.querySelector(\".share-modal\");\r\n  const backdrop = document.querySelector(\".modal-backdrop\");\r\n  \r\n  if (modal) modal.remove();\r\n  if (backdrop) backdrop.remove();\r\n}\r\n\r\nfunction updateListsDisplay() {\r\n  const container = document.getElementById('custom-lists-container');\r\n  if (!container) return;\r\n  \r\n  const limits = CustomListsManager.getListLimits();\r\n  const userStatus = currentUser?.status || 'unregistered';\r\n  \r\n  container.innerHTML = '';\r\n  \r\n  if (CustomListsManager.lists && Array.isArray(CustomListsManager.lists) && CustomListsManager.lists.length > 0) {\r\n    CustomListsManager.lists.forEach(list => {\r\n      if (!list || !list.id) return;\r\n      \r\n      const wordCount = list.words?.length || 0;\r\n      const canPractice = wordCount >= 6;\r\n      const playsAvailable = userStatus === 'premium' ? '' : `<span style=\"margin-left: 1rem;\">${limits.playDisplay} plays available</span>`;\r\n      \r\n      const listItem = document.createElement('div');\r\n      listItem.className = 'custom-list-item collapsed ' + (list.isShared ? 'shared-list' : '');\r\n      listItem.dataset.listId = list.id;\r\n      \r\n      listItem.innerHTML = `\r\n        <div class=\"list-actions\">\r\n          <button class=\"main-button practice-button\" ${canPractice ? '' : 'disabled'}>\r\n            ${canPractice ? 'Practice' : `Need ${6 - wordCount} more`}\r\n          </button>\r\n          <button class=\"main-button edit-button\">Edit</button>\r\n          <button class=\"main-button delete-button\">Delete</button>\r\n          ${userStatus === 'premium' ? `\r\n            <button class=\"main-button share-button\">\r\n              <i class=\"fas fa-share-alt\"></i> Share\r\n            </button>\r\n          ` : ''}\r\n        </div>\r\n        <div class=\"list-header\">\r\n          <h3>${list.name || 'Unnamed List'}</h3>\r\n          <div class=\"list-summary\">\r\n            <span class=\"word-count ${canPractice ? '' : 'insufficient'}\">${wordCount} words</span>\r\n            ${canPractice ? '' : '<span class=\"warning-text\">(Minimum 6 needed)</span>'}\r\n            ${playsAvailable}\r\n            <p class=\"word-preview\">${Array.isArray(list.words) ? list.words.slice(0, 5).join(\", \") : \"\"}${list.words && list.words.length > 5 ? \"...\" : \"\"}</p>\r\n          </div>\r\n        </div>\r\n      `;\r\n      \r\n      container.appendChild(listItem);\r\n      \r\n      // Setup the buttons\r\n      const practiceButton = listItem.querySelector('.practice-button');\r\n      if (practiceButton) {\r\n        if (canPractice) {\r\n          practiceButton.onclick = function() { startCustomListPractice(list.id); };\r\n        } else {\r\n          practiceButton.style.opacity = '0.6';\r\n          practiceButton.style.cursor = 'not-allowed';\r\n        }\r\n      }\r\n      \r\n      const editButton = listItem.querySelector('.edit-button');\r\n      if (editButton) {\r\n        editButton.onclick = function() { toggleInlineEdit(list.id); };\r\n      }\r\n      \r\n      const deleteButton = listItem.querySelector('.delete-button');\r\n      if (deleteButton) {\r\n        deleteButton.onclick = function() { deleteCustomList(list.id); };\r\n      }\r\n      \r\n      const shareButton = listItem.querySelector('.share-button');\r\n      if (shareButton) {\r\n        shareButton.onclick = function() { showShareModal(list.id); };\r\n      }\r\n      \r\n      const header = listItem.querySelector('.list-header');\r\n      if (header) {\r\n        header.onclick = function() { toggleListCollapse(list.id); };\r\n      }\r\n    });\r\n  } else {\r\n    container.innerHTML = '<p style=\"color: white; text-align: center;\">No custom lists created yet. Create your first list!</p>';\r\n  }\r\n}\r\n\r\nfunction toggleListEditMode(listId) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${listId}\"]`);\r\n  if (!listItem) return;\r\n  \r\n  const list = CustomListsManager.lists.find(l => l.id === listId);\r\n  if (!list) return;\r\n  \r\n  const editButton = listItem.querySelector(\".edit-button\");\r\n  \r\n  if (listItem.classList.contains(\"editing\")) {\r\n    // Save changes\r\n    const nameInput = listItem.querySelector(\".list-name-input\");\r\n    const wordItems = listItem.querySelectorAll(\".word-translation-item\");\r\n    \r\n    const newName = nameInput.value.trim() || list.name || \"Unnamed List\";\r\n    const newWords = [];\r\n    const newTranslations = [];\r\n    \r\n    wordItems.forEach(item => {\r\n      const sourceWord = item.querySelector(\".source-word\").textContent.trim();\r\n      const targetWord = item.querySelector(\".target-word\").value.trim();\r\n      \r\n      if (sourceWord && targetWord) {\r\n        newWords.push(sourceWord);\r\n        newTranslations.push(targetWord);\r\n      }\r\n    });\r\n    \r\n    // Update list in CustomListsManager\r\n    list.name = newName;\r\n    list.words = newWords;\r\n    list.translations = newTranslations;\r\n    \r\n    CustomListsManager.save(list).then(() => {\r\n      showNotification(\"List saved successfully\", \"success\");\r\n      \r\n      // Update the visible list name and preview\r\n      const listNameElement = listItem.querySelector(\".list-header h3\");\r\n      if (listNameElement) listNameElement.textContent = newName;\r\n      \r\n      const wordCount = newWords.length;\r\n      const wordCountElement = listItem.querySelector(\".word-count\");\r\n      if (wordCountElement) {\r\n        wordCountElement.textContent = `${wordCount} words`;\r\n        wordCountElement.className = `word-count ${wordCount >= 6 ? \"\" : \"insufficient\"}`;\r\n      }\r\n      \r\n      const warningElement = listItem.querySelector(\".warning-text\");\r\n      if (warningElement) {\r\n        if (wordCount >= 6) {\r\n          warningElement.style.display = \"none\";\r\n        } else {\r\n          warningElement.style.display = \"inline\";\r\n          warningElement.textContent = `(Minimum 6 needed)`;\r\n        }\r\n      }\r\n      \r\n      const previewElement = listItem.querySelector(\".word-preview\");\r\n      if (previewElement) {\r\n        previewElement.textContent = newWords.slice(0, 5).join(\", \") + (newWords.length > 5 ? \"...\" : \"\");\r\n      }\r\n      \r\n      // Update practice button state\r\n      const practiceButton = listItem.querySelector(\".practice-button\");\r\n      if (practiceButton) {\r\n        if (wordCount >= 6) {\r\n          practiceButton.textContent = \"Practice\";\r\n          practiceButton.disabled = false;\r\n          practiceButton.style.opacity = \"1\";\r\n          practiceButton.style.cursor = \"pointer\";\r\n          practiceButton.onclick = function() {\r\n            startCustomListPractice(listId);\r\n          };\r\n        } else {\r\n          practiceButton.textContent = `Need ${6 - wordCount} more`;\r\n          practiceButton.disabled = true;\r\n          practiceButton.style.opacity = \"0.6\";\r\n          practiceButton.style.cursor = \"not-allowed\";\r\n          practiceButton.onclick = null;\r\n        }\r\n      }\r\n      \r\n      // Exit edit mode\r\n      listItem.classList.remove(\"editing\");\r\n      if (editButton) editButton.textContent = \"Edit\";\r\n      \r\n      // Collapse the list\r\n      listItem.classList.add(\"collapsed\");\r\n    }).catch(error => {\r\n      console.error(\"Error saving list:\", error);\r\n      showNotification(\"Failed to save list\", \"error\");\r\n    });\r\n  } else {\r\n    // Enter edit mode\r\n    listItem.classList.remove(\"collapsed\");\r\n    listItem.classList.add(\"editing\");\r\n    if (editButton) editButton.textContent = \"Save\";\r\n    \r\n    // Populate word list\r\n    const wordList = listItem.querySelector(\".word-translation-list\");\r\n    if (wordList) {\r\n      wordList.innerHTML = \"\";\r\n      \r\n      if (Array.isArray(list.words) && list.words.length > 0) {\r\n        list.words.forEach((word, index) => {\r\n          const translation = list.translations && index < list.translations.length \r\n            ? list.translations[index] \r\n            : \"\";\r\n          \r\n          const wordItem = createWordItemForList(word, translation);\r\n          wordList.appendChild(wordItem);\r\n        });\r\n      }\r\n      \r\n      // Make the words draggable\r\n      makeWordListDraggable(wordList);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createWordItemForList(word, translation) {\r\n  const item = document.createElement(\"div\");\r\n  item.className = \"word-translation-item\";\r\n  item.draggable = true;\r\n  item.innerHTML = `\r\n    <div class=\"drag-handle\">\r\n      <i class=\"fas fa-grip-vertical\"></i>\r\n    </div>\r\n    <span class=\"source-word\" contenteditable=\"true\">${word}</span>\r\n    <input type=\"text\" class=\"target-word\" value=\"${translation}\" placeholder=\"Hebrew translation\">\r\n    <button class=\"delete-word-btn\" onclick=\"deleteWordFromList(this)\">\r\n      <i class=\"fas fa-times\" style=\"font-size: 12px;\"></i>\r\n    </button>\r\n  `;\r\n  \r\n  initializeDragAndDrop(item);\r\n  return item;\r\n}\r\n\r\nfunction deleteWordFromList(button) {\r\n  const wordItem = button.closest(\".word-translation-item\");\r\n  if (wordItem) {\r\n    wordItem.remove();\r\n  }\r\n}\r\n\r\nfunction addWordToList(listId) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${listId}\"]`);\r\n  if (!listItem) return;\r\n  \r\n  const wordList = listItem.querySelector(\".word-translation-list\");\r\n  if (!wordList) return;\r\n  \r\n  const wordItem = createWordItemForList(\"\", \"\");\r\n  wordList.appendChild(wordItem);\r\n  \r\n  // Focus the new word\r\n  const sourceWord = wordItem.querySelector(\".source-word\");\r\n  if (sourceWord) {\r\n    sourceWord.focus();\r\n  }\r\n}\r\n\r\nfunction makeWordListDraggable(container) {\r\n  if (!container) return;\r\n  \r\n  container.addEventListener(\"dragover\", e => {\r\n    e.preventDefault();\r\n    const draggingItem = container.querySelector(\".dragging\");\r\n    if (!draggingItem) return;\r\n    \r\n    const afterElement = getDragAfterElement(container, e.clientY);\r\n    if (afterElement) {\r\n      container.insertBefore(draggingItem, afterElement);\r\n    } else {\r\n      container.appendChild(draggingItem);\r\n    }\r\n  });\r\n  \r\n  // Initialize all items in this container\r\n  container.querySelectorAll(\".word-translation-item\").forEach(item => {\r\n    initializeDragAndDrop(item);\r\n  });\r\n}\r\n\r\n\r\nfunction toggleListCollapse(id) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${id}\"]`);\r\n  listItem.classList.toggle(\"collapsed\");\r\n}\r\n\r\n/**\r\n * Start practicing a custom list\r\n * @param {string|number} id - The list ID\r\n */\r\nfunction startCustomListPractice(id) {\r\n  const list = CustomListsManager.lists.find(list => list.id === id);\r\n  if (!list) return;\r\n  \r\n  const validation = CustomListsManager.validateListForPractice(list);\r\n  if (!validation.valid) {\r\n    showNotification(validation.message, \"error\");\r\n    return;\r\n  }\r\n  \r\n  if (customGameState.initializeFromList(list)) {\r\n    startCustomLevel(1);\r\n  } else {\r\n    showNotification(\"Failed to initialize practice\", \"error\");\r\n  }\r\n}\r\n\r\n/**\r\n * Start a level in custom practice mode\r\n * @param {number} level - The level number\r\n */\r\nfunction startCustomLevel(level) {\r\n  // Hide powerups in custom practice\r\n  const powerupsContainer = document.querySelector(\".powerups-container\");\r\n  if (powerupsContainer) {\r\n    powerupsContainer.style.display = \"none\";\r\n  }\r\n  \r\n  // Get words for this level\r\n  const levelData = customGameState.getWordsForLevel(level);\r\n  if (!levelData || !levelData.words.length) {\r\n    showNotification(\"Practice completed!\", \"success\");\r\n    showScreen(\"custom-practice-screen\");\r\n    return;\r\n  }\r\n  \r\n  // Set up the current level\r\n  customGameState.currentLevel = level;\r\n  \r\n  // Initialize game state\r\n  currentGame = {\r\n    words: levelData.words,\r\n    translations: levelData.translations,\r\n    currentIndex: 0,\r\n    correctAnswers: 0,\r\n    firstAttempt: true,\r\n    isHebrewToEnglish: levelData.isTest ? Math.random() < 0.5 : false,\r\n    mixed: levelData.isTest,\r\n    speedChallenge: false,\r\n    isCustomPractice: true,\r\n    startingCoins: gameState.coins,\r\n    startingPerks: { ...gameState.perks },\r\n    timeBonus: 0,\r\n    initialTimeRemaining: null,\r\n    streakBonus: true,\r\n    levelStartTime: Date.now(),\r\n    questionStartTime: 0,\r\n    wrongStreak: 0,\r\n    progressLost: 0,\r\n    customList: customGameState.currentList,\r\n    customLevel: level,\r\n    isFinalLevel: levelData.isFinal\r\n  };\r\n  \r\n  // Show level intro and start the level\r\n  showLevelIntro(level, () => {\r\n    showScreen(\"question-screen\");\r\n    updateProgressCircle();\r\n    loadNextQuestion();\r\n    startTimer(10 * currentGame.words.length);\r\n  });\r\n}\r\n\r\n/**\r\n * Handle completion of a custom level\r\n */\r\nfunction handleCustomLevelCompletion() {\r\n  // Clear the timer\r\n  clearTimer();\r\n  \r\n  // Check if level was completed successfully\r\n  const isPerfect = currentGame.streakBonus && currentGame.correctAnswers === currentGame.words.length;\r\n  \r\n  if (isPerfect) {\r\n    // Award bonus coins for perfect completion\r\n    const coinsToAward = currentGame.firstAttempt ? 5 : 3;\r\n    \r\n    CoinsManager.updateCoins(coinsToAward).then(() => {\r\n      pulseCoins(coinsToAward);\r\n      \r\n      // Mark level as completed\r\n      customGameState.wordsCompleted += currentGame.words.length;\r\n      customGameState.completedLevels.add(customGameState.currentLevel);\r\n      \r\n      // Create particle effect\r\n      const rect = document.getElementById(\"question-screen\").getBoundingClientRect();\r\n      createParticles(rect.left + rect.width / 2, rect.top + rect.height / 2);\r\n      \r\n      // Check if this was the final level or move to next level\r\n      const nextLevel = customGameState.currentLevel + 1;\r\n      const nextLevelData = customGameState.getWordsForLevel(nextLevel);\r\n      \r\n      if (!nextLevelData || nextLevelData.words.length === 0 || currentGame.isFinalLevel) {\r\n        setTimeout(() => showCustomCompletionScreen(), 1500);\r\n      } else {\r\n        setTimeout(() => startCustomLevel(nextLevel), 1500);\r\n      }\r\n    });\r\n  } else {\r\n    // If not perfect, retry the level\r\n    setTimeout(() => startCustomLevel(customGameState.currentLevel), 1500);\r\n  }\r\n  \r\n  // Save progress\r\n  saveProgress();\r\n}\r\n\r\n/**\r\n * Show the completion screen for custom practice\r\n */\r\nfunction showCustomCompletionScreen() {\r\n  const overlay = document.createElement(\"div\");\r\n  overlay.className = \"completion-overlay\";\r\n  \r\n  const coinsEarned = gameState.coins - customGameState.startCoins;\r\n  \r\n  overlay.innerHTML = `\r\n    <div class=\"completion-content\">\r\n      <h2>Practice Complete!</h2>\r\n      <div class=\"completion-stats\">\r\n        <div class=\"stat-item\">\r\n          <i class=\"fas fa-book\"></i>\r\n          <span>Words Practiced: ${customGameState.wordsCompleted}</span>\r\n        </div>\r\n        <div class=\"stat-item\">\r\n          <i class=\"fas fa-coins\"></i>\r\n          <span>Coins Earned: ${coinsEarned}</span>\r\n        </div>\r\n      </div>\r\n      <button onclick=\"exitCustomPractice()\" class=\"start-button\">Continue</button>\r\n    </div>\r\n  `;\r\n  \r\n  document.body.appendChild(overlay);\r\n}\r\n\r\n/**\r\n * Exit custom practice mode and return to lists screen\r\n */\r\nfunction exitCustomPractice() {\r\n  customGameState.reset();\r\n  \r\n  const overlay = document.querySelector(\".completion-overlay\");\r\n  if (overlay) overlay.remove();\r\n  \r\n  showScreen(\"custom-practice-screen\");\r\n}\r\n\r\n/**\r\n * Handle an answer in custom practice mode\r\n * @param {boolean} isCorrect - Whether the answer is correct\r\n * @param {boolean} isSkip - Whether this was a skip action\r\n */\r\nasync function handleCustomPracticeAnswer(isCorrect, isSkip = false) {\r\n  if (isCorrect) {\r\n    // Handle correct answer\r\n    currentGame.currentIndex++;\r\n    \r\n    if (isCorrect && !isSkip) {\r\n      let coinsToAward = 0;\r\n      \r\n      // Award time bonus\r\n      const timeBonus = awardTimeBonus();\r\n      if (timeBonus > 0) {\r\n        coinsToAward += timeBonus;\r\n        pulseCoins(timeBonus);\r\n      }\r\n      \r\n      // Award correctness bonus\r\n      if (currentGame.firstAttempt) {\r\n        coinsToAward += 3;\r\n        pulseCoins(3);\r\n      } else {\r\n        coinsToAward += 1;\r\n        pulseCoins(1);\r\n      }\r\n      \r\n      try {\r\n        await CoinsManager.updateCoins(coinsToAward);\r\n        updatePerkButtons();\r\n      } catch (error) {\r\n        console.error(\"Error updating total coins:\", error);\r\n      }\r\n      \r\n      currentGame.correctAnswers++;\r\n      \r\n      // Track word for any registered user, not just premium\r\n      if (currentUser) {\r\n        const index = currentGame.currentIndex - 1; // Fix index to get the word that was just answered\r\n        const word = currentGame.isHebrewToEnglish ? \r\n                    currentGame.words[index] : \r\n                    currentGame.translations[index];\r\n        \r\n        await trackWordEncounter(word, \"custom\");\r\n      }\r\n    }\r\n  } else {\r\n    // Handle wrong answer\r\n    currentGame.firstAttempt = false;\r\n    currentGame.streakBonus = false;\r\n    currentGame.wrongStreak++;\r\n    \r\n    try {\r\n      await CoinsManager.updateCoins(-3);\r\n      updatePerkButtons();\r\n    } catch (error) {\r\n      console.error(\"Error updating coins:\", error);\r\n    }\r\n    \r\n    // Move back if too many wrong answers\r\n    if (currentGame.currentIndex > 0) {\r\n      currentGame.progressLost++;\r\n      currentGame.currentIndex = Math.max(0, currentGame.currentIndex - 1);\r\n    }\r\n    \r\n    // Show game over screen if too many wrong answers in a row\r\n    if (currentGame.wrongStreak >= 3) {\r\n      showGameOverOverlay();\r\n      \r\n      // Set up restart button\r\n      document.querySelector(\".restart-button\").onclick = () => {\r\n        document.querySelector(\".failure-overlay\").style.display = \"none\";\r\n        startCustomLevel(currentGame.customLevel);\r\n      };\r\n      \r\n      return;\r\n    }\r\n  }\r\n  \r\n  // Highlight correct/incorrect answers\r\n  const correctWord = currentGame.isHebrewToEnglish ? \r\n                     currentGame.words[Math.max(0, currentGame.currentIndex - 1)] : \r\n                     currentGame.translations[Math.max(0, currentGame.currentIndex - 1)];\r\n  \r\n  document.querySelectorAll(\".buttons button\").forEach(button => {\r\n    if (button.textContent === correctWord) {\r\n      button.classList.add(\"correct\");\r\n    } else if (!isCorrect && event && event.target && button.textContent === event.target.textContent) {\r\n      button.classList.add(\"wrong\");\r\n    }\r\n  });\r\n  \r\n  // Update UI and save progress\r\n  updateProgressCircle();\r\n  saveProgress();\r\n  \r\n  // Load next question or finish level\r\n  setTimeout(() => {\r\n    document.querySelectorAll(\".buttons button\").forEach(btn => {\r\n      btn.classList.remove(\"correct\", \"wrong\");\r\n    });\r\n    \r\n    if (currentGame.currentIndex < currentGame.words.length) {\r\n      loadNextQuestion();\r\n      updatePerkButtons();\r\n    } else {\r\n      handleCustomLevelCompletion();\r\n    }\r\n  }, 333);\r\n}\r\n\r\n/**\r\n * Update schema for a custom list\r\n * @param {Object} list - The list to update\r\n * @returns {Object} - The updated list\r\n */\r\nfunction updateCustomListSchema(list) {\r\n  if (!list) return list;\r\n  \r\n  const wordCount = list.words?.length || 0;\r\n  let maxLevels = 0;\r\n  \r\n  if (wordCount >= 6) {\r\n    maxLevels = wordCount >= 12 ? 9 : \r\n               wordCount >= 9 ? 6 : 3;\r\n  }\r\n  \r\n  return {\r\n    ...list,\r\n    min_words: 6,\r\n    max_levels: maxLevels\r\n  };\r\n}\r\n\r\n/**\r\n * Show the custom lists manager screen\r\n */\r\nfunction showCustomListsManager() {\r\n  showScreen(\"custom-practice-screen\");\r\n  \r\n  Promise.resolve(CustomListsManager.initialize()).then(() => {\r\n    const container = document.getElementById(\"custom-lists-container\");\r\n    if (!container) return;\r\n    \r\n    const limits = CustomListsManager.getListLimits();\r\n    const userStatus = currentUser?.status || \"unregistered\";\r\n    \r\n    container.innerHTML = \"\";\r\n    \r\n    const lists = CustomListsManager.lists || [];\r\n    \r\n    if (lists.length === 0) {\r\n      container.innerHTML = '<p style=\"color: white; text-align: center;\">No custom lists created yet. Create your first list!</p>';\r\n      return;\r\n    }\r\n    \r\n    lists.forEach(list => {\r\n      const listPlaysKey = `listPlays_${list.id}`;\r\n      const playsUsed = parseInt(localStorage.getItem(listPlaysKey) || \"0\");\r\n      const playsLeft = limits.maxPlays - playsUsed;\r\n      \r\n      if (playsLeft <= 0) return;\r\n      \r\n      const listItem = document.createElement(\"div\");\r\n      listItem.className = \"custom-list-item collapsed \" + (list.is_shared ? \"shared-list\" : \"\");\r\n      listItem.dataset.listId = list.id;\r\n      \r\n      listItem.innerHTML = `\r\n        <div class=\"list-actions\">\r\n          <button class=\"start-button practice-button\">Practice</button>\r\n          <button class=\"edit-button\" data-list-id=\"${list.id}\">Edit</button>\r\n          <button class=\"start-button delete-button\">Delete</button>\r\n          ${userStatus === \"premium\" ? `\r\n            <button class=\"share-button\" onclick=\"showShareModal(${list.id})\">\r\n              <i class=\"fas fa-share-alt\"></i> Share\r\n            </button>\r\n          ` : \"\"}\r\n        </div>\r\n        <div class=\"list-header\">\r\n          <h3>${list.name}</h3>\r\n          <div class=\"list-summary\">\r\n            <span>${list.words?.length || 0} words</span>\r\n            <span style=\"color: ${playsLeft <= 2 ? '#ff4444' : '#ffffff'}; margin-left: 1rem;\">\r\n              ${limits.playDisplay}\r\n            </span>\r\n            <p class=\"word-preview\">${(list.words || []).slice(0, 5).join(\", \")}${list.words?.length > 5 ? \"...\" : \"\"}</p>\r\n          </div>\r\n        </div>\r\n      `;\r\n      \r\n      listItem.querySelector(\".practice-button\").addEventListener(\"click\", () => \r\n        startCustomListPractice(list.id)\r\n      );\r\n      \r\n      listItem.querySelector(\".edit-button\").addEventListener(\"click\", () => {\r\n        console.log(\"Edit button clicked for list:\", list.id);\r\n        editCustomList(list.id);\r\n      });\r\n      \r\n      listItem.querySelector(\".delete-button\").addEventListener(\"click\", () => {\r\n        console.log(\"Delete button clicked for list:\", list.id);\r\n        deleteCustomList(list.id);\r\n      });\r\n      \r\n      listItem.querySelector(\".list-header\").addEventListener(\"click\", () => \r\n        toggleListCollapse(list.id)\r\n      );\r\n      \r\n      container.appendChild(listItem);\r\n    });\r\n  }).catch(error => {\r\n    console.error(\"Failed to initialize custom lists:\", error);\r\n    showNotification(\"Error loading lists\", \"error\");\r\n  });\r\n}\r\n\r\n/**\r\n * Get the user limits based on status\r\n * @returns {Object} - The limits object\r\n */\r\nfunction getUserListLimits() {\r\n  if (!currentUser) {\r\n    return {\r\n      maxLists: 3,\r\n      maxWords: 10,\r\n      maxPlays: 5,\r\n      canShare: false\r\n    };\r\n  }\r\n  \r\n  switch (currentUser.status || \"unregistered\") {\r\n    case \"free\":\r\n      return {\r\n        maxLists: 5,\r\n        maxWords: 20,\r\n        maxPlays: 10,\r\n        canShare: false\r\n      };\r\n    case \"pending\":\r\n      return {\r\n        maxLists: 30,\r\n        maxWords: 50,\r\n        maxPlays: Infinity,\r\n        canShare: false,\r\n        playDisplay: \"∞\"\r\n      };\r\n    case \"premium\":\r\n      return {\r\n        maxLists: 30,\r\n        maxWords: 50,\r\n        maxPlays: Infinity,\r\n        canShare: true,\r\n        playDisplay: \"∞\"\r\n      };\r\n    default:\r\n      return {\r\n        maxLists: 3,\r\n        maxWords: 10,\r\n        maxPlays: 5,\r\n        canShare: false\r\n      };\r\n  }\r\n}\r\n\r\n/**\r\n * Validate if a list can be practiced\r\n * @param {Object} list - The list to validate\r\n * @returns {Object} - Validation result with valid flag and message\r\n */\r\nfunction validateListForPractice(list) {\r\n  if (!list || !list.words || !list.translations) {\r\n    return { valid: false, message: \"Invalid list format\" };\r\n  }\r\n  \r\n  if (list.words.length < 6) {\r\n    return { valid: false, message: \"Lists need at least 6 words to practice\" };\r\n  }\r\n  \r\n  return { valid: true };\r\n}\r\n\r\n/**\r\n * Track a list play and handle play limits\r\n * @param {string|number} id - The list ID\r\n * @returns {number|boolean} - Plays left or false if limit reached\r\n */\r\nfunction trackListPlay(id) {\r\n  const key = `listPlays_${id}`;\r\n  let plays = parseInt(localStorage.getItem(key) || \"0\");\r\n  plays++;\r\n  \r\n  const limits = getUserListLimits();\r\n  \r\n  localStorage.setItem(key, plays);\r\n  \r\n  if (plays >= limits.maxPlays) {\r\n    deleteCustomList(id);\r\n    return false;\r\n  }\r\n  \r\n  return limits.maxPlays - plays;\r\n}\r\n\r\n/**\r\n * Save a custom list to Supabase\r\n * @param {Object} list - The list to save\r\n */\r\nasync function saveCustomListToSupabase(list) {\r\n  if (!currentUser || !list) return;\r\n  \r\n  try {\r\n    const { data, error } = await supabaseClient\r\n      .from(\"custom_lists\")\r\n      .upsert(\r\n        {\r\n          user_id: currentUser.id,\r\n          name: list.name,\r\n          words: list.words,\r\n          translations: list.translations,\r\n          status: list.status || currentUser.status\r\n        },\r\n        { onConflict: \"id\" }\r\n      );\r\n    \r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error(\"Error saving list to Supabase:\", error);\r\n    showNotification(\"Failed to save list\", \"error\");\r\n  }\r\n}\r\n\r\nasync function loadCustomLists() {\r\n  try {\r\n    await CustomListsManager.initialize();\r\n    updateListsDisplay();\r\n  } catch (error) {\r\n    console.error(\"Error loading custom lists:\", error);\r\n  }\r\n}\r\n}\r\n\r\n/**\r\n * Show the custom lists manager screen\r\n */\r\n function showCustomListsManager() {\r\n  // Show the custom practice screen first\r\n  showScreen(\"custom-practice-screen\");\r\n  \r\n  // Initialize the CustomListsManager and update display\r\n  Promise.resolve(CustomListsManager.initialize()).then(() => {\r\n    updateListsDisplay();\r\n  }).catch(error => {\r\n    console.error(\"Error initializing custom lists:\", error);\r\n    showNotification(\"Failed to load custom lists\", \"error\");\r\n  });\r\n}\r\n\r\nfunction updateListsDisplay() {\r\n    const container = document.getElementById(\"custom-lists-container\");\r\n    if (!container) return void console.error(\"Custom lists container not found\");\r\n\r\n    const limits = CustomListsManager.getListLimits();\r\n    const userStatus = currentUser?.status || \"unregistered\";\r\n    \r\n    container.innerHTML = \"\";\r\n    \r\n    if (CustomListsManager.lists && Array.isArray(CustomListsManager.lists) && CustomListsManager.lists.length !== 0) {\r\n        CustomListsManager.lists.forEach(list => {\r\n            if (!list || !list.id) return;\r\n            \r\n            const wordCount = list.words?.length || 0;\r\n            const hasSufficientWords = wordCount >= 6;\r\n            \r\n            // Here's the key change - only include plays available text for non-premium users\r\n            const playsAvailableHtml = userStatus === \"premium\" ? \r\n                \"\" : \r\n                `<span style=\"margin-left: 1rem;\">${limits.playDisplay} plays available</span>`;\r\n            \r\n            const listItem = document.createElement(\"div\");\r\n            listItem.className = \"custom-list-item collapsed \" + (list.isShared ? \"shared-list\" : \"\");\r\n            listItem.dataset.listId = list.id;\r\n            \r\n            listItem.innerHTML = `\r\n                <div class=\"list-actions\">\r\n                    <button class=\"main-button practice-button\" ${hasSufficientWords ? \"\" : \"disabled\"}>\r\n                        ${hasSufficientWords ? \"Practice\" : `Need ${6 - wordCount} more`}\r\n                    </button>\r\n                    <button class=\"main-button edit-button\">Edit</button>\r\n                    <button class=\"main-button delete-button\">Delete</button>\r\n                    ${userStatus === \"premium\" ? `\r\n                        <button class=\"main-button share-button\">\r\n                            <i class=\"fas fa-share-alt\"></i> Share\r\n                        </button>\r\n                    ` : \"\"}\r\n                </div>\r\n                <div class=\"list-header\">\r\n                    <h3>${list.name || \"Unnamed List\"}</h3>\r\n                    <div class=\"list-summary\">\r\n                        <span class=\"word-count ${hasSufficientWords ? \"\" : \"insufficient\"}\">${wordCount} words</span>\r\n                        ${hasSufficientWords ? \"\" : '<span class=\"warning-text\">(Minimum 6 needed)</span>'}\r\n                        ${playsAvailableHtml}\r\n                        <p class=\"word-preview\">${Array.isArray(list.words) ? list.words.slice(0, 5).join(\", \") : \"\"}${list.words && list.words.length > 5 ? \"...\" : \"\"}</p>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            \r\n            container.appendChild(listItem);\r\n            \r\n            const practiceButton = listItem.querySelector(\".practice-button\");\r\n            if (practiceButton) {\r\n                if (hasSufficientWords) {\r\n                    practiceButton.onclick = function() {\r\n                        startCustomListPractice(list.id);\r\n                    };\r\n                } else {\r\n                    practiceButton.style.opacity = \"0.6\";\r\n                    practiceButton.style.cursor = \"not-allowed\";\r\n                }\r\n            }\r\n            \r\n            const editButton = listItem.querySelector(\".edit-button\");\r\n            if (editButton) {\r\n                editButton.onclick = function() {\r\n                    editCustomList(list.id);\r\n                };\r\n            }\r\n            \r\n            const deleteButton = listItem.querySelector(\".delete-button\");\r\n            if (deleteButton) {\r\n                deleteButton.onclick = function() {\r\n                    deleteCustomList(list.id);\r\n                };\r\n            }\r\n            \r\n            const shareButton = listItem.querySelector(\".share-button\");\r\n            if (shareButton) {\r\n                shareButton.onclick = function() {\r\n                    showShareModal(list.id);\r\n                };\r\n            }\r\n            \r\n            const listHeader = listItem.querySelector(\".list-header\");\r\n            if (listHeader) {\r\n                listHeader.onclick = function() {\r\n                    toggleListCollapse(list.id);\r\n                };\r\n            }\r\n        });\r\n    } else {\r\n        container.innerHTML = '<p style=\"color: white; text-align: center;\">No custom lists created yet. Create your first list!</p>';\r\n    }\r\n}\r\n\r\n\r\nfunction toggleListCollapse(id) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${id}\"]`);\r\n  if (listItem) {\r\n    listItem.classList.toggle(\"collapsed\");\r\n  }\r\n}\r\n\r\n/**\r\n * Start practicing a custom list\r\n * @param {string|number} id - The list ID\r\n */\r\n function startCustomListPractice(id) {\r\n  // Find the list by ID\r\n  const list = CustomListsManager.lists.find(list => list.id === id);\r\n  if (!list) {\r\n    showNotification(\"List not found\", \"error\");\r\n    return;\r\n  }\r\n  \r\n  // Validate the list for practice\r\n  const validation = CustomListsManager.validateListForPractice(list);\r\n  if (!validation.valid) {\r\n    showNotification(validation.message, \"error\");\r\n    return;\r\n  }\r\n  \r\n  // Track list play if necessary\r\n  const limits = CustomListsManager.getListLimits();\r\n  if (limits.maxPlays !== Infinity) {\r\n    const listPlaysKey = `listPlays_${id}`;\r\n    let playsUsed = parseInt(localStorage.getItem(listPlaysKey) || \"0\");\r\n    playsUsed++;\r\n    \r\n    if (playsUsed > limits.maxPlays) {\r\n      showNotification(\"You've reached the maximum plays for this list\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    localStorage.setItem(listPlaysKey, playsUsed);\r\n  }\r\n  \r\n  // Initialize the custom game state with this list\r\n  if (customGameState.initializeFromList(list)) {\r\n    // Start at level 1\r\n    startCustomLevel(1);\r\n  } else {\r\n    showNotification(\"Failed to initialize practice\", \"error\");\r\n  }\r\n}\r\n\r\n/**\r\n * Start a level in custom practice mode\r\n * @param {number} level - The level number\r\n */\r\nfunction startCustomLevel(level) {\r\n  // Hide powerups in custom practice\r\n  const powerupsContainer = document.querySelector(\".powerups-container\");\r\n  if (powerupsContainer) {\r\n    powerupsContainer.style.display = \"none\";\r\n  }\r\n  \r\n  // Reset admin skip button if it exists\r\n  if (typeof addAdminSkipButton === \"function\") {\r\n    addAdminSkipButton();\r\n  }\r\n  \r\n  // Get words for this level\r\n  const levelData = customGameState.getWordsForLevel(level);\r\n  if (!levelData || !levelData.words.length) {\r\n    showNotification(\"Practice completed!\", \"success\");\r\n    showScreen(\"custom-practice-screen\");\r\n    return;\r\n  }\r\n  \r\n  // Set up the current level\r\n  customGameState.currentLevel = level;\r\n  \r\n  // Initialize game state\r\n  currentGame = {\r\n    words: levelData.words,\r\n    translations: levelData.translations,\r\n    currentIndex: 0,\r\n    correctAnswers: 0,\r\n    firstAttempt: true,\r\n    isHebrewToEnglish: levelData.isTest ? Math.random() < 0.5 : false,\r\n    mixed: levelData.isTest,\r\n    speedChallenge: false,\r\n    isCustomPractice: true,\r\n    customGameState: true,\r\n    startingCoins: gameState.coins,\r\n    startingPerks: { ...gameState.perks },\r\n    timeBonus: 0,\r\n    initialTimeRemaining: null,\r\n    streakBonus: true,\r\n    levelStartTime: Date.now(),\r\n    questionStartTime: 0,\r\n    wrongStreak: 0,\r\n    progressLost: 0,\r\n    customList: customGameState.currentList,\r\n    customLevel: level,\r\n    isFinalLevel: levelData.isFinal\r\n  };\r\n  \r\n  // Show level intro and start the level\r\n  showLevelIntro(level, () => {\r\n    showScreen(\"question-screen\");\r\n    updateProgressCircle();\r\n    loadNextQuestion();\r\n    startTimer(10 * currentGame.words.length);\r\n  });\r\n}\r\n\r\n/**\r\n * Load custom lists and update the UI\r\n * @returns {Promise} - Promise that resolves when lists are loaded\r\n */\r\nasync function loadCustomLists() {\r\n  try {\r\n    console.log(\"Loading custom lists...\");\r\n    \r\n    // Initialize the CustomListsManager\r\n    await CustomListsManager.initialize();\r\n    \r\n    // Check if we're on the custom practice screen\r\n    const customPracticeScreen = document.getElementById(\"custom-practice-screen\");\r\n    if (customPracticeScreen && \r\n        (customPracticeScreen.style.display === \"block\" || \r\n         document.querySelector(\".screen.active\")?.id === \"custom-practice-screen\")) {\r\n      // Only update the display if we're on the custom lists screen\r\n      updateListsDisplay();\r\n    }\r\n    \r\n    console.log(\"Custom lists loaded successfully\");\r\n    return CustomListsManager.lists;\r\n  } catch (error) {\r\n    console.error(\"Error loading custom lists:\", error);\r\n    showNotification(\"Failed to load custom lists\", \"error\", 3000);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Share a custom list with another user\r\n * @param {string|number} listId - The ID of the list to share\r\n * @param {string} targetUserId - The ID of the user to share with\r\n * @returns {Promise<boolean>} - Whether the share was successful\r\n */\r\n async function shareCustomList(listId, targetUserId) {\r\n  console.log(`Starting share process for list ${listId} with user ${targetUserId}`);\r\n  \r\n  if (!currentUser?.id) {\r\n    showNotification(\"You must be logged in to share lists\", \"error\");\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Get the list data from local storage or directly from DB\r\n    let list = CustomListsManager.lists.find(l => String(l.id) === String(listId));\r\n    \r\n    // If list not found locally, try fetching from DB\r\n    if (!list) {\r\n      const { data, error } = await supabaseClient\r\n        .from(\"custom_lists\")\r\n        .select(\"*\")\r\n        .eq(\"id\", listId)\r\n        .single();\r\n        \r\n      if (error || !data) {\r\n        console.error(\"Error fetching list:\", error);\r\n        return false;\r\n      }\r\n      \r\n      list = data;\r\n    }\r\n    \r\n    console.log(\"Found list to share:\", list.name);\r\n    \r\n    // Format the shared list name\r\n    const displayName = currentUser.user_metadata?.name || \r\n                       currentUser.user_metadata?.username || \r\n                       currentUser.email || \r\n                       \"User\";\r\n    const sharedListName = `${list.name} (Shared by ${displayName})`;\r\n    \r\n    // Ensure data is valid\r\n    const words = Array.isArray(list.words) ? list.words : [];\r\n    const translations = Array.isArray(list.translations) ? list.translations : [];\r\n    \r\n    // Insert the shared list directly\r\n    const { error } = await supabaseClient\r\n      .from(\"custom_lists\")\r\n      .insert({\r\n        name: sharedListName,\r\n        words: words,\r\n        translations: translations,\r\n        user_id: targetUserId,\r\n        is_shared: true,\r\n        shared_by: currentUser.id\r\n      });\r\n      \r\n    if (error) {\r\n      console.error(\"Error sharing list:\", error);\r\n      return false;\r\n    }\r\n    \r\n    console.log(\"List shared successfully\");\r\n    showNotification(\"List shared successfully!\", \"success\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Unexpected error in shareCustomList:\", error);\r\n    showNotification(\"Failed to share list\", \"error\");\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Show modal to share a list with other users\r\n * @param {string|number} listId - The ID of the list to share\r\n */\r\nfunction showShareModal(listId) {\r\n  console.log(\"Opening share modal for list:\", listId);\r\n  \r\n  // Remove any existing modals\r\n  const existingModal = document.querySelector(\".share-modal-container\");\r\n  if (existingModal) existingModal.remove();\r\n  \r\n  // Create modal container with backdrop\r\n  const modalContainer = document.createElement(\"div\");\r\n  modalContainer.className = \"share-modal-container\";\r\n  modalContainer.style.position = \"fixed\";\r\n  modalContainer.style.top = \"0\";\r\n  modalContainer.style.left = \"0\";\r\n  modalContainer.style.width = \"100%\";\r\n  modalContainer.style.height = \"100%\";\r\n  modalContainer.style.backgroundColor = \"rgba(0,0,0,0.7)\";\r\n  modalContainer.style.display = \"flex\";\r\n  modalContainer.style.justifyContent = \"center\";\r\n  modalContainer.style.alignItems = \"center\";\r\n  modalContainer.style.zIndex = \"1000\";\r\n  \r\n  // Create actual modal content\r\n  const modal = document.createElement(\"div\");\r\n  modal.className = \"share-modal\";\r\n  modal.style.backgroundColor = \"#1e1e2e\";\r\n  modal.style.borderRadius = \"10px\";\r\n  modal.style.padding = \"20px\";\r\n  modal.style.maxWidth = \"400px\";\r\n  modal.style.width = \"90%\";\r\n  modal.style.maxHeight = \"80vh\";\r\n  modal.style.overflowY = \"auto\";\r\n  \r\n  modal.innerHTML = `\r\n    <h3 style=\"text-align: center; margin-bottom: 20px; color: white;\">Share List</h3>\r\n    <div id=\"share-users-list\" style=\"margin-bottom: 15px;\">Loading users...</div>\r\n    <button id=\"close-share-modal\" style=\"width: 100%; padding: 10px; background-color: #7e3ab3; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 10px;\">Close</button>\r\n  `;\r\n  \r\n  modalContainer.appendChild(modal);\r\n  document.body.appendChild(modalContainer);\r\n  \r\n  // Close button functionality\r\n  document.getElementById(\"close-share-modal\").onclick = function() {\r\n    modalContainer.remove();\r\n  };\r\n  \r\n  // Also close when clicking backdrop, but not when clicking the modal itself\r\n  modalContainer.addEventListener(\"click\", function(event) {\r\n    if (event.target === modalContainer) {\r\n      modalContainer.remove();\r\n    }\r\n  });\r\n  \r\n  // Show users\r\n  const usersList = document.getElementById(\"share-users-list\");\r\n  \r\n  if (!currentUser) {\r\n    usersList.innerHTML = '<div style=\"padding: 10px; color: white;\">You must be logged in to share lists</div>';\r\n    return;\r\n  }\r\n  \r\n  // Fetch users to share with\r\n  supabaseClient\r\n    .from(\"user_profiles\")\r\n    .select(\"id, username, email\")\r\n    .neq(\"id\", currentUser.id)\r\n    .then(({ data, error }) => {\r\n      if (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n        usersList.innerHTML = '<div style=\"padding: 10px; color: white;\">Error loading users</div>';\r\n        return;\r\n      }\r\n      \r\n      if (!data || data.length === 0) {\r\n        usersList.innerHTML = '<div style=\"padding: 10px; color: white;\">No other users found</div>';\r\n        return;\r\n      }\r\n      \r\n      // Render users\r\n      let html = '';\r\n      data.forEach(user => {\r\n        const displayName = user.username || user.email || user.id.substring(0, 8);\r\n        html += `\r\n          <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid rgba(255,255,255,0.1); color: white;\">\r\n            <span>${displayName}</span>\r\n            <button \r\n              class=\"share-with-user-btn\" \r\n              data-user-id=\"${user.id}\" \r\n              style=\"padding: 5px 10px; background-color: #7e3ab3; color: white; border: none; border-radius: 5px; cursor: pointer;\">\r\n              Share\r\n            </button>\r\n          </div>\r\n        `;\r\n      });\r\n      \r\n      usersList.innerHTML = html;\r\n      \r\n      // Add click handlers\r\n      document.querySelectorAll(\".share-with-user-btn\").forEach(button => {\r\n        button.onclick = async function() {\r\n          const userId = this.getAttribute(\"data-user-id\");\r\n          const originalText = this.innerText;\r\n          \r\n          this.innerText = \"Sharing...\";\r\n          this.disabled = true;\r\n          \r\n          const success = await shareCustomList(listId, userId);\r\n          \r\n          if (success) {\r\n            this.innerText = \"Shared ✓\";\r\n            this.style.backgroundColor = \"#28a745\";\r\n          } else {\r\n            this.innerText = originalText;\r\n            this.disabled = false;\r\n          }\r\n        };\r\n      });\r\n    });\r\n}\r\n\r\n/**\r\n * Exit the custom practice mode and return to the list screen\r\n * Called when the user clicks \"Continue\" on the completion screen\r\n */\r\n function exitCustomPractice() {\r\n  console.log(\"Exiting custom practice mode\");\r\n  \r\n  // Remove the completion overlay if it exists\r\n  const overlay = document.querySelector(\".completion-overlay\");\r\n  if (overlay) {\r\n    overlay.remove();\r\n  }\r\n  \r\n  // Reset custom game state\r\n  if (customGameState) {\r\n    customGameState.reset();\r\n  }\r\n  \r\n  // Reset current game\r\n  currentGame = null;\r\n  \r\n  // Return to the custom practice screen\r\n  showScreen(\"custom-practice-screen\");\r\n  \r\n  // If needed, refresh the lists display\r\n  if (typeof refreshCustomLists === 'function') {\r\n    refreshCustomLists();\r\n  }\r\n}\r\n\r\nfunction generateAnswerOptions(correctAnswer) {\r\n  const buttonsContainer = document.querySelector(\".buttons\");\r\n  if (!buttonsContainer) return;\r\n  \r\n  buttonsContainer.innerHTML = \"\";\r\n  \r\n  // Create a set of options including the correct answer\r\n  let options = [correctAnswer];\r\n  const isHebrewAnswer = isHebrewWord(correctAnswer);\r\n  \r\n  // Get additional options based on whether we need Hebrew or English words\r\n  const additionalOptions = getRandomAnswerOptions(correctAnswer, isHebrewAnswer, 3);\r\n  options = options.concat(additionalOptions);\r\n  \r\n  // Shuffle the options\r\n  options = shuffleArray(options);\r\n  \r\n  // Create buttons for each option\r\n  options.forEach(option => {\r\n    const button = document.createElement(\"button\");\r\n    button.textContent = option;\r\n    button.className = isHebrewAnswer ? \"hebrew-text\" : \"\";\r\n    button.onclick = function(event) {\r\n      handleAnswer(event);\r\n    };\r\n    buttonsContainer.appendChild(button);\r\n  });\r\n}\r\n\r\nasync function ensureUserInitialization(userId) {\r\n  try {\r\n    console.log(\"Ensuring proper user initialization for:\", userId);\r\n    \r\n    // Check if player_stats exists\r\n    const { data: statsData, error: statsError } = await supabaseClient\r\n      .from(\"player_stats\")\r\n      .select(\"user_id\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n    \r\n    // If player_stats doesn't exist, create it\r\n    if (statsError && statsError.code === \"PGRST116\") {\r\n      console.log(\"Creating player_stats record for user\");\r\n      const { error: createStatsError } = await supabaseClient\r\n        .from(\"player_stats\")\r\n        .insert([{\r\n          user_id: userId,\r\n          total_levels_completed: 0,\r\n          unique_words_practiced: 0\r\n        }]);\r\n      \r\n      if (createStatsError) {\r\n        console.error(\"Error creating player_stats:\", createStatsError);\r\n      }\r\n    }\r\n    \r\n    // Check if game_progress exists\r\n    const { data: progressData, error: progressError } = await supabaseClient\r\n      .from(\"game_progress\")\r\n      .select(\"user_id\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n    \r\n    // If game_progress doesn't exist, create it\r\n    if (progressError && progressError.code === \"PGRST116\") {\r\n      console.log(\"Creating game_progress record for user\");\r\n      const { error: createProgressError } = await supabaseClient\r\n        .from(\"game_progress\")\r\n        .insert([{\r\n          user_id: userId,\r\n          stage: 1,\r\n          set_number: 1,\r\n          level: 1,\r\n          coins: 0,\r\n          perks: {},\r\n          unlocked_sets: {1: [1]},\r\n          unlocked_levels: {\"1_1\": [1]},\r\n          perfect_levels: [],\r\n          completed_levels: []\r\n        }]);\r\n      \r\n      if (createProgressError) {\r\n        console.error(\"Error creating game_progress:\", createProgressError);\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error in ensureUserInitialization:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction initializeWaitingGame() {\r\n  // Add shuffle function if not already defined\r\n  if (typeof shuffleArray !== 'function') {\r\n    window.shuffleArray = function(array) {\r\n      const shuffled = [...array];\r\n      for (let i = shuffled.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n      }\r\n      return shuffled;\r\n    };\r\n  }\r\n  \r\n  // Get DOM elements\r\n  const gameContainer = document.getElementById('waiting-game-container');\r\n  const playerElement = document.getElementById('waiting-game-player');\r\n  const scoreElement = document.getElementById('waiting-game-score');\r\n  const livesElement = document.getElementById('waiting-game-lives');\r\n  \r\n  if (!gameContainer) {\r\n    console.error('Game container not found!');\r\n    return;\r\n  }\r\n  \r\n  if (!playerElement) {\r\n    console.error('Player element not found!');\r\n    return;\r\n  }\r\n  \r\n  if (!scoreElement) {\r\n    console.error('Score element not found!');\r\n    return;\r\n  }\r\n  \r\n  // Create lives display if it doesn't exist\r\n  if (!livesElement) {\r\n    const livesDiv = document.createElement('div');\r\n    livesDiv.id = 'waiting-game-lives';\r\n    livesDiv.style.cssText = 'position: absolute; top: 40px; right: 10px; color: var(--gold); font-size: 1.2rem; z-index: 10;';\r\n    livesDiv.textContent = '❤️❤️❤️';\r\n    gameContainer.appendChild(livesDiv);\r\n  }\r\n  \r\n  // Show the game container\r\n  gameContainer.style.display = 'block';\r\n  \r\n  // Get appropriate vocabulary words from stage 1\r\n  let wordPairs = [];\r\n  try {\r\n    for (const key in vocabularySets) {\r\n      if (key.startsWith('1_')) {\r\n        const words = vocabularySets[key].words;\r\n        const translations = vocabularySets[key].translations;\r\n        for (let i = 0; i < words.length && i < translations.length; i++) {\r\n          wordPairs.push({\r\n            hebrew: words[i],\r\n            english: translations[i]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.error('Error loading vocabulary for waiting game:', e);\r\n    // Fallback words if vocabulary isn't available\r\n    wordPairs = [\r\n      { hebrew: 'כלב', english: 'dog' },\r\n      { hebrew: 'חתול', english: 'cat' },\r\n      { hebrew: 'בית', english: 'house' },\r\n      { hebrew: 'אוכל', english: 'food' },\r\n      { hebrew: 'מים', english: 'water' },\r\n      { hebrew: 'ספר', english: 'book' },\r\n      { hebrew: 'יד', english: 'hand' },\r\n      { hebrew: 'עיר', english: 'city' },\r\n      { hebrew: 'ילד', english: 'child' },\r\n      { hebrew: 'אישה', english: 'woman' }\r\n    ];\r\n  }\r\n  \r\n  // Shuffle the word pairs\r\n  wordPairs = window.shuffleArray([...wordPairs]);\r\n  \r\n  // Game state\r\n  let gameActive = true;\r\n  let score = 0;\r\n  let speed = 1;\r\n  let fallingWords = [];\r\n  let currentHebrewWord = '';\r\n  let playerPosition = gameContainer.offsetWidth / 2;\r\n  let gameLoopId = null;\r\n  let spawnIntervalId = null;\r\n  let lives = 3;\r\n  let missedMatches = 0;\r\n  const maxMissed = 3;\r\n  \r\n  // Initialize player with random Hebrew word\r\n  function setRandomHebrewWord() {\r\n    const randomPair = wordPairs[Math.floor(Math.random() * wordPairs.length)];\r\n    currentHebrewWord = randomPair.hebrew;\r\n    playerElement.textContent = currentHebrewWord;\r\n  }\r\n  \r\n  function createFallingWord() {\r\n    if (!gameActive) return;\r\n    \r\n    // Find English words that match our current Hebrew word and some that don't\r\n    const matchingWord = wordPairs.find(pair => pair.hebrew === currentHebrewWord)?.english;\r\n    const nonMatchingWords = wordPairs\r\n      .filter(pair => pair.hebrew !== currentHebrewWord)\r\n      .map(pair => pair.english);\r\n    \r\n    // Decide whether to spawn a matching word (higher chance) or random word\r\n    const isMatching = Math.random() < 0.4; // 40% chance for matching word\r\n    \r\n    // Create the falling word element\r\n    const wordElement = document.createElement('div');\r\n    wordElement.className = 'falling-word';\r\n    \r\n    // Choose the word text\r\n    if (isMatching && matchingWord) {\r\n      wordElement.textContent = matchingWord;\r\n      wordElement.dataset.matching = 'true';\r\n    } else {\r\n      const randomNonMatching = nonMatchingWords[Math.floor(Math.random() * nonMatchingWords.length)];\r\n      wordElement.textContent = randomNonMatching || 'word';\r\n      wordElement.dataset.matching = 'false';\r\n    }\r\n    \r\n    // Style the falling word\r\n    wordElement.style.cssText = `\r\n      position: absolute;\r\n      top: -30px;\r\n      left: ${Math.random() * (gameContainer.offsetWidth - 80) + 40}px;\r\n      padding: 5px 10px;\r\n      background: rgba(255, 255, 255, 0.1);\r\n      border-radius: 15px;\r\n      color: white;\r\n      transition: top 0.1s linear;\r\n    `;\r\n    \r\n    gameContainer.appendChild(wordElement);\r\n    \r\n    // Add to tracking array\r\n    fallingWords.push({\r\n      element: wordElement,\r\n      y: -30,\r\n      x: parseFloat(wordElement.style.left),\r\n      width: 0, // Will be set in the game loop after element is rendered\r\n      isMatching: wordElement.dataset.matching === 'true'\r\n    });\r\n  }\r\n  \r\n  function gameLoop() {\r\n    if (!gameActive) return;\r\n    \r\n    const containerBottom = gameContainer.offsetHeight;\r\n    const playerTop = containerBottom - 60;\r\n    \r\n    // Update position and check collision for each falling word\r\n    for (let i = fallingWords.length - 1; i >= 0; i--) {\r\n      const word = fallingWords[i];\r\n      \r\n      // Set width if not set yet\r\n      if (word.width === 0) {\r\n        word.width = word.element.offsetWidth;\r\n      }\r\n      \r\n      // Move the word down\r\n      word.y += speed;\r\n      word.element.style.top = `${word.y}px`;\r\n      \r\n      // Check if word has reached the bottom\r\n      if (word.y > containerBottom) {\r\n        // Check if we missed a matching word\r\n        if (word.isMatching) {\r\n          missedMatches++;\r\n          \r\n          // Show a missed indicator\r\n          const missIndicator = document.createElement('div');\r\n          missIndicator.textContent = `Missed match! (${missedMatches}/${maxMissed})`;\r\n          missIndicator.style.cssText = `\r\n            position: absolute;\r\n            left: ${word.x}px;\r\n            bottom: 10px;\r\n            color: var(--error);\r\n            font-weight: bold;\r\n            animation: float-up 1s forwards;\r\n            z-index: 5;\r\n          `;\r\n          gameContainer.appendChild(missIndicator);\r\n          setTimeout(() => {\r\n            gameContainer.removeChild(missIndicator);\r\n          }, 1000);\r\n          \r\n          // Update lives display\r\n          const livesDisplay = document.getElementById('waiting-game-lives');\r\n          if (livesDisplay) {\r\n            livesDisplay.textContent = '❤️'.repeat(Math.max(0, 3 - missedMatches));\r\n          }\r\n          \r\n          // Check for game over\r\n          if (missedMatches >= maxMissed) {\r\n            gameOver();\r\n          }\r\n        }\r\n        \r\n        // Remove the word\r\n        gameContainer.removeChild(word.element);\r\n        fallingWords.splice(i, 1);\r\n        continue;\r\n      }\r\n      \r\n      // Check for collision with player\r\n      const playerRect = playerElement.getBoundingClientRect();\r\n      const wordRect = word.element.getBoundingClientRect();\r\n      \r\n      if (word.y + word.element.offsetHeight >= playerTop &&\r\n          word.x + word.width >= playerPosition - playerElement.offsetWidth/2 &&\r\n          word.x <= playerPosition + playerElement.offsetWidth/2) {\r\n        \r\n        // Check if this is the correct word to match\r\n        if (word.isMatching) {\r\n          // Matching word - add points\r\n          score += 10;\r\n          scoreElement.textContent = `Score: ${score}`;\r\n          \r\n          // Create a +10 animation\r\n          const pointAnimation = document.createElement('div');\r\n          pointAnimation.textContent = '+10';\r\n          pointAnimation.style.cssText = `\r\n            position: absolute;\r\n            left: ${word.x}px;\r\n            top: ${word.y}px;\r\n            color: var(--gold);\r\n            font-weight: bold;\r\n            animation: float-up 1s forwards;\r\n            z-index: 5;\r\n          `;\r\n          gameContainer.appendChild(pointAnimation);\r\n          setTimeout(() => {\r\n            gameContainer.removeChild(pointAnimation);\r\n          }, 1000);\r\n          \r\n          // Increase difficulty slightly\r\n          speed += 0.05;\r\n          \r\n          // Change the Hebrew word\r\n          setRandomHebrewWord();\r\n        } else {\r\n          // Wrong word - subtract points and lose a life\r\n          score = Math.max(0, score - 5);\r\n          scoreElement.textContent = `Score: ${score}`;\r\n          \r\n          lives--;\r\n          \r\n          // Update lives display\r\n          const livesDisplay = document.getElementById('waiting-game-lives');\r\n          if (livesDisplay) {\r\n            livesDisplay.textContent = '❤️'.repeat(lives);\r\n          }\r\n          \r\n          // Create a -5 animation\r\n          const pointAnimation = document.createElement('div');\r\n          pointAnimation.textContent = '-5';\r\n          pointAnimation.style.cssText = `\r\n            position: absolute;\r\n            left: ${word.x}px;\r\n            top: ${word.y}px;\r\n            color: var(--error);\r\n            font-weight: bold;\r\n            animation: float-up 1s forwards;\r\n            z-index: 5;\r\n          `;\r\n          gameContainer.appendChild(pointAnimation);\r\n          setTimeout(() => {\r\n            gameContainer.removeChild(pointAnimation);\r\n          }, 1000);\r\n          \r\n          // Check for game over\r\n          if (lives <= 0) {\r\n            gameOver();\r\n          }\r\n        }\r\n        \r\n        // Remove the word\r\n        gameContainer.removeChild(word.element);\r\n        fallingWords.splice(i, 1);\r\n      }\r\n    }\r\n    \r\n    // Request next frame\r\n    gameLoopId = requestAnimationFrame(gameLoop);\r\n  }\r\n  \r\n  function gameOver() {\r\n    gameActive = false;\r\n    clearInterval(spawnIntervalId);\r\n    \r\n    // Create game over message\r\n    const gameOverMsg = document.createElement('div');\r\n    gameOverMsg.style.cssText = `\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      background: rgba(0, 0, 0, 0.8);\r\n      padding: 1rem 2rem;\r\n      border-radius: 10px;\r\n      text-align: center;\r\n      z-index: 20;\r\n    `;\r\n    gameOverMsg.innerHTML = `\r\n      <h3 style=\"color: var(--error); margin-bottom: 0.5rem;\">Game Over!</h3>\r\n      <p style=\"margin-bottom: 1rem;\">Score: ${score}</p>\r\n      <button id=\"game-restart-btn\" class=\"start-button\" style=\"font-size: 0.9rem; padding: 0.5rem 1rem;\">Play Again</button>\r\n    `;\r\n    \r\n    gameContainer.appendChild(gameOverMsg);\r\n    \r\n    // Add restart button handler\r\n    document.getElementById('game-restart-btn').addEventListener('click', () => {\r\n      gameContainer.removeChild(gameOverMsg);\r\n      startGame();\r\n    });\r\n  }\r\n  \r\n  // Add event handlers for player movement\r\n  let isDragging = false;\r\n  \r\n  function handleStart(e) {\r\n    isDragging = true;\r\n    const pageX = e.type.includes('touch') ? e.touches[0].pageX : e.pageX;\r\n    const containerRect = gameContainer.getBoundingClientRect();\r\n    playerPosition = pageX - containerRect.left;\r\n    updatePlayerPosition();\r\n    \r\n    if (e.type.includes('touch')) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n  \r\n  function handleMove(e) {\r\n    if (!isDragging) return;\r\n    \r\n    const pageX = e.type.includes('touch') ? e.touches[0].pageX : e.pageX;\r\n    const containerRect = gameContainer.getBoundingClientRect();\r\n    playerPosition = pageX - containerRect.left;\r\n    updatePlayerPosition();\r\n    \r\n    if (e.type.includes('touch')) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n  \r\n  function handleEnd() {\r\n    isDragging = false;\r\n  }\r\n  \r\n  function updatePlayerPosition() {\r\n    // Ensure player stays within boundaries\r\n    playerPosition = Math.max(playerElement.offsetWidth/2, \r\n                     Math.min(gameContainer.offsetWidth - playerElement.offsetWidth/2, \r\n                     playerPosition));\r\n    \r\n    playerElement.style.left = `${playerPosition}px`;\r\n  }\r\n  \r\n  // Add CSS animation\r\n  const styleId = 'waiting-game-styles';\r\n  if (!document.getElementById(styleId)) {\r\n    const style = document.createElement('style');\r\n    style.id = styleId;\r\n    style.textContent = `\r\n      @keyframes float-up {\r\n        0% { transform: translateY(0); opacity: 1; }\r\n        100% { transform: translateY(-30px); opacity: 0; }\r\n      }\r\n      \r\n      .falling-word {\r\n        animation: gentle-wobble 2s infinite alternate;\r\n      }\r\n      \r\n      @keyframes gentle-wobble {\r\n        0% { transform: translateX(0px); }\r\n        100% { transform: translateX(5px); }\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n  \r\n  // Add event listeners for player movement\r\n  playerElement.addEventListener('mousedown', handleStart);\r\n  document.addEventListener('mousemove', handleMove);\r\n  document.addEventListener('mouseup', handleEnd);\r\n  \r\n  // Touch events for mobile\r\n  playerElement.addEventListener('touchstart', handleStart, { passive: false });\r\n  document.addEventListener('touchmove', handleMove, { passive: false });\r\n  document.addEventListener('touchend', handleEnd);\r\n  \r\n  function startGame() {\r\n    // Reset game\r\n    gameActive = true;\r\n    score = 0;\r\n    speed = 1;\r\n    lives = 3;\r\n    missedMatches = 0;\r\n    \r\n    // Update lives display\r\n    const livesDisplay = document.getElementById('waiting-game-lives');\r\n    if (livesDisplay) {\r\n      livesDisplay.textContent = '❤️❤️❤️';\r\n    }\r\n    \r\n    // Clear existing words\r\n    fallingWords.forEach(word => {\r\n      if (word.element.parentNode) {\r\n        gameContainer.removeChild(word.element);\r\n      }\r\n    });\r\n    fallingWords = [];\r\n    \r\n    // Reset score\r\n    scoreElement.textContent = `Score: ${score}`;\r\n    \r\n    // Set initial Hebrew word\r\n    setRandomHebrewWord();\r\n    \r\n    // Start game loop\r\n    gameLoopId = requestAnimationFrame(gameLoop);\r\n    \r\n    // Start spawning words\r\n    spawnIntervalId = setInterval(createFallingWord, 2000);\r\n  }\r\n  \r\n  // Watch for game cancelation when arcade starts\r\n  function checkArcadeStatus() {\r\n    if (currentArcadeSession && currentArcadeSession.state === 'active') {\r\n      // Clean up game\r\n      clearInterval(spawnIntervalId);\r\n      cancelAnimationFrame(gameLoopId);\r\n      gameContainer.style.display = 'none';\r\n      \r\n      // Remove event listeners\r\n      playerElement.removeEventListener('mousedown', handleStart);\r\n      document.removeEventListener('mousemove', handleMove);\r\n      document.removeEventListener('mouseup', handleEnd);\r\n      playerElement.removeEventListener('touchstart', handleStart);\r\n      document.removeEventListener('touchmove', handleMove);\r\n      document.removeEventListener('touchend', handleEnd);\r\n      \r\n      // Clear interval for this check\r\n      clearInterval(arcadeCheckId);\r\n    }\r\n  }\r\n  \r\n  const arcadeCheckId = setInterval(checkArcadeStatus, 1000);\r\n  \r\n  // Start the game\r\n  startGame();\r\n  \r\n  return {\r\n    stop: function() {\r\n      gameActive = false;\r\n      clearInterval(spawnIntervalId);\r\n      cancelAnimationFrame(gameLoopId);\r\n      clearInterval(arcadeCheckId);\r\n    }\r\n  };\r\n}\r\n\r\nfunction updatePlayerRankDisplay() {\r\n  if (!currentArcadeSession || !currentArcadeSession.playerName) return;\r\n  \r\n  // Make sure our own player data is always in the participants array\r\n  let foundSelf = false;\r\n  let playerIndex = -1;\r\n  \r\n  for (let i = 0; i < currentArcadeSession.participants.length; i++) {\r\n    if (currentArcadeSession.participants[i].username === currentArcadeSession.playerName) {\r\n      foundSelf = true;\r\n      playerIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  // If player not found, add them\r\n  if (!foundSelf && currentGame) {\r\n    currentArcadeSession.participants.push({\r\n      username: currentArcadeSession.playerName,\r\n      wordsCompleted: currentGame.wordsCompleted || 0,\r\n      coins: currentGame.coins || 0\r\n    });\r\n  } else if (foundSelf && currentGame) {\r\n    // Make sure our own data is always up-to-date\r\n    currentArcadeSession.participants[playerIndex].wordsCompleted = currentGame.wordsCompleted || 0;\r\n    currentArcadeSession.participants[playerIndex].coins = currentGame.coins || 0;\r\n  }\r\n  \r\n  // Sort players by words completed first, then by coins\r\n  const sortedParticipants = [...currentArcadeSession.participants]\r\n    .sort((a, b) => {\r\n      if (b.wordsCompleted !== a.wordsCompleted) {\r\n        return b.wordsCompleted - a.wordsCompleted;\r\n      }\r\n      return b.coins - a.coins;\r\n    });\r\n    \r\n  // Find our rank in the sorted array\r\n  let playerRank = 0;\r\n  let prevWords = -1;\r\n  let prevCoins = -1;\r\n  let currentRank = 0;\r\n  \r\n  for (let i = 0; i < sortedParticipants.length; i++) {\r\n    const p = sortedParticipants[i];\r\n    \r\n    // Only increment rank if this participant has different stats\r\n    if (p.wordsCompleted !== prevWords || p.coins !== prevCoins) {\r\n      currentRank = i + 1;\r\n      prevWords = p.wordsCompleted;\r\n      prevCoins = p.coins;\r\n    }\r\n    \r\n    // If this is us, record our rank\r\n    if (p.username === currentArcadeSession.playerName) {\r\n      playerRank = currentRank;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  // Default to 1 if something went wrong\r\n  if (playerRank === 0) playerRank = 1;\r\n  \r\n  // Get ordinal suffix\r\n  const getSuffix = (num) => {\r\n    if (num >= 11 && num <= 13) return 'th';\r\n    \r\n    const lastDigit = num % 10;\r\n    switch (lastDigit) {\r\n      case 1: return 'st';\r\n      case 2: return 'nd';\r\n      case 3: return 'rd';\r\n      default: return 'th';\r\n    }\r\n  };\r\n  \r\n  const suffix = getSuffix(playerRank);\r\n  \r\n  // Update or create the rank display\r\n  let rankDisplay = document.querySelector('.player-rank-display');\r\n  \r\n  if (!rankDisplay) {\r\n    // First time creation\r\n    rankDisplay = document.createElement('div');\r\n    rankDisplay.className = 'player-rank-display';\r\n    rankDisplay.dataset.currentRank = playerRank;\r\n    rankDisplay.innerHTML = `\r\n      <div class=\"rank-number entering\">${playerRank}<span class=\"rank-suffix\">${suffix}</span></div>\r\n    `;\r\n    \r\n    const questionScreen = document.getElementById('question-screen');\r\n    if (questionScreen) {\r\n      questionScreen.appendChild(rankDisplay);\r\n    }\r\n  } else {\r\n    const currentRankElement = rankDisplay.querySelector('.rank-number');\r\n    const oldRank = parseInt(rankDisplay.dataset.currentRank || \"1\");\r\n    \r\n    // Only animate if rank actually changed\r\n    if (oldRank !== playerRank) {\r\n      // Store animation in progress\r\n      rankDisplay.dataset.animating = \"true\";\r\n      \r\n      // Start exit animation\r\n      currentRankElement.classList.add('exiting');\r\n      \r\n      // After exit animation completes, show new rank with enter animation\r\n      setTimeout(() => {\r\n        if (rankDisplay) {\r\n          const newRankElement = document.createElement('div');\r\n          newRankElement.className = 'rank-number entering';\r\n          newRankElement.innerHTML = `${playerRank}<span class=\"rank-suffix\">${suffix}</span>`;\r\n          \r\n          rankDisplay.innerHTML = '';\r\n          rankDisplay.appendChild(newRankElement);\r\n          rankDisplay.dataset.currentRank = playerRank;\r\n          \r\n          // Clear animation flag after animation completes\r\n          setTimeout(() => {\r\n            if (rankDisplay) {\r\n              rankDisplay.dataset.animating = \"false\";\r\n              const el = rankDisplay.querySelector('.rank-number');\r\n              if (el) el.classList.remove('entering');\r\n            }\r\n          }, 300);\r\n        }\r\n      }, 300);\r\n    }\r\n  }\r\n  \r\n  // Update rank styling\r\n  rankDisplay.classList.remove('rank-1', 'rank-2', 'rank-3');\r\n  if (playerRank >= 1 && playerRank <= 3) {\r\n    rankDisplay.classList.add(`rank-${playerRank}`);\r\n  }\r\n}\r\n\r\nfunction toggleInlineEdit(listId) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${listId}\"]`);\r\n  if (!listItem) return;\r\n  \r\n  // Check if already in edit mode\r\n  const isEditing = listItem.classList.contains('editing');\r\n  \r\n  if (isEditing) {\r\n    // Save the list\r\n    saveInlineEdit(listId);\r\n  } else {\r\n    // Enter edit mode\r\n    enterInlineEditMode(listId, listItem);\r\n  }\r\n}\r\n\r\nfunction enterInlineEditMode(listId, listItem) {\r\n  const list = CustomListsManager.lists.find(list => list.id === listId);\r\n  if (!list) return;\r\n  \r\n  listItem.classList.add('editing');\r\n  \r\n  // Change Edit button to Save\r\n  const editButton = listItem.querySelector('.edit-button');\r\n  if (editButton) {\r\n    editButton.textContent = 'Save';\r\n  }\r\n  \r\n  // Make list name editable\r\n  const listHeader = listItem.querySelector('.list-header h3');\r\n  const originalName = listHeader.textContent;\r\n  \r\n  // Replace with input field\r\n  listHeader.innerHTML = `<input type=\"text\" class=\"list-name-edit\" value=\"${originalName}\" placeholder=\"List Name\">`;\r\n  \r\n  // Create or show the inline edit container\r\n  let editContainer = listItem.querySelector('.inline-edit-container');\r\n  \r\n  if (!editContainer) {\r\n    editContainer = document.createElement('div');\r\n    editContainer.className = 'inline-edit-container';\r\n    \r\n    // Create word list table\r\n    const wordTable = document.createElement('div');\r\n    wordTable.className = 'inline-word-translation-list';\r\n    editContainer.appendChild(wordTable);\r\n    \r\n    // Add word button\r\n    const addButton = document.createElement('button');\r\n    addButton.className = 'main-button add-word-button';\r\n    addButton.innerHTML = '<i class=\"fas fa-plus\"></i> Add Word';\r\n    addButton.onclick = function() { addInlineWord(listId); };\r\n    editContainer.appendChild(addButton);\r\n    \r\n    // Add after the list header\r\n    listItem.appendChild(editContainer);\r\n  }\r\n  \r\n  // Populate the word list\r\n  populateInlineWordList(listId, editContainer.querySelector('.inline-word-translation-list'));\r\n  \r\n  // Unfold the list item if it's collapsed\r\n  if (listItem.classList.contains('collapsed')) {\r\n    listItem.classList.remove('collapsed');\r\n  }\r\n}\r\n\r\nfunction populateInlineWordList(listId, container) {\r\n  const list = CustomListsManager.lists.find(list => list.id === listId);\r\n  if (!list || !container) return;\r\n  \r\n  container.innerHTML = '';\r\n  \r\n  if (Array.isArray(list.words)) {\r\n    list.words.forEach((word, index) => {\r\n      const translation = list.translations && index < list.translations.length ? list.translations[index] : '';\r\n      \r\n      const wordItem = document.createElement('div');\r\n      wordItem.className = 'inline-word-translation-item';\r\n      wordItem.draggable = true;\r\n      wordItem.innerHTML = `\r\n        <div class=\"drag-handle\">\r\n          <i class=\"fas fa-grip-vertical\"></i>\r\n        </div>\r\n        <span class=\"source-word\" contenteditable=\"true\">${word}</span>\r\n        <input type=\"text\" class=\"target-word\" value=\"${translation}\" placeholder=\"Hebrew translation\">\r\n        <button class=\"delete-word-btn\" onclick=\"deleteInlineWord(this)\">\r\n          <i class=\"fas fa-times\" style=\"font-size: 12px;\"></i>\r\n        </button>\r\n      `;\r\n      \r\n      container.appendChild(wordItem);\r\n      initializeInlineDragAndDrop(wordItem);\r\n    });\r\n  }\r\n  \r\n  makeInlineWordListDraggable(container);\r\n}\r\n\r\nfunction initializeInlineDragAndDrop(element) {\r\n  if (!element) return;\r\n  \r\n  const clone = element.cloneNode(true);\r\n  if (element.parentNode) {\r\n    element.parentNode.replaceChild(clone, element);\r\n  }\r\n  \r\n  element = clone;\r\n  element.setAttribute('draggable', 'true');\r\n  \r\n  element.addEventListener('dragstart', (e) => {\r\n    e.stopPropagation();\r\n    element.classList.add('dragging');\r\n    e.dataTransfer.setData('text/plain', '');\r\n  });\r\n  \r\n  element.addEventListener('dragend', (e) => {\r\n    e.stopPropagation();\r\n    element.classList.remove('dragging');\r\n  });\r\n  \r\n  const deleteBtn = element.querySelector('.delete-word-btn');\r\n  if (deleteBtn) {\r\n    deleteBtn.onclick = () => deleteInlineWord(deleteBtn);\r\n  }\r\n  \r\n  return element;\r\n}\r\n\r\nfunction makeInlineWordListDraggable(container) {\r\n  if (!container) return;\r\n  \r\n  container.addEventListener('dragover', (e) => {\r\n    e.preventDefault();\r\n    const draggingElement = container.querySelector('.dragging');\r\n    if (!draggingElement) return;\r\n    \r\n    const afterElement = getInlineDragAfterElement(container, e.clientY);\r\n    if (afterElement) {\r\n      container.insertBefore(draggingElement, afterElement);\r\n    } else {\r\n      container.appendChild(draggingElement);\r\n    }\r\n  });\r\n  \r\n  container.querySelectorAll('.inline-word-translation-item').forEach(item => {\r\n    initializeInlineDragAndDrop(item);\r\n  });\r\n}\r\n\r\nfunction getInlineDragAfterElement(container, y) {\r\n  if (!container) return null;\r\n  \r\n  const draggableElements = [...container.querySelectorAll('.inline-word-translation-item:not(.dragging)')];\r\n  \r\n  return draggableElements.length ? draggableElements.reduce((closest, element) => {\r\n    const box = element.getBoundingClientRect();\r\n    const offset = y - box.top - box.height / 2;\r\n    if (offset < 0 && offset > closest.offset) {\r\n      return { offset: offset, element: element };\r\n    } else {\r\n      return closest;\r\n    }\r\n  }, { offset: Number.NEGATIVE_INFINITY }).element : null;\r\n}\r\n\r\nfunction addInlineWord(listId) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${listId}\"]`);\r\n  if (!listItem) return;\r\n  \r\n  const container = listItem.querySelector('.inline-word-translation-list');\r\n  if (!container) return;\r\n  \r\n  const wordItem = document.createElement('div');\r\n  wordItem.className = 'inline-word-translation-item';\r\n  wordItem.draggable = true;\r\n  wordItem.innerHTML = `\r\n    <div class=\"drag-handle\">\r\n      <i class=\"fas fa-grip-vertical\"></i>\r\n    </div>\r\n    <span class=\"source-word\" contenteditable=\"true\"></span>\r\n    <input type=\"text\" class=\"target-word\" placeholder=\"Hebrew translation\">\r\n    <button class=\"delete-word-btn\" onclick=\"deleteInlineWord(this)\">\r\n      <i class=\"fas fa-times\" style=\"font-size: 12px;\"></i>\r\n    </button>\r\n  `;\r\n  \r\n  const newItem = container.appendChild(wordItem);\r\n  initializeInlineDragAndDrop(newItem);\r\n  \r\n  if (container.children.length === 1) {\r\n    makeInlineWordListDraggable(container);\r\n  }\r\n  \r\n  newItem.querySelector('.source-word').focus();\r\n}\r\n\r\nfunction deleteInlineWord(button) {\r\n  if (!button) return;\r\n  const wordItem = button.closest('.inline-word-translation-item');\r\n  if (wordItem) {\r\n    wordItem.remove();\r\n  }\r\n}\r\n\r\nfunction saveInlineEdit(listId) {\r\n  const listItem = document.querySelector(`.custom-list-item[data-list-id=\"${listId}\"]`);\r\n  if (!listItem) return;\r\n  \r\n  const list = CustomListsManager.lists.find(list => list.id === listId);\r\n  if (!list) return;\r\n  \r\n  // Get the updated list name\r\n  const nameInput = listItem.querySelector('.list-name-edit');\r\n  const newName = nameInput ? nameInput.value.trim() : list.name;\r\n  \r\n  // Get all words and translations\r\n  const words = [];\r\n  const translations = [];\r\n  \r\n  listItem.querySelectorAll('.inline-word-translation-item').forEach(item => {\r\n    const word = item.querySelector('.source-word').textContent.trim();\r\n    const translation = item.querySelector('.target-word').value.trim();\r\n    \r\n    if (word && translation) {\r\n      words.push(word);\r\n      translations.push(translation);\r\n    }\r\n  });\r\n  \r\n  // Update the list object\r\n  const updatedList = {\r\n    ...list,\r\n    name: newName,\r\n    words: words,\r\n    translations: translations\r\n  };\r\n  \r\n  // Save changes\r\n  CustomListsManager.save(updatedList).then(savedList => {\r\n    if (savedList) {\r\n      // Exit edit mode\r\n      listItem.classList.remove('editing');\r\n      \r\n      // Update the edit button back to \"Edit\"\r\n      const editButton = listItem.querySelector('.edit-button');\r\n      if (editButton) {\r\n        editButton.textContent = 'Edit';\r\n      }\r\n      \r\n      // Update the list header\r\n      const listHeader = listItem.querySelector('.list-header h3');\r\n      if (listHeader) {\r\n        listHeader.textContent = newName;\r\n      }\r\n      \r\n      // Update the list preview\r\n      const wordPreview = listItem.querySelector('.word-preview');\r\n      if (wordPreview) {\r\n        wordPreview.textContent = words.slice(0, 5).join(\", \") + (words.length > 5 ? \"...\" : \"\");\r\n      }\r\n      \r\n      // Update word count\r\n      const wordCount = listItem.querySelector('.word-count');\r\n      if (wordCount) {\r\n        wordCount.textContent = words.length + \" words\";\r\n        wordCount.classList.toggle('insufficient', words.length < 6);\r\n      }\r\n      \r\n      // Hide the warning text if there are enough words\r\n      const warningText = listItem.querySelector('.warning-text');\r\n      if (warningText) {\r\n        warningText.style.display = words.length < 6 ? '' : 'none';\r\n      }\r\n      \r\n      // Enable/disable practice button\r\n      const practiceButton = listItem.querySelector('.practice-button');\r\n      if (practiceButton) {\r\n        const canPractice = words.length >= 6;\r\n        practiceButton.disabled = !canPractice;\r\n        practiceButton.textContent = canPractice ? 'Practice' : `Need ${6 - words.length} more`;\r\n        practiceButton.style.opacity = canPractice ? '1' : '0.6';\r\n        practiceButton.style.cursor = canPractice ? 'pointer' : 'not-allowed';\r\n        \r\n        if (canPractice) {\r\n          practiceButton.onclick = function() {\r\n            startCustomListPractice(listId);\r\n          };\r\n        } else {\r\n          practiceButton.onclick = null;\r\n        }\r\n      }\r\n      \r\n      showNotification('List saved successfully', 'success');\r\n    } else {\r\n      showNotification('Failed to save list', 'error');\r\n    }\r\n  });\r\n}\r\n\r\n// Add this new function to handle direct button clicks\r\nfunction handleUpgradeButtonClick(event) {\r\n  console.log(\"Upgrade button clicked directly\");\r\n  \r\n  // Prevent the default form submission if this is a direct click\r\n  // so we can handle it manually\r\n  if (event) {\r\n    event.preventDefault();\r\n  }\r\n  \r\n  // Call the form submission handler manually\r\n  handleUpgradeSubmit(event);\r\n}\r\n\r\nasync function handleUpgradeSubmit(e) {\r\n    console.log(\"handleUpgradeSubmit called\");\r\n    \r\n    if (e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    const isAdult = document.getElementById(\"isAdult\").checked;\r\n    \r\n    try {\r\n        // Form validation\r\n        if (isAdult) {\r\n            const fullName = document.getElementById(\"fullName\");\r\n            const phone = document.getElementById(\"phone\");\r\n            \r\n            if (!fullName.value.trim()) {\r\n                fullName.style.border = \"2px solid #ff4444\";\r\n                alert(\"Please enter your full name\");\r\n                return false;\r\n            }\r\n            \r\n            if (!phone.value.trim()) {\r\n                phone.style.border = \"2px solid #ff4444\";\r\n                alert(\"Please enter your phone number\");\r\n                return false;\r\n            }\r\n        } else {\r\n            const parentName = document.getElementById(\"parentName\");\r\n            const parentPhone = document.getElementById(\"parentPhone\");\r\n            \r\n            if (!parentName.value.trim()) {\r\n                parentName.style.border = \"2px solid #ff4444\";\r\n                alert(\"Please enter your parent's full name\");\r\n                return false;\r\n            }\r\n            \r\n            if (!parentPhone.value.trim()) {\r\n                parentPhone.style.border = \"2px solid #ff4444\";\r\n                alert(\"Please enter your parent's phone number\");\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        // Create request data\r\n        let requestData = {\r\n            user_id: currentUser.id,\r\n            is_adult: isAdult,\r\n            full_name: isAdult ? document.getElementById(\"fullName\").value : document.getElementById(\"parentName\").value,\r\n            phone: isAdult ? document.getElementById(\"phone\").value : document.getElementById(\"parentPhone\").value,\r\n            parent_name: isAdult ? null : document.getElementById(\"parentName\").value,\r\n            parent_phone: isAdult ? null : document.getElementById(\"parentPhone\").value,\r\n            referral_source: document.getElementById(\"referralSource\").value\r\n        };\r\n        \r\n        // Try to insert into upgrade_requests table\r\n        try {\r\n            const { data, error } = await supabaseClient\r\n                .from(\"upgrade_requests\")\r\n                .insert([requestData])\r\n                .select();\r\n                \r\n            if (error) {\r\n                console.warn(\"Could not save to upgrade_requests table:\", error.message);\r\n            }\r\n        } catch (err) {\r\n            console.warn(\"Error with upgrade_requests table, continuing:\", err.message);\r\n        }\r\n        \r\n        // Update user profile status\r\n        const { error: updateError } = await supabaseClient\r\n            .from(\"user_profiles\")\r\n            .update({ status: \"pending\" })\r\n            .eq(\"id\", currentUser.id);\r\n            \r\n        if (updateError) throw updateError;\r\n        \r\n        // Set local storage flag\r\n        // In the handleUpgradeSubmit function, change:\r\nlocalStorage.setItem(`upgradeRequested_${currentUser.id}`, \"true\");\r\nupdateUserStatusDisplay(\"pending\");\r\nshowUpgradeConfirmation();  // This will now use our new implementation\r\nreturn true;\r\n    } catch (error) {\r\n        console.error(\"Upgrade Request Error:\", error);\r\n        alert(\"Error processing request. Please try again.\");\r\n        return false;\r\n    }\r\n}\r\n\r\n// Simplify the validateForm function to make it more robust\r\nfunction validateForm(isAdult) {\r\n  try {\r\n    if (isAdult) {\r\n      return document.getElementById(\"fullName\").value.trim() && \r\n             document.getElementById(\"phone\").value.trim();\r\n    } else {\r\n      return document.getElementById(\"parentName\").value.trim() && \r\n             document.getElementById(\"parentPhone\").value.trim();\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Error in validateForm:\", e);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Add input event handlers to clear error styling when user starts typing\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  const fields = [\"fullName\", \"phone\", \"parentName\", \"parentPhone\"];\r\n  \r\n  fields.forEach(field => {\r\n    const el = document.getElementById(field);\r\n    if (el) {\r\n      el.addEventListener('input', function() {\r\n        this.style.border = \"1px solid rgba(255, 255, 255, 0.2)\";\r\n      });\r\n    }\r\n  });\r\n  \r\n  // Also ensure the form has the submit handler directly attached\r\n  const form = document.getElementById('upgradeForm');\r\n  if (form) {\r\n    form.addEventListener('submit', function(e) {\r\n      console.log(\"Form submit event triggered\");\r\n      handleUpgradeSubmit(e);\r\n    });\r\n  }\r\n});\r\n\r\n\r\n// Add this to help diagnose issues\r\nwindow.debugUpgrade = function() {\r\n  checkPopupStatus();\r\n  console.log('Upgrade screen visible:', document.getElementById('upgrade-screen').classList.contains('visible'));\r\n  console.log('Upgrade form:', document.getElementById('upgradeForm'));\r\n  console.log('Current user:', currentUser);\r\n};\r\n\r\nfunction showUpgradeConfirmation() {\r\n  // First remove any existing popups\r\n  document.querySelectorAll('.upgrade-confirmation-popup, .confirmation-popup').forEach(popup => popup.remove());\r\n  \r\n  // Create a new container for the popup\r\n  const popupOverlay = document.createElement('div');\r\n  popupOverlay.className = 'upgrade-confirmation-overlay';\r\n  popupOverlay.style.cssText = `\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.7);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 2002;\r\n  `;\r\n  \r\n  // Create the popup content\r\n  const popupContent = document.createElement('div');\r\n  popupContent.className = 'upgrade-confirmation-content';\r\n  popupContent.style.cssText = `\r\n    background: var(--primary-dark);\r\n    border: 3px solid var(--gold);\r\n    border-radius: 20px;\r\n    padding: 2.5rem 2rem;\r\n    text-align: center;\r\n    width: 90%;\r\n    max-width: 450px;\r\n    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.5);\r\n    position: relative;\r\n  `;\r\n  \r\n  // Add the content\r\n  popupContent.innerHTML = `\r\n    <h2 style=\"color: var(--gold); margin-bottom: 1.5rem; font-size: 2rem;\">Thank You!</h2>\r\n    <p style=\"margin-bottom: 2.5rem; color: var(--text); font-size: 1.1rem; line-height: 1.6;\">\r\n      We've received your upgrade request. We'll contact you soon with payment details.\r\n    </p>\r\n    <button id=\"upgrade-continue-button\" style=\"\r\n      background: var(--gold);\r\n      color: var(--primary-dark);\r\n      border: none;\r\n      padding: 1rem 2rem;\r\n      border-radius: 50px;\r\n      font-size: 1.2rem;\r\n      font-weight: bold;\r\n      cursor: pointer;\r\n      transition: all 0.3s ease;\r\n      box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);\r\n      width: 80%;\r\n      max-width: 300px;\r\n    \">Continue Playing</button>\r\n  `;\r\n  \r\n  // Append to DOM\r\n  popupOverlay.appendChild(popupContent);\r\n  document.body.appendChild(popupOverlay);\r\n  \r\n  // Add event listeners after the element is in the DOM\r\n  setTimeout(() => {\r\n    const continueButton = document.getElementById('upgrade-continue-button');\r\n    \r\n    if (continueButton) {\r\n      console.log(\"Adding event listener to continue button\");\r\n      \r\n      // Use multiple event listeners to ensure it works\r\n      continueButton.onclick = function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        console.log(\"Continue button clicked!\");\r\n        handleUpgradeContinue();\r\n        return false;\r\n      };\r\n      \r\n      continueButton.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        console.log(\"Continue button clicked (addEventListener)!\");\r\n        handleUpgradeContinue();\r\n      }, true);\r\n      \r\n      // Add hover effect\r\n      continueButton.addEventListener('mouseover', function() {\r\n        this.style.background = 'linear-gradient(to bottom, var(--gold), #ffa500)';\r\n        this.style.transform = 'translateY(-2px)';\r\n        this.style.boxShadow = '0 7px 20px rgba(255, 215, 0, 0.4)';\r\n      });\r\n      \r\n      continueButton.addEventListener('mouseout', function() {\r\n        this.style.background = 'var(--gold)';\r\n        this.style.transform = 'translateY(0)';\r\n        this.style.boxShadow = '0 5px 15px rgba(255, 215, 0, 0.3)';\r\n      });\r\n    } else {\r\n      console.error(\"Continue button not found in the DOM\");\r\n    }\r\n    \r\n    // Add click handler to close when clicking outside\r\n    popupOverlay.addEventListener('click', function(e) {\r\n      if (e.target === this) {\r\n        handleUpgradeContinue();\r\n      }\r\n    });\r\n    \r\n  }, 100);\r\n  \r\n  console.log(\"Upgrade confirmation popup added to DOM\");\r\n}\r\n\r\nfunction handleUpgradeContinue() {\r\n  console.log(\"handleUpgradeContinue called\");\r\n  const overlay = document.querySelector(\".upgrade-confirmation-overlay\");\r\n  if (overlay) {\r\n    overlay.style.opacity = \"0\";\r\n    overlay.style.transition = \"opacity 0.3s ease\";\r\n    setTimeout(() => {\r\n      if (overlay.parentNode) {\r\n        overlay.parentNode.removeChild(overlay);\r\n      }\r\n    }, 300);\r\n  }\r\n  \r\n  document.querySelectorAll(\".confirmation-popup\").forEach(popup => {\r\n    if (popup.parentNode) {\r\n      popup.parentNode.removeChild(popup);\r\n    }\r\n  });\r\n  \r\n  const upgradeScreen = document.getElementById(\"upgrade-screen\");\r\n  if (upgradeScreen) {\r\n    upgradeScreen.classList.remove(\"visible\");\r\n  }\r\n  \r\n  const upgradeForm = document.getElementById(\"upgradeForm\");\r\n  if (upgradeForm) {\r\n    upgradeForm.reset();\r\n  }\r\n  \r\n  // Remove game context to prevent auto-resume\r\n  localStorage.removeItem(\"gameContext\");\r\n  \r\n  // Simply hide the upgrade prompt and go to welcome screen\r\n  hideUpgradePromptAndContinue();\r\n  showScreen(\"welcome-screen\");\r\n  \r\n  console.log(\"Upgrade process completed, redirected to welcome screen\");\r\n}\r\n\r\nfunction continueAfterUpgrade() {\r\n  console.log(\"continueAfterUpgrade called\");\r\n  \r\n  const popup = document.querySelector(\".confirmation-popup\");\r\n  if (popup) {\r\n    popup.style.opacity = \"0\";\r\n    popup.style.transform = \"translate(-50%, -50%) scale(0.7)\";\r\n    \r\n    setTimeout(() => {\r\n      if (popup.parentNode) {\r\n        popup.parentNode.removeChild(popup);\r\n      }\r\n    }, 300);\r\n  }\r\n\r\n  const upgradeScreen = document.getElementById(\"upgrade-screen\");\r\n  if (upgradeScreen) {\r\n    upgradeScreen.classList.remove(\"visible\");\r\n  }\r\n\r\n  const upgradeForm = document.getElementById(\"upgradeForm\");\r\n  if (upgradeForm) {\r\n    upgradeForm.reset();\r\n  }\r\n\r\n  // Store the current game level/state before hiding for smooth transition\r\n  const currentLevel = gameState.currentLevel;\r\n  \r\n  hideUpgradePromptAndContinue();\r\n  \r\n  // If the player was in the middle of a level, ensure we return to it\r\n  if (currentLevel) {\r\n    console.log(`Resuming gameplay at level ${currentLevel}`);\r\n    setTimeout(() => {\r\n      // Check if we're in a level and resume from there\r\n      const gameContext = localStorage.getItem(\"gameContext\");\r\n      if (gameContext) {\r\n        try {\r\n          const context = JSON.parse(gameContext);\r\n          if (context.level) {\r\n            gameState.currentLevel = context.level;\r\n            startLevel(context.level);\r\n          }\r\n        } catch (e) {\r\n          console.error(\"Error parsing game context:\", e);\r\n        }\r\n      }\r\n    }, 500);\r\n  }\r\n  \r\n  console.log(\"Upgrade process completed\");\r\n}\r\n\r\n// Add a debug function to check popup status\r\nwindow.debugUpgrade = function() {\r\n  const popups = document.querySelectorAll('.confirmation-popup');\r\n  \r\n  if (popups.length === 0) {\r\n    console.log(\"No confirmation popups found in the DOM\");\r\n  } else {\r\n    popups.forEach((popup, index) => {\r\n      console.log(`Popup ${index + 1}:`, {\r\n        visibility: window.getComputedStyle(popup).visibility,\r\n        opacity: window.getComputedStyle(popup).opacity,\r\n        display: window.getComputedStyle(popup).display,\r\n        zIndex: window.getComputedStyle(popup).zIndex,\r\n        transform: window.getComputedStyle(popup).transform,\r\n        position: window.getComputedStyle(popup).position\r\n      });\r\n    });\r\n  }\r\n  \r\n  console.log(\"Upgrade screen visible:\", document.getElementById('upgrade-screen').classList.contains('visible'));\r\n  console.log(\"Upgrade form:\", document.getElementById('upgradeForm'));\r\n  \r\n}\r\n\r\nfunction toggleFullScreen() {\r\n    const root = document.documentElement;\r\n    const fullscreenIcon = document.querySelector('#nav-fullscreen-btn i');\r\n    \r\n    if (document.fullscreenElement) {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen().then(() => {\r\n                if (fullscreenIcon) {\r\n                    fullscreenIcon.className = 'fas fa-expand';\r\n                }\r\n            }).catch(err => {\r\n                console.log(`Error attempting to exit fullscreen: ${err.message}`);\r\n            });\r\n        }\r\n    } else if (root.requestFullscreen) {\r\n        root.requestFullscreen().then(() => {\r\n            if (fullscreenIcon) {\r\n                fullscreenIcon.className = 'fas fa-compress';\r\n            }\r\n        }).catch(err => {\r\n            console.log(`Error attempting to enable fullscreen: ${err.message}`);\r\n        });\r\n    }\r\n}\r\n\r\ndocument.addEventListener('fullscreenchange', function() {\r\n    const fullscreenIcon = document.querySelector('#nav-fullscreen-btn i');\r\n    if (fullscreenIcon) {\r\n        if (document.fullscreenElement) {\r\n            fullscreenIcon.className = 'fas fa-compress';\r\n        } else {\r\n            fullscreenIcon.className = 'fas fa-expand';\r\n        }\r\n    }\r\n});\r\n\r\nfunction updateNavigationContainer() {\r\n    // Remove any existing navigation menu\r\n    const existingMenu = document.querySelector('.navigation-menu');\r\n    if (existingMenu) {\r\n        existingMenu.remove();\r\n    }\r\n\r\n    // Use our vertical navigation container instead\r\n    let navContainer = document.querySelector('.vertical-nav-container');\r\n    \r\n    // If container doesn't exist, create it\r\n    if (!navContainer) {\r\n        navContainer = document.createElement('div');\r\n        navContainer.className = 'vertical-nav-container';\r\n        document.body.appendChild(navContainer);\r\n        \r\n        // Create hamburger button\r\n        const hamburgerBtn = document.createElement('button');\r\n        hamburgerBtn.className = 'hamburger-button';\r\n        hamburgerBtn.id = 'nav-hamburger-btn';\r\n        hamburgerBtn.innerHTML = '<i class=\"fas fa-bars\"></i>';\r\n        hamburgerBtn.onclick = toggleSidePanel;\r\n        navContainer.appendChild(hamburgerBtn);\r\n        \r\n        // Create home button\r\n        const homeBtn = document.createElement('button');\r\n        homeBtn.className = 'nav-button home-button';\r\n        homeBtn.id = 'nav-home-btn';\r\n        homeBtn.innerHTML = '<i class=\"fas fa-home\"></i>';\r\n        homeBtn.onclick = navigateHome || function() { showScreen('welcome-screen'); };\r\n        navContainer.appendChild(homeBtn);\r\n        \r\n        // Create fullscreen button\r\n        const fullscreenBtn = document.createElement('button');\r\n        fullscreenBtn.className = 'nav-button fullscreen-button';\r\n        fullscreenBtn.id = 'nav-fullscreen-btn';\r\n        fullscreenBtn.innerHTML = '<i class=\"fas fa-expand\"></i>';\r\n        fullscreenBtn.onclick = toggleFullScreen;\r\n        navContainer.appendChild(fullscreenBtn);\r\n        \r\n        // Create reset button\r\n        const resetBtn = document.createElement('button');\r\n        resetBtn.className = 'nav-button reset-button';\r\n        resetBtn.id = 'nav-reset-btn';\r\n        resetBtn.innerHTML = '<i class=\"fas fa-trash-alt\"></i>';\r\n        resetBtn.onclick = handleResetProgress;\r\n        navContainer.appendChild(resetBtn);\r\n        \r\n        // Create settings button\r\n        const settingsBtn = document.createElement('button');\r\n        settingsBtn.className = 'nav-button settings-button';\r\n        settingsBtn.id = 'nav-settings-btn';\r\n        settingsBtn.innerHTML = '<i class=\"fas fa-cog\"></i>';\r\n        settingsBtn.onclick = function() {\r\n            const accessibilityModal = document.querySelector('.accessibility-modal');\r\n            if (accessibilityModal) {\r\n                accessibilityModal.classList.add('show');\r\n            }\r\n        };\r\n        navContainer.appendChild(settingsBtn);\r\n        \r\n        // Create accessibility button\r\n        const accessBtn = document.createElement('button');\r\n        accessBtn.className = 'nav-button accessibility-button';\r\n        accessBtn.id = 'nav-accessibility-btn';\r\n        accessBtn.innerHTML = '<i class=\"fas fa-universal-access\"></i>';\r\n        accessBtn.onclick = function() {\r\n            const accessibilityModal = document.querySelector('.accessibility-modal');\r\n            if (accessibilityModal) {\r\n                accessibilityModal.classList.add('show');\r\n            }\r\n        };\r\n        navContainer.appendChild(accessBtn);\r\n    }\r\n    \r\n    // Remove any standalone buttons that might conflict\r\n    const existingButtons = {\r\n        hamburger: document.querySelector('.hamburger-button:not(.vertical-nav-container .hamburger-button)'),\r\n        home: document.querySelector('.home-button:not(.vertical-nav-container .home-button)'),\r\n        fullscreen: document.querySelector('.fullscreen-button:not(.vertical-nav-container .fullscreen-button)'),\r\n        reset: document.querySelector('.reset-button:not(.vertical-nav-container .reset-button)'),\r\n        settings: document.querySelector('.settings-button:not(.vertical-nav-container .settings-button)'),\r\n        accessibility: document.querySelector('.accessibility-toggle')\r\n    };\r\n    \r\n    Object.values(existingButtons).forEach(button => {\r\n        if (button && button.parentNode) {\r\n            button.parentNode.removeChild(button);\r\n        }\r\n    });\r\n}\r\n\r\n// ADD this function to handle mobile optimization of the question screen\r\nfunction optimizeQuestionScreenForMobile() {\r\n  const questionScreen = document.getElementById('question-screen');\r\n  if (!questionScreen) return;\r\n  \r\n  if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\r\n    questionScreen.classList.add('mobile-optimized');\r\n  }\r\n}\r\n\r\n// Call this when showing the question screen\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  // Run on existing showScreen function calls\r\n  const originalShowScreen = window.showScreen;\r\n  if (typeof originalShowScreen === 'function') {\r\n    window.showScreen = function(screenId, forceRefresh) {\r\n      originalShowScreen(screenId, forceRefresh);\r\n      if (screenId === 'question-screen') {\r\n        optimizeQuestionScreenForMobile();\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Also apply when the question screen is already visible\r\n  if (document.getElementById('question-screen')?.classList.contains('visible')) {\r\n    optimizeQuestionScreenForMobile();\r\n  }\r\n});\r\n\r\n"]}