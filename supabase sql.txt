----------------------------------------------------------------------------------------
-- ðŸ”„ CONSOLIDATED DATABASE SETUP (2025-02-23 08:40:19)
-- Author: danavbred
----------------------------------------------------------------------------------------
BEGIN;

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

----------------------------------------------------------------------------------------
-- 1. BASE TABLES
----------------------------------------------------------------------------------------

-- Arcade Events
CREATE TABLE IF NOT EXISTS arcade_events (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    teacher_id uuid,
    otp text,
    status text DEFAULT 'waiting'
);

CREATE TABLE IF NOT EXISTS arcade_participants (
    event_id uuid REFERENCES arcade_events(id),
    username text,
    words integer DEFAULT 0,
    coins integer DEFAULT 0
);

-- Schools and Classes
CREATE TABLE IF NOT EXISTS schools (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    name text NOT NULL,
    subscription_status text DEFAULT 'trial' CHECK (subscription_status IN ('trial', 'active', 'expired')),
    max_teachers integer DEFAULT 5,
    max_students integer DEFAULT 100,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

CREATE TABLE IF NOT EXISTS school_classes (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    school_id uuid REFERENCES schools(id),
    teacher_id uuid REFERENCES auth.users(id),
    name text NOT NULL,
    grade_level integer CHECK (grade_level BETWEEN 1 AND 12),
    invite_code text UNIQUE,
    max_students integer DEFAULT 30,
    status text DEFAULT 'active' CHECK (status IN ('active', 'archived', 'pending')),
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

CREATE TABLE IF NOT EXISTS class_enrollments (
    class_id uuid REFERENCES school_classes(id) ON DELETE CASCADE,
    student_id uuid REFERENCES auth.users(id),
    joined_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    PRIMARY KEY (class_id, student_id)
);

-- User Profiles
CREATE TABLE IF NOT EXISTS user_profiles (
    id uuid PRIMARY KEY REFERENCES auth.users,
    username text UNIQUE,
    email text,
    role text CHECK (role IN ('student', 'teacher', 'admin')) DEFAULT 'student',
    status text DEFAULT 'free' CHECK (status IN ('free', 'pending', 'premium', 'trial', 'unregistered', 'restricted', 'banned')),
    payment_pending boolean DEFAULT false,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

-- Game Progress
CREATE TABLE IF NOT EXISTS game_progress (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id uuid REFERENCES auth.users NOT NULL,
    "currentStage" integer DEFAULT 1,
    "currentSet" integer DEFAULT 1,
    "currentLevel" integer DEFAULT 1,
    stage integer DEFAULT 1,
    set_number integer DEFAULT 1,
    level integer DEFAULT 1,
    coins integer DEFAULT 0,
    perks jsonb DEFAULT '[]'::jsonb,
    "completedLevels" jsonb DEFAULT '[]'::jsonb,
    "perfectLevels" jsonb DEFAULT '[]'::jsonb,
    "unlockedSets" jsonb DEFAULT '{\"1\": [1]}'::jsonb,
    "unlockedLevels" jsonb DEFAULT '{\"1_1\": [1]}'::jsonb,
    "currentStats" jsonb DEFAULT '{\"correct\": 0, \"wrong\": 0, \"streak\": 0}'::jsonb,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    UNIQUE(user_id)
);

-- Player Stats
CREATE TABLE IF NOT EXISTS player_stats (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id uuid REFERENCES auth.users NOT NULL UNIQUE,
    total_levels_completed integer DEFAULT 0,
    unique_words_practiced integer DEFAULT 0,
    last_updated timestamptz DEFAULT now()
);

-- Custom Lists
CREATE TABLE IF NOT EXISTS custom_lists (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id uuid REFERENCES auth.users NOT NULL,
    name text NOT NULL,
    words text[] DEFAULT '{}'::text[],
    translations text[] DEFAULT '{}'::text[],
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    local_id BIGINT DEFAULT 1,
    is_shared boolean DEFAULT false,
    shared_with uuid[] DEFAULT '{}'::uuid[],
    shared_by uuid REFERENCES auth.users(id),
    CONSTRAINT words_translations_length_match CHECK (array_length(words, 1) = array_length(translations, 1))
);

----------------------------------------------------------------------------------------
-- 2. INDICES
----------------------------------------------------------------------------------------
CREATE UNIQUE INDEX IF NOT EXISTS unique_user_game_progress ON game_progress (user_id);
CREATE INDEX IF NOT EXISTS idx_player_stats_user ON player_stats(user_id);
CREATE INDEX IF NOT EXISTS idx_player_stats_levels ON player_stats(total_levels_completed DESC);
CREATE INDEX IF NOT EXISTS idx_custom_lists_user_id ON custom_lists(user_id);
CREATE INDEX IF NOT EXISTS idx_custom_lists_shared_with ON custom_lists USING gin(shared_with);
CREATE INDEX IF NOT EXISTS idx_custom_lists_is_shared ON custom_lists(is_shared) WHERE is_shared = true;

----------------------------------------------------------------------------------------
-- 3. VIEWS
----------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.user_game_progress AS
SELECT 
    user_id,
    "currentStage",
    "currentSet",
    "currentLevel",
    stage,
    set_number,
    level,
    coins,
    perks,
    "completedLevels",
    "perfectLevels",
    "unlockedSets",
    "unlockedLevels",
    "currentStats",
    created_at
FROM game_progress
WHERE user_id = auth.uid();

CREATE OR REPLACE VIEW public.user_game_coins AS
SELECT user_id, coins
FROM game_progress
WHERE user_id = auth.uid();

CREATE OR REPLACE VIEW public.user_stats AS
SELECT 
    user_id,
    unique_words_practiced,
    total_levels_completed
FROM player_stats
WHERE user_id = auth.uid();

CREATE OR REPLACE VIEW player_leaderboard AS
WITH user_rankings AS (
    SELECT 
        up.username,
        COALESCE(ps.total_levels_completed, 0) as total_levels_completed,
        COALESCE(ps.unique_words_practiced, 0) as total_words_learned,
        ROW_NUMBER() OVER (
            ORDER BY COALESCE(ps.total_levels_completed, 0) DESC, 
            COALESCE(ps.unique_words_practiced, 0) DESC
        ) as player_rank
    FROM user_profiles up
    LEFT JOIN player_stats ps ON up.id = ps.user_id
    WHERE up.username IS NOT NULL
)
SELECT 
    username,
    total_levels_completed,
    total_words_learned,
    player_rank
FROM user_rankings
ORDER BY player_rank ASC;

CREATE OR REPLACE VIEW public.current_user_status AS
SELECT 
    auth.uid() as user_id,
    COALESCE(
        (SELECT status FROM public.user_profiles WHERE id = auth.uid()),
        'free'
    ) as status;

CREATE OR REPLACE VIEW public.current_user_stats AS
SELECT 
    auth.uid() as user_id,
    COALESCE(
        (SELECT unique_words_practiced FROM public.player_stats WHERE user_id = auth.uid()),
        0
    ) as unique_words_practiced;

CREATE OR REPLACE VIEW public.user_custom_lists AS
SELECT *
FROM custom_lists
WHERE 
    user_id = auth.uid() OR 
    auth.uid() = ANY(shared_with) OR 
    (is_shared = true AND shared_by != auth.uid());

----------------------------------------------------------------------------------------
-- 4. ROLES AND PERMISSIONS
----------------------------------------------------------------------------------------
DO
$do$
BEGIN
   IF NOT EXISTS (
      SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticated'
   ) THEN
      CREATE ROLE authenticated;
   END IF;
   
   IF NOT EXISTS (
      SELECT FROM pg_catalog.pg_roles WHERE rolname = 'anon'
   ) THEN
      CREATE ROLE anon;
   END IF;
END
$do$;

-- Grant base permissions
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anon;
GRANT ALL ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO anon;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO authenticated;

----------------------------------------------------------------------------------------
-- 5. ROW LEVEL SECURITY
----------------------------------------------------------------------------------------
DO $$
DECLARE
    t text;
BEGIN
    -- Enable RLS on all tables
    FOR t IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public')
    LOOP
        EXECUTE format('ALTER TABLE public.%I ENABLE ROW LEVEL SECURITY', t);
    END LOOP;
END $$;

-- Drop existing policies (if any) and create new ones
DO $$
BEGIN
    -- Game Progress
    DROP POLICY IF EXISTS "Users can manage own game progress" ON game_progress;
    CREATE POLICY "Users can manage own game progress" ON game_progress
        FOR ALL TO authenticated
        USING (auth.uid() = user_id)
        WITH CHECK (auth.uid() = user_id);

    -- Player Stats
    DROP POLICY IF EXISTS "Users can manage own stats" ON player_stats;
    CREATE POLICY "Users can manage own stats" ON player_stats
        FOR ALL TO authenticated
        USING (auth.uid() = user_id)
        WITH CHECK (auth.uid() = user_id);

    -- Custom Lists
    DROP POLICY IF EXISTS "Users can view own and shared lists" ON custom_lists;
    DROP POLICY IF EXISTS "Users can manage own lists" ON custom_lists;
    
    CREATE POLICY "Users can view own and shared lists" ON custom_lists
        FOR SELECT TO authenticated
        USING (
            user_id = auth.uid() OR 
            auth.uid() = ANY(shared_with) OR 
            (is_shared = true AND shared_by != auth.uid())
        );

    CREATE POLICY "Users can manage own lists" ON custom_lists
        FOR ALL TO authenticated
        USING (user_id = auth.uid())
        WITH CHECK (user_id = auth.uid());

    -- Other tables
    DROP POLICY IF EXISTS "Allow authenticated access" ON arcade_events;
    CREATE POLICY "Allow authenticated access" ON arcade_events FOR ALL TO authenticated USING (true);
    
    DROP POLICY IF EXISTS "Allow authenticated access" ON arcade_participants;
    CREATE POLICY "Allow authenticated access" ON arcade_participants FOR ALL TO authenticated USING (true);

    DROP POLICY IF EXISTS "Users can view all profiles" ON user_profiles;
    CREATE POLICY "Users can view all profiles" ON user_profiles FOR SELECT TO authenticated USING (true);
    
    DROP POLICY IF EXISTS "Users can update own profile" ON user_profiles;
    CREATE POLICY "Users can update own profile" ON user_profiles FOR UPDATE TO authenticated USING (auth.uid() = id);
END $$;

----------------------------------------------------------------------------------------
-- 6. TRIGGERS
----------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER 
SECURITY DEFINER 
SET search_path = public
AS $$
BEGIN
    -- Create user profile
    INSERT INTO user_profiles (
        id,
        username,
        email,
        role,
        status,
        metadata
    ) VALUES (
        NEW.id,
        COALESCE(NEW.raw_user_meta_data->>'username', split_part(NEW.email, '@', 1)),
        NEW.email,
        COALESCE(NEW.raw_user_meta_data->>'role', 'student'),
        'free',
        jsonb_build_object(
            'registration_date', NOW(),
            'email_confirmed', NEW.email_confirmed_at IS NOT NULL,
            'last_sign_in', NEW.last_sign_in_at
        )
    );

    -- Create initial data for new user
    INSERT INTO game_progress (user_id) VALUES (NEW.id);
    INSERT INTO player_stats (user_id) VALUES (NEW.id);
    
    INSERT INTO custom_lists (
        user_id,
        name,
        words,
        translations,
        local_id,
        is_shared
    ) VALUES (
        NEW.id,
        'My First List',
        '{}'::text[],
        '{}'::text[],
        1,
        false
    );

    RETURN NEW;
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error in handle_new_user: % %', SQLERRM, SQLSTATE;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

----------------------------------------------------------------------------------------
-- 7. FINAL SETUP
----------------------------------------------------------------------------------------
-- Reset default privileges
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT ALL ON TABLES TO authenticated;

ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT ALL ON SEQUENCES TO authenticated;

ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT ON TABLES TO anon;

-- Force schema cache reload
NOTIFY pgrst, 'reload schema';

COMMIT;