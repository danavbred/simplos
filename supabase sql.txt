----------------------------------------------------------------------------------------
-- üè´ BASE TABLES - RUN THIS FIRST
----------------------------------------------------------------------------------------

DROP TABLE IF EXISTS schools CASCADE;
DROP TABLE IF EXISTS school_classes CASCADE;
DROP TABLE IF EXISTS class_enrollments CASCADE;

CREATE TABLE IF NOT EXISTS schools (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    name text NOT NULL,
    subscription_status text DEFAULT 'trial' CHECK (subscription_status IN ('trial', 'active', 'expired')),
    max_teachers integer DEFAULT 5,
    max_students integer DEFAULT 100,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

CREATE TABLE IF NOT EXISTS public.school_classes (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    school_id uuid REFERENCES schools(id),
    teacher_id uuid REFERENCES auth.users(id),
    name text NOT NULL,
    grade_level integer CHECK (grade_level BETWEEN 1 AND 12),
    invite_code text UNIQUE,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

CREATE TABLE IF NOT EXISTS class_enrollments (
    class_id uuid REFERENCES school_classes(id) ON DELETE CASCADE,
    student_id uuid REFERENCES auth.users(id),
    joined_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    PRIMARY KEY (class_id, student_id)
);

----------------------------------------------------------------------------------------
- üõ°Ô∏è BASE POLICIES - RUN THIS SECOND
----------------------------------------------------------------------------------------

-- School policies
ALTER TABLE schools ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Teachers can view schools"
ON schools
FOR SELECT
USING (true);  -- Simplified to allow all authenticated users to view schools

CREATE POLICY "Admin can manage schools"
ON schools
FOR ALL
USING (
    auth.uid() IN (
        SELECT id FROM user_profiles 
        WHERE role = 'admin'
    )
);

GRANT ALL ON schools TO authenticated;

-- School Classes policies
ALTER TABLE school_classes ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Teachers can manage their classes"
ON school_classes
FOR ALL
USING (auth.uid() = teacher_id);

CREATE POLICY "Students can view enrolled classes"
ON school_classes
FOR SELECT
USING (id IN (
    SELECT class_id 
    FROM class_enrollments 
    WHERE student_id = auth.uid()
));

GRANT ALL ON school_classes TO authenticated;

-- Class Enrollments policies
ALTER TABLE class_enrollments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Teachers can view their class enrollments"
ON class_enrollments
FOR SELECT
USING (
    class_id IN (
        SELECT id 
        FROM school_classes 
        WHERE teacher_id = auth.uid()
    )
);

CREATE POLICY "Students can manage their enrollments"
ON class_enrollments
FOR ALL
USING (student_id = auth.uid());

GRANT ALL ON class_enrollments TO authenticated;

-- Modify school_classes table
ALTER TABLE public.school_classes 
    ADD COLUMN max_students integer DEFAULT 30,
    ADD COLUMN status text DEFAULT 'active' CHECK (status IN ('active', 'archived', 'pending'));

----------------------------------------------------------------------------------------
-- üìù DEFAULT DATA - RUN THIS THIRD
----------------------------------------------------------------------------------------

INSERT INTO schools (name) VALUES ('Default School') RETURNING id;

----------------------------------------------------------------------------------------
-- üéÆ ARCADE EVENTS
----------------------------------------------------------------------------------------

DROP TABLE IF EXISTS arcade_participants CASCADE;
DROP TABLE IF EXISTS arcade_events CASCADE;

CREATE TABLE IF NOT EXISTS arcade_events (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    teacher_id uuid REFERENCES auth.users(id),
    name text NOT NULL,
    access_code text UNIQUE NOT NULL,
    status text DEFAULT 'pending' CHECK (status IN ('pending', 'active', 'completed')),
    created_at timestamptz DEFAULT now()
);

DROP TABLE IF EXISTS arcade_participants;

CREATE TABLE IF NOT EXISTS arcade_participants (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  event_id uuid REFERENCES arcade_events(id) ON DELETE CASCADE,
  player_name text NOT NULL,
  status text DEFAULT 'waiting',
  score integer DEFAULT 0,
  words_completed integer DEFAULT 0,
  joined_at timestamptz DEFAULT now()
);

-- Disable RLS
ALTER TABLE arcade_events DISABLE ROW LEVEL SECURITY;
ALTER TABLE arcade_participants DISABLE ROW LEVEL SECURITY;

-- Grant permissions
GRANT ALL ON arcade_events TO authenticated;
GRANT ALL ON arcade_participants TO authenticated;

----------------------------------------------------------------------------------------
-- üîë USER PROFILES
----------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.user_profiles (
    id uuid PRIMARY KEY REFERENCES auth.users,
    username text UNIQUE,
    email text,
    role text CHECK (role IN ('student', 'teacher', 'admin')) DEFAULT 'student',
    status text DEFAULT 'free' CHECK (status IN ('free', 'pending', 'premium')),
    payment_pending boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

-- Trigger for automatic profile creation on user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.user_profiles (
        id,
        username,
        email,
        role,
        status
    ) VALUES (
        NEW.id,
        COALESCE(
            NEW.raw_user_meta_data->>'username', 
            split_part(NEW.email, '@', 1)
        ),
        NEW.email,
        'student',
        'free'
    );
    RETURN NEW;
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error in handle_new_user: %', SQLERRM;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

CREATE POLICY "Students can join as guests"
ON user_profiles
FOR INSERT
TO authenticated
WITH CHECK (role = 'student');

----------------------------------------------------------------------------------------
-- üõ°Ô∏è POLICIES
----------------------------------------------------------------------------------------
-- Drop existing policies first
DROP POLICY IF EXISTS "Allow users to view all profiles" ON public.user_profiles;
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.user_profiles;
DROP POLICY IF EXISTS "Enable update for users based on id" ON public.user_profiles;
DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can view their own profile" ON public.user_profiles;

-- Create a completely permissive SELECT policy
CREATE POLICY "anyone_can_view_all_profiles"
ON public.user_profiles
FOR SELECT
USING (true);

-- Policy for users to update their own profiles
CREATE POLICY "users_can_update_own_profile"
ON public.user_profiles
FOR UPDATE
USING (auth.uid() = id);

-- Policy for inserting new profiles
CREATE POLICY "users_can_insert_own_profile"
ON public.user_profiles
FOR INSERT
WITH CHECK (auth.uid() = id);

-- Make sure RLS is enabled
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

-- Grant explicit permissions
GRANT SELECT, UPDATE, INSERT ON public.user_profiles TO authenticated;----------------------------------------------------------------------------------------
-- üéÆ GAME PROGRESS
----------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS game_progress (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id uuid REFERENCES auth.users NOT NULL,
    stage integer NOT NULL DEFAULT 1,
    set_number integer NOT NULL DEFAULT 1,
    level integer NOT NULL DEFAULT 1,
    coins integer NOT NULL DEFAULT 0,
    perks jsonb NOT NULL DEFAULT '{}',
    unlocked_sets jsonb NOT NULL DEFAULT '{}',
    unlocked_levels jsonb NOT NULL DEFAULT '{}',
    perfect_levels jsonb NOT NULL DEFAULT '[]',
    completed_levels jsonb NOT NULL DEFAULT '[]',
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

-- Enable Row Level Security
ALTER TABLE game_progress ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage own game progress" 
ON game_progress FOR ALL 
USING (auth.uid() = user_id);

CREATE UNIQUE INDEX unique_user_game_progress ON game_progress (user_id);

----------------------------------------------------------------------------------------
-- üìä STATS
----------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS player_stats (
    user_id uuid REFERENCES auth.users PRIMARY KEY,
    total_levels_completed integer DEFAULT 0,
    unique_words_practiced INTEGER DEFAULT 0,
    last_updated timestamp with time zone DEFAULT timezone('utc'::text, now())
);

-- Indices for performance
CREATE INDEX IF NOT EXISTS idx_player_stats_user ON player_stats(user_id);
CREATE INDEX IF NOT EXISTS idx_player_stats_levels ON player_stats(total_levels_completed DESC);

-- Enable Row Level Security
ALTER TABLE player_stats ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can read any player stats" 
    ON player_stats FOR SELECT 
    USING (true);

CREATE POLICY "Users can update their own stats" 
    ON player_stats FOR UPDATE 
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own stats" 
    ON player_stats FOR INSERT 
    WITH CHECK (auth.uid() = user_id);

-- Leaderboard View
CREATE OR REPLACE VIEW player_leaderboard AS
WITH user_rankings AS (
    SELECT 
        up.username,
        COALESCE(ps.total_levels_completed, 0) as total_levels_completed,
        COALESCE(ps.unique_words_practiced, 0) as total_words_learned,
        ROW_NUMBER() OVER (
            ORDER BY COALESCE(ps.total_levels_completed, 0) DESC, 
            COALESCE(ps.unique_words_practiced, 0) DESC
        ) as player_rank
    FROM user_profiles up
    LEFT JOIN player_stats ps ON up.id = ps.user_id
    WHERE up.username IS NOT NULL
)
SELECT 
    username,
    total_levels_completed,
    total_words_learned,
    player_rank
FROM user_rankings
ORDER BY player_rank ASC;

-- Grant permissions for leaderboard
GRANT SELECT ON player_leaderboard TO authenticated;
GRANT ALL ON player_stats TO authenticated;

--------------------------------------------------------------------------------------------------------------------------------------------------
-- üìù CUSTOM LISTS
----------------------------------------------------------------------------------------
-- Drop existing table if needed (be careful in production)
-- DROP TABLE IF EXISTS custom_lists CASCADE;

CREATE TABLE IF NOT EXISTS custom_lists (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id uuid REFERENCES auth.users NOT NULL,
    name text NOT NULL,
    words text[] DEFAULT '{}',
    translations text[] DEFAULT '{}',
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    local_id BIGINT,
    is_shared boolean DEFAULT false,
    shared_with uuid[] DEFAULT '{}'::uuid[],
    shared_by uuid REFERENCES auth.users(id)
);

-- Enable Row Level Security
ALTER TABLE custom_lists ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DROP POLICY IF EXISTS "Users can view own and shared lists" ON custom_lists;
DROP POLICY IF EXISTS "Users can insert shared lists" ON custom_lists;
DROP POLICY IF EXISTS "Users can update own and shared lists" ON custom_lists;
DROP POLICY IF EXISTS "Users can delete own lists" ON custom_lists;

-- Policy for viewing lists
CREATE POLICY "Users can view own and shared lists" ON custom_lists
FOR SELECT 
USING (
    auth.uid() = user_id OR             -- Own lists
    auth.uid() = ANY(shared_with) OR    -- Lists shared directly with user
    (is_shared = true AND shared_by != auth.uid())  -- Explicitly shared lists
);

-- Policy for inserting lists
CREATE POLICY "Users can insert shared lists" ON custom_lists
FOR INSERT 
WITH CHECK (
    auth.uid() = user_id OR             -- User can insert their own lists
    (
        is_shared = true AND 
        shared_by = auth.uid() AND       -- Sharer must be current user
        array_length(shared_with, 1) > 0 -- At least one recipient
    )
);

-- Policy for updating lists
CREATE POLICY "Users can update own and shared lists" ON custom_lists
FOR UPDATE 
USING (
    auth.uid() = user_id OR             -- Own lists
    auth.uid() = ANY(shared_with)       -- Lists shared with current user
);

-- Policy for deleting lists
CREATE POLICY "Users can delete own lists" ON custom_lists
FOR DELETE 
USING (
    auth.uid() = user_id                -- Only list owner can delete
);

-- Grant permissions to authenticated users
GRANT ALL ON custom_lists TO authenticated;

-- Add at the end of CUSTOM LISTS section
CREATE OR REPLACE FUNCTION insert_shared_list(
    p_user_id uuid,
    p_name text,
    p_words text[],
    p_translations text[],
    p_is_shared boolean,
    p_local_id bigint,
    p_shared_with uuid[],
    p_shared_by uuid
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_list_id uuid;
BEGIN
    INSERT INTO custom_lists (
        user_id,
        name,
        words,
        translations,
        is_shared,
        local_id,
        shared_with,
        shared_by
    ) VALUES (
        p_user_id,
        p_name,
        p_words,
        p_translations,
        p_is_shared,
        p_local_id,
        p_shared_with,
        p_shared_by
    )
    RETURNING id INTO v_list_id;
    
    RETURN v_list_id;
END;
$$;

GRANT EXECUTE ON FUNCTION insert_shared_list TO authenticated;